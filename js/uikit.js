var uikit=function(){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;return function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t,e){
/*! UIkit 3.5.8 | https://www.getuikit.com | (c) 2014 - 2020 YOOtheme | MIT License */
t.exports=function(){var t=Object.prototype,e=t.hasOwnProperty;function n(t,n){return e.call(t,n)}var i={},r=/([a-z\d])([A-Z])/g;function o(t){return t in i||(i[t]=t.replace(r,"$1-$2").toLowerCase()),i[t]}var s=/-(\w)/g;function a(t){return t.replace(s,u)}function u(t,e){return e?e.toUpperCase():""}function c(t){return t.length?u(0,t.charAt(0))+t.slice(1):""}var h=String.prototype,l=h.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function d(t,e){return l.call(t,e)}var f=h.endsWith||function(t){return this.substr(-t.length)===t};function p(t,e){return f.call(t,e)}var g=Array.prototype,m=function(t,e){return!!~this.indexOf(t,e)},v=h.includes||m,w=g.includes||m;function b(t,e){return t&&(z(t)?v:w).call(t,e)}var x=g.findIndex||function(t){for(var e=arguments,n=0;n<this.length;n++)if(t.call(e[1],this[n],n,this))return n;return-1};function y(t,e){return x.call(t,e)}var k=Array.isArray;function $(t){return"function"==typeof t}function S(t){return null!==t&&"object"==typeof t}var I=t.toString;function T(t){return"[object Object]"===I.call(t)}function E(t){return S(t)&&t===t.window}function _(t){return S(t)&&9===t.nodeType}function C(t){return S(t)&&!!t.jquery}function A(t){return S(t)&&t.nodeType>=1}function N(t){return S(t)&&1===t.nodeType}function M(t){return I.call(t).match(/^\[object (NodeList|HTMLCollection)\]$/)}function D(t){return"boolean"==typeof t}function z(t){return"string"==typeof t}function B(t){return"number"==typeof t}function P(t){return B(t)||z(t)&&!isNaN(t-parseFloat(t))}function O(t){return!(k(t)?t.length:S(t)&&Object.keys(t).length)}function H(t){return void 0===t}function L(t){return D(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function j(t){var e=Number(t);return!isNaN(e)&&e}function F(t){return parseFloat(t)||0}function W(t){return A(t)?t:M(t)||C(t)?t[0]:k(t)?W(t[0]):null}function V(t){return A(t)?[t]:M(t)?g.slice.call(t):k(t)?t.map(W).filter(Boolean):C(t)?t.toArray():[]}function R(t){return E(t)?t:(t=W(t))?(_(t)?t:t.ownerDocument).defaultView:window}function q(t){return k(t)?t:z(t)?t.split(/,(?![^(]*\))/).map((function(t){return P(t)?j(t):L(t.trim())})):[t]}function U(t){return t?p(t,"ms")?F(t):1e3*F(t):0}function Y(t,e){return t===e||S(t)&&S(e)&&Object.keys(t).length===Object.keys(e).length&&K(t,(function(t,n){return t===e[n]}))}function X(t,e,n){return t.replace(new RegExp(e+"|"+n,"g"),(function(t){return t===e?n:e}))}var G=Object.assign||function(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];t=Object(t);for(var r=0;r<e.length;r++){var o=e[r];if(null!==o)for(var s in o)n(o,s)&&(t[s]=o[s])}return t};function J(t){return t[t.length-1]}function K(t,e){for(var n in t)if(!1===e(t[n],n))return!1;return!0}function Z(t,e){return t.sort((function(t,n){var i=t[e];void 0===i&&(i=0);var r=n[e];return void 0===r&&(r=0),i>r?1:r>i?-1:0}))}function Q(t,e){var n=new Set;return t.filter((function(t){var i=t[e];return!n.has(i)&&(n.add(i)||!0)}))}function tt(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),Math.min(Math.max(j(t)||0,e),n)}function et(){}function nt(t,e){return t.left<e.right&&t.right>e.left&&t.top<e.bottom&&t.bottom>e.top}function it(t,e){return t.x<=e.right&&t.x>=e.left&&t.y<=e.bottom&&t.y>=e.top}var rt={ratio:function(t,e,n){var i,r="width"===e?"height":"width";return(i={})[r]=t[e]?Math.round(n*t[r]/t[e]):t[r],i[e]=n,i},contain:function(t,e){var n=this;return K(t=G({},t),(function(i,r){return t=t[r]>e[r]?n.ratio(t,r,e[r]):t})),t},cover:function(t,e){var n=this;return K(t=this.contain(t,e),(function(i,r){return t=t[r]<e[r]?n.ratio(t,r,e[r]):t})),t}};function ot(t,e,n){if(S(e))for(var i in e)ot(t,i,e[i]);else{if(H(n))return(t=W(t))&&t.getAttribute(e);V(t).forEach((function(t){$(n)&&(n=n.call(t,ot(t,e))),null===n?at(t,e):t.setAttribute(e,n)}))}}function st(t,e){return V(t).some((function(t){return t.hasAttribute(e)}))}function at(t,e){t=V(t),e.split(" ").forEach((function(e){return t.forEach((function(t){return t.hasAttribute(e)&&t.removeAttribute(e)}))}))}function ut(t,e){for(var n=0,i=[e,"data-"+e];n<i.length;n++)if(st(t,i[n]))return ot(t,i[n])}var ct="undefined"!=typeof window,ht=ct&&/msie|trident/i.test(window.navigator.userAgent),lt=ct&&"rtl"===ot(document.documentElement,"dir"),dt=ct&&"ontouchstart"in window,ft=ct&&window.PointerEvent,pt=ct&&(dt||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints),gt=ft?"pointerdown":dt?"touchstart":"mousedown",mt=ft?"pointermove":dt?"touchmove":"mousemove",vt=ft?"pointerup":dt?"touchend":"mouseup",wt=ft?"pointerenter":dt?"":"mouseenter",bt=ft?"pointerleave":dt?"":"mouseleave",xt=ft?"pointercancel":"touchcancel";function yt(t,e){return W(t)||St(t,$t(t,e))}function kt(t,e){var n=V(t);return n.length&&n||It(t,$t(t,e))}function $t(t,e){return void 0===e&&(e=document),Ct(t)||_(e)?e:e.ownerDocument}function St(t,e){return W(Tt(t,e,"querySelector"))}function It(t,e){return V(Tt(t,e,"querySelectorAll"))}function Tt(t,e,n){if(void 0===e&&(e=document),!t||!z(t))return null;var i;Ct(t=t.replace(_t,"$1 *"))&&(i=[],t=function(t){return t.match(At).map((function(t){return t.replace(/,$/,"").trim()}))}(t).map((function(t,n){var r=e;if("!"===t[0]){var o=t.substr(1).trim().split(" ");r=Bt(Pt(e),o[0]),t=o.slice(1).join(" ").trim()}if("-"===t[0]){var s=t.substr(1).trim().split(" "),a=(r||e).previousElementSibling;r=Dt(a,t.substr(1))?a:null,t=s.slice(1).join(" ")}return r?(r.id||(r.id="uk-"+Date.now()+n,i.push((function(){return at(r,"id")}))),"#"+Ht(r.id)+" "+t):null})).filter(Boolean).join(","),e=document);try{return e[n](t)}catch(t){return null}finally{i&&i.forEach((function(t){return t()}))}}var Et=/(^|[^\\],)\s*[!>+~-]/,_t=/([!>+~-])(?=\s+[!>+~-]|\s*$)/g;function Ct(t){return z(t)&&t.match(Et)}var At=/.*?[^\\](?:,|$)/g,Nt=ct?Element.prototype:{},Mt=Nt.matches||Nt.webkitMatchesSelector||Nt.msMatchesSelector||et;function Dt(t,e){return V(t).some((function(t){return Mt.call(t,e)}))}var zt=Nt.closest||function(t){var e=this;do{if(Dt(e,t))return e}while(e=Pt(e))};function Bt(t,e){return d(e,">")&&(e=e.slice(1)),N(t)?zt.call(t,e):V(t).map((function(t){return Bt(t,e)})).filter(Boolean)}function Pt(t){return(t=W(t))&&N(t.parentNode)&&t.parentNode}var Ot=ct&&window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,(function(t){return"\\"+t}))};function Ht(t){return z(t)?Ot.call(null,t):""}var Lt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function jt(t){return V(t).some((function(t){return Lt[t.tagName.toLowerCase()]}))}function Ft(t){return V(t).some((function(t){return t.offsetWidth||t.offsetHeight||t.getClientRects().length}))}var Wt="input,select,textarea,button";function Vt(t){return V(t).some((function(t){return Dt(t,Wt)}))}function Rt(t,e){return V(t).filter((function(t){return Dt(t,e)}))}function qt(t,e){return z(e)?Dt(t,e)||!!Bt(t,e):t===e||(_(e)?e.documentElement:W(e)).contains(W(t))}function Ut(t,e){for(var n=[];t=Pt(t);)e&&!Dt(t,e)||n.push(t);return n}function Yt(t,e){var n=(t=W(t))?V(t.children):[];return e?Rt(n,e):n}function Xt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Qt(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4];return i=se(i),s.length>1&&(s=ee(s)),a&&a.self&&(s=ne(s)),o&&(s=te(i,o,s)),a=ie(a),r.split(" ").forEach((function(t){return i.forEach((function(e){return e.addEventListener(t,s,a)}))})),function(){return Gt(i,r,s,a)}}function Gt(t,e,n,i){void 0===i&&(i=!1),i=ie(i),t=se(t),e.split(" ").forEach((function(e){return t.forEach((function(t){return t.removeEventListener(e,n,i)}))}))}function Jt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Qt(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4],u=n[5],c=Xt(i,r,o,(function(t){var e=!u||u(t);e&&(c(),s(t,e))}),a);return c}function Kt(t,e,n){return se(t).reduce((function(t,i){return t&&i.dispatchEvent(Zt(e,!0,!0,n))}),!0)}function Zt(t,e,n,i){if(void 0===e&&(e=!0),void 0===n&&(n=!1),z(t)){var r=document.createEvent("CustomEvent");r.initCustomEvent(t,e,n,i),t=r}return t}function Qt(t){return $(t[2])&&t.splice(2,0,!1),t}function te(t,e,n){var i=this;return function(r){t.forEach((function(t){var o=">"===e[0]?It(e,t).reverse().filter((function(t){return qt(r.target,t)}))[0]:Bt(r.target,e);o&&(r.delegate=t,r.current=o,n.call(i,r))}))}}function ee(t){return function(e){return k(e.detail)?t.apply(void 0,[e].concat(e.detail)):t(e)}}function ne(t){return function(e){if(e.target===e.currentTarget||e.target===e.current)return t.call(null,e)}}function ie(t){return t&&ht&&!D(t)?!!t.capture:t}function re(t){return t&&"addEventListener"in t}function oe(t){return re(t)?t:W(t)}function se(t){return k(t)?t.map(oe).filter(Boolean):z(t)?It(t):re(t)?[t]:V(t)}function ae(t){return"touch"===t.pointerType||!!t.touches}function ue(t){var e=t.touches,n=t.changedTouches,i=e&&e[0]||n&&n[0]||t;return{x:i.clientX,y:i.clientY}}var ce=ct&&window.Promise||de,he=function(){var t=this;this.promise=new ce((function(e,n){t.reject=n,t.resolve=e}))},le=ct&&window.setImmediate||setTimeout;function de(t){this.state=2,this.value=void 0,this.deferred=[];var e=this;try{t((function(t){e.resolve(t)}),(function(t){e.reject(t)}))}catch(t){e.reject(t)}}de.reject=function(t){return new de((function(e,n){n(t)}))},de.resolve=function(t){return new de((function(e,n){e(t)}))},de.all=function(t){return new de((function(e,n){var i=[],r=0;function o(n){return function(o){i[n]=o,(r+=1)===t.length&&e(i)}}0===t.length&&e(i);for(var s=0;s<t.length;s+=1)de.resolve(t[s]).then(o(s),n)}))},de.race=function(t){return new de((function(e,n){for(var i=0;i<t.length;i+=1)de.resolve(t[i]).then(e,n)}))};var fe=de.prototype;function pe(t,e){return new ce((function(n,i){var r=G({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:et,responseType:""},e);r.beforeSend(r);var o=r.xhr;for(var s in r)if(s in o)try{o[s]=r[s]}catch(t){}for(var a in o.open(r.method.toUpperCase(),t),r.headers)o.setRequestHeader(a,r.headers[a]);Xt(o,"load",(function(){0===o.status||o.status>=200&&o.status<300||304===o.status?("json"===r.responseType&&z(o.response)&&(o=G(function(t){var e={};for(var n in t)e[n]=t[n];return e}(o),{response:JSON.parse(o.response)})),n(o)):i(G(Error(o.statusText),{xhr:o,status:o.status}))})),Xt(o,"error",(function(){return i(G(Error("Network Error"),{xhr:o}))})),Xt(o,"timeout",(function(){return i(G(Error("Network Timeout"),{xhr:o}))})),o.send(r.data)}))}function ge(t,e,n){return new ce((function(i,r){var o=new Image;o.onerror=function(t){return r(t)},o.onload=function(){return i(o)},n&&(o.sizes=n),e&&(o.srcset=e),o.src=t}))}function me(t){if("loading"===document.readyState)var e=Xt(document,"DOMContentLoaded",(function(){e(),t()}));else t()}function ve(t,e){return e?V(t).indexOf(W(e)):Yt(Pt(t)).indexOf(t)}function we(t,e,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var r=(e=V(e)).length;return t=P(t)?j(t):"next"===t?n+1:"previous"===t?n-1:ve(e,t),i?tt(t,0,r-1):(t%=r)<0?t+r:t}function be(t){return(t=De(t)).innerHTML="",t}function xe(t,e){return t=De(t),H(e)?t.innerHTML:ye(t.hasChildNodes()?be(t):t,e)}function ye(t,e){return t=De(t),Se(e,(function(e){return t.appendChild(e)}))}function ke(t,e){return t=De(t),Se(e,(function(e){return t.parentNode.insertBefore(e,t)}))}function $e(t,e){return t=De(t),Se(e,(function(e){return t.nextSibling?ke(t.nextSibling,e):ye(t.parentNode,e)}))}function Se(t,e){return(t=z(t)?Ne(t):t)?"length"in t?V(t).map(e):e(t):null}function Ie(t){V(t).map((function(t){return t.parentNode&&t.parentNode.removeChild(t)}))}function Te(t,e){for(e=W(ke(t,e));e.firstChild;)e=e.firstChild;return ye(e,t),e}function Ee(t,e){return V(V(t).map((function(t){return t.hasChildNodes?Te(V(t.childNodes),e):ye(t,e)})))}function _e(t){V(t).map(Pt).filter((function(t,e,n){return n.indexOf(t)===e})).forEach((function(t){ke(t,t.childNodes),Ie(t)}))}fe.resolve=function(t){var e=this;if(2===e.state){if(t===e)throw new TypeError("Promise settled with itself.");var n=!1;try{var i=t&&t.then;if(null!==t&&S(t)&&$(i))return void i.call(t,(function(t){n||e.resolve(t),n=!0}),(function(t){n||e.reject(t),n=!0}))}catch(t){return void(n||e.reject(t))}e.state=0,e.value=t,e.notify()}},fe.reject=function(t){if(2===this.state){if(t===this)throw new TypeError("Promise settled with itself.");this.state=1,this.value=t,this.notify()}},fe.notify=function(){var t=this;le((function(){if(2!==t.state)for(;t.deferred.length;){var e=t.deferred.shift(),n=e[0],i=e[1],r=e[2],o=e[3];try{0===t.state?$(n)?r(n.call(void 0,t.value)):r(t.value):1===t.state&&($(i)?r(i.call(void 0,t.value)):o(t.value))}catch(t){o(t)}}}))},fe.then=function(t,e){var n=this;return new de((function(i,r){n.deferred.push([t,e,i,r]),n.notify()}))},fe.catch=function(t){return this.then(void 0,t)};var Ce=/^\s*<(\w+|!)[^>]*>/,Ae=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function Ne(t){var e=Ae.exec(t);if(e)return document.createElement(e[1]);var n=document.createElement("div");return Ce.test(t)?n.insertAdjacentHTML("beforeend",t.trim()):n.textContent=t,n.childNodes.length>1?V(n.childNodes):n.firstChild}function Me(t,e){if(N(t))for(e(t),t=t.firstElementChild;t;){var n=t.nextElementSibling;Me(t,e),t=n}}function De(t,e){return z(t)?Be(t)?W(Ne(t)):St(t,e):W(t)}function ze(t,e){return z(t)?Be(t)?V(Ne(t)):It(t,e):V(t)}function Be(t){return"<"===t[0]||t.match(/^\s*</)}function Pe(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];We(t,e,"add")}function Oe(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];We(t,e,"remove")}function He(t,e){ot(t,"class",(function(t){return(t||"").replace(new RegExp("\\b"+e+"\\b","g"),"")}))}function Le(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];e[0]&&Oe(t,e[0]),e[1]&&Pe(t,e[1])}function je(t,e){return e&&V(t).some((function(t){return t.classList.contains(e.split(" ")[0])}))}function Fe(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(e.length){var i=z(J(e=Ve(e)))?[]:e.pop();e=e.filter(Boolean),V(t).forEach((function(t){for(var n=t.classList,r=0;r<e.length;r++)Re.Force?n.toggle.apply(n,[e[r]].concat(i)):n[(H(i)?!n.contains(e[r]):i)?"add":"remove"](e[r])}))}}function We(t,e,n){(e=Ve(e).filter(Boolean)).length&&V(t).forEach((function(t){var i=t.classList;Re.Multiple?i[n].apply(i,e):e.forEach((function(t){return i[n](t)}))}))}function Ve(t){return t.reduce((function(t,e){return t.concat.call(t,z(e)&&b(e," ")?e.trim().split(" "):e)}),[])}var Re={get Multiple(){return this.get("_multiple")},get Force(){return this.get("_force")},get:function(t){if(!n(this,t)){var e=document.createElement("_").classList;e.add("a","b"),e.toggle("c",!1),this._multiple=e.contains("b"),this._force=!e.contains("c")}return this[t]}},qe={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,widows:!0,"z-index":!0,zoom:!0};function Ue(t,e,n){return V(t).map((function(t){if(z(e)){if(e=Ze(e),H(n))return Xe(t,e);n||B(n)?t.style[e]=P(n)&&!qe[e]?n+"px":n:t.style.removeProperty(e)}else{if(k(e)){var i=Ye(t);return e.reduce((function(t,e){return t[e]=i[Ze(e)],t}),{})}S(e)&&K(e,(function(e,n){return Ue(t,n,e)}))}return t}))[0]}function Ye(t,e){return(t=W(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function Xe(t,e,n){return Ye(t,n)[e]}var Ge={};function Je(t){var e=document.documentElement;if(!ht)return Ye(e).getPropertyValue("--uk-"+t);if(!(t in Ge)){var n=ye(e,document.createElement("div"));Pe(n,"uk-"+t),Ge[t]=Xe(n,"content",":before").replace(/^["'](.*)["']$/,"$1"),Ie(n)}return Ge[t]}var Ke={};function Ze(t){var e=Ke[t];return e||(e=Ke[t]=function(t){t=o(t);var e=document.documentElement.style;if(t in e)return t;for(var n,i=Qe.length;i--;)if((n="-"+Qe[i]+"-"+t)in e)return n}(t)||t),e}var Qe=["webkit","moz","ms"];function tn(t,e,n,i){return void 0===n&&(n=400),void 0===i&&(i="linear"),ce.all(V(t).map((function(t){return new ce((function(r,o){for(var s in e){var a=Ue(t,s);""===a&&Ue(t,s,a)}var u=setTimeout((function(){return Kt(t,"transitionend")}),n);Jt(t,"transitionend transitioncanceled",(function(e){var n=e.type;clearTimeout(u),Oe(t,"uk-transition"),Ue(t,{transitionProperty:"",transitionDuration:"",transitionTimingFunction:""}),"transitioncanceled"===n?o():r()}),{self:!0}),Pe(t,"uk-transition"),Ue(t,G({transitionProperty:Object.keys(e).map(Ze).join(","),transitionDuration:n+"ms",transitionTimingFunction:i},e))}))})))}var en={start:tn,stop:function(t){return Kt(t,"transitionend"),ce.resolve()},cancel:function(t){Kt(t,"transitioncanceled")},inProgress:function(t){return je(t,"uk-transition")}};function nn(t,e,n,i,r){return void 0===n&&(n=200),ce.all(V(t).map((function(t){return new ce((function(o,s){Kt(t,"animationcanceled");var a=setTimeout((function(){return Kt(t,"animationend")}),n);Jt(t,"animationend animationcanceled",(function(e){var n=e.type;clearTimeout(a),"animationcanceled"===n?s():o(),Ue(t,"animationDuration",""),He(t,"uk-animation-\\S*")}),{self:!0}),Ue(t,"animationDuration",n+"ms"),Pe(t,e,"uk-animation-"+(r?"leave":"enter")),d(e,"uk-animation-")&&Pe(t,i&&"uk-transform-origin-"+i,r&&"uk-animation-reverse")}))})))}var rn=new RegExp("uk-animation-(enter|leave)"),on={in:nn,out:function(t,e,n,i){return nn(t,e,n,i,!0)},inProgress:function(t){return rn.test(ot(t,"class"))},cancel:function(t){Kt(t,"animationcanceled")}},sn={width:["x","left","right"],height:["y","top","bottom"]};function an(t,e,n,i,r,o,s,a){n=vn(n),i=vn(i);var u={element:n,target:i};if(!t||!e)return u;var c=cn(t),h=cn(e),l=h;if(mn(l,n,c,-1),mn(l,i,h,1),r=wn(r,c.width,c.height),o=wn(o,h.width,h.height),r.x+=o.x,r.y+=o.y,l.left+=r.x,l.top+=r.y,s){var d=[cn(R(t))];a&&d.unshift(cn(a)),K(sn,(function(t,e){var o=t[0],a=t[1],f=t[2];(!0===s||b(s,o))&&d.some((function(t){var s=n[o]===a?-c[e]:n[o]===f?c[e]:0,d=i[o]===a?h[e]:i[o]===f?-h[e]:0;if(l[a]<t[a]||l[a]+c[e]>t[f]){var p=c[e]/2,g="center"===i[o]?-h[e]/2:0;return"center"===n[o]&&(m(p,g)||m(-p,-g))||m(s,d)}function m(n,i){var s=F((l[a]+n+i-2*r[o]).toFixed(4));if(s>=t[a]&&s+c[e]<=t[f])return l[a]=s,["element","target"].forEach((function(t){u[t][o]=n?u[t][o]===sn[e][1]?sn[e][2]:sn[e][1]:u[t][o]})),!0}}))}))}return un(t,l),u}function un(t,e){if(!e)return cn(t);var n=cn(t),i=Ue(t,"position");["left","top"].forEach((function(r){if(r in e){var o=Ue(t,r);Ue(t,r,e[r]-n[r]+F("absolute"===i&&"auto"===o?hn(t)[r]:o))}}))}function cn(t){var e=R(t),n=e.pageYOffset,i=e.pageXOffset,r=E(t)?{height:dn(t),width:fn(t),top:0,left:0}:function(t){if(!t)return{};var e;Ft(t)||(e=ot(t,"style"),t.style.setProperty("display","block","important"));var n=t.getBoundingClientRect();return ot(t,"style",e),n}(W(t));return{height:r.height,width:r.width,top:r.top+n,left:r.left+i,bottom:r.top+r.height+n,right:r.left+r.width+i}}function hn(t,e){e=e||(W(t)||{}).offsetParent||R(t).document.documentElement;var n=un(t),i=un(e);return{top:n.top-i.top-F(Ue(e,"borderTopWidth")),left:n.left-i.left-F(Ue(e,"borderLeftWidth"))}}function ln(t){var e=[0,0];t=W(t);do{if(e[0]+=t.offsetTop,e[1]+=t.offsetLeft,"fixed"===Ue(t,"position")){var n=R(t);return e[0]+=n.pageYOffset,e[1]+=n.pageXOffset,e}}while(t=t.offsetParent);return e}var dn=pn("height"),fn=pn("width");function pn(t){var e=c(t);return function(n,i){if(H(i)){if(E(n))return n["inner"+e];if(_(n)){var r=n.documentElement;return Math.max(r["offset"+e],r["scroll"+e])}return(i="auto"===(i=Ue(n=W(n),t))?n["offset"+e]:F(i)||0)-gn(n,t)}Ue(n,t,i||0===i?+i+gn(n,t)+"px":"")}}function gn(t,e,n){return void 0===n&&(n="border-box"),Ue(t,"boxSizing")===n?sn[e].slice(1).map(c).reduce((function(e,n){return e+F(Ue(t,"padding"+n))+F(Ue(t,"border"+n+"Width"))}),0):0}function mn(t,e,n,i){K(sn,(function(r,o){var s=r[0],a=r[1],u=r[2];e[s]===u?t[a]+=n[o]*i:"center"===e[s]&&(t[a]+=n[o]*i/2)}))}function vn(t){var e=/left|center|right/,n=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat("center"):n.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:n.test(t[1])?t[1]:"center"}}function wn(t,e,n){var i=(t||"").split(" "),r=i[0],o=i[1];return{x:r?F(r)*(p(r,"%")?e/100:1):0,y:o?F(o)*(p(o,"%")?n/100:1):0}}function bn(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function xn(t,e,n){return void 0===e&&(e="width"),void 0===n&&(n=window),P(t)?+t:p(t,"vh")?yn(dn(R(n)),t):p(t,"vw")?yn(fn(R(n)),t):p(t,"%")?yn(cn(n)[e],t):F(t)}function yn(t,e){return t*F(e)/100}var kn={reads:[],writes:[],read:function(t){return this.reads.push(t),Sn(),t},write:function(t){return this.writes.push(t),Sn(),t},clear:function(t){return Tn(this.reads,t)||Tn(this.writes,t)},flush:$n};function $n(t){void 0===t&&(t=1),In(kn.reads),In(kn.writes.splice(0,kn.writes.length)),kn.scheduled=!1,(kn.reads.length||kn.writes.length)&&Sn(t+1)}function Sn(t){kn.scheduled||(kn.scheduled=!0,t&&t<4?ce.resolve().then((function(){return $n(t)})):requestAnimationFrame((function(){return $n()})))}function In(t){for(var e;e=t.shift();)e()}function Tn(t,e){var n=t.indexOf(e);return!!~n&&!!t.splice(n,1)}function En(){}En.prototype={positions:[],init:function(){var t,e=this;this.positions=[],this.unbind=Xt(document,"mousemove",(function(e){return t=ue(e)})),this.interval=setInterval((function(){t&&(e.positions.push(t),e.positions.length>5&&e.positions.shift())}),50)},cancel:function(){this.unbind&&this.unbind(),this.interval&&clearInterval(this.interval)},movesTo:function(t){if(this.positions.length<2)return!1;var e=t.getBoundingClientRect(),n=e.left,i=e.right,r=e.top,o=e.bottom,s=this.positions[0],a=J(this.positions),u=[s,a];return!it(a,e)&&[[{x:n,y:r},{x:i,y:o}],[{x:n,y:o},{x:i,y:r}]].some((function(t){var n=function(t,e){var n=t[0],i=n.x,r=n.y,o=t[1],s=o.x,a=o.y,u=e[0],c=u.x,h=u.y,l=e[1],d=l.x,f=l.y,p=(f-h)*(s-i)-(d-c)*(a-r);if(0===p)return!1;var g=((d-c)*(r-h)-(f-h)*(i-c))/p;return!(g<0)&&{x:i+g*(s-i),y:r+g*(a-r)}}(u,t);return n&&it(n,e)}))}};var _n={};function Cn(t,e,n){return _n.computed($(t)?t.call(n,n):t,$(e)?e.call(n,n):e)}function An(t,e){return t=t&&!k(t)?[t]:t,e?t?t.concat(e):k(e)?e:[e]:t}function Nn(t,e){return H(e)?t:e}function Mn(t,e,i){var r={};if($(e)&&(e=e.options),e.extends&&(t=Mn(t,e.extends,i)),e.mixins)for(var o=0,s=e.mixins.length;o<s;o++)t=Mn(t,e.mixins[o],i);for(var a in t)c(a);for(var u in e)n(t,u)||c(u);function c(n){r[n]=(_n[n]||Nn)(t[n],e[n],i)}return r}function Dn(t,e){var n;void 0===e&&(e=[]);try{return t?d(t,"{")?JSON.parse(t):e.length&&!b(t,":")?((n={})[e[0]]=t,n):t.split(";").reduce((function(t,e){var n=e.split(/:(.*)/),i=n[0],r=n[1];return i&&!H(r)&&(t[i.trim()]=r.trim()),t}),{}):{}}catch(t){return{}}}function zn(t){if(Hn(t)&&Fn(t,{func:"playVideo",method:"play"}),On(t))try{t.play().catch(et)}catch(t){}}function Bn(t){Hn(t)&&Fn(t,{func:"pauseVideo",method:"pause"}),On(t)&&t.pause()}function Pn(t){Hn(t)&&Fn(t,{func:"mute",method:"setVolume",value:0}),On(t)&&(t.muted=!0)}function On(t){return t&&"VIDEO"===t.tagName}function Hn(t){return t&&"IFRAME"===t.tagName&&(Ln(t)||jn(t))}function Ln(t){return!!t.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)}function jn(t){return!!t.src.match(/vimeo\.com\/video\/.*/)}function Fn(t,e){(function(t){if(t._ukPlayer)return t._ukPlayer;var e,n=Ln(t),i=jn(t),r=++Vn;return t._ukPlayer=new ce((function(o){n&&Jt(t,"load",(function(){var n=function(){return Wn(t,{event:"listening",id:r})};e=setInterval(n,100),n()})),Jt(window,"message",o,!1,(function(t){var e=t.data;try{return(e=JSON.parse(e))&&(n&&e.id===r&&"onReady"===e.event||i&&Number(e.player_id)===r)}catch(t){}})),t.src=t.src+(b(t.src,"?")?"&":"?")+(n?"enablejsapi=1":"api=1&player_id="+r)})).then((function(){return clearInterval(e)}))})(t).then((function(){return Wn(t,e)}))}function Wn(t,e){try{t.contentWindow.postMessage(JSON.stringify(G({event:"command"},e)),"*")}catch(t){}}_n.events=_n.created=_n.beforeConnect=_n.connected=_n.beforeDisconnect=_n.disconnected=_n.destroy=An,_n.args=function(t,e){return!1!==e&&An(e||t)},_n.update=function(t,e){return Z(An(t,$(e)?{read:e}:e),"order")},_n.props=function(t,e){return k(e)&&(e=e.reduce((function(t,e){return t[e]=String,t}),{})),_n.methods(t,e)},_n.computed=_n.methods=function(t,e){return e?t?G({},t,e):e:t},_n.data=function(t,e,n){return n?Cn(t,e,n):e?t?function(n){return Cn(t,e,n)}:e:t};var Vn=0;function Rn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=0),!Ft(t))return!1;var i=Jn(t);return i.every((function(r,o){var s=un(i[o+1]||t),a=un(Gn(r)),u=a.top,c=a.left,h=a.bottom,l=a.right;return nt(s,{top:u-e,left:c-n,bottom:h+e,right:l+n})}))}function qn(t,e){(t=E(t)||_(t)?Kn(t):W(t)).scrollTop=e}function Un(t,e){void 0===e&&(e={});var n=e.offset;if(void 0===n&&(n=0),Ft(t)){for(var i=Jn(t).concat(t),r=ce.resolve(),o=function(t){r=r.then((function(){return new ce((function(e){var r,o=i[t],s=i[t+1],a=o.scrollTop,u=Math.ceil(hn(s,Gn(o)).top-n),c=(r=Math.abs(u),40*Math.pow(r,.375)),h=Date.now(),l=function(){var t,n=(t=tt((Date.now()-h)/c),.5*(1-Math.cos(Math.PI*t)));qn(o,a+u*n),1!==n?requestAnimationFrame(l):e()};l()}))}))},s=0;s<i.length-1;s++)o(s);return r}}function Yn(t,e){if(void 0===e&&(e=0),!Ft(t))return 0;var n=J(Xn(t)),i=n.scrollHeight,r=n.scrollTop,o=un(Gn(n)).height,s=ln(t)[0]-r-ln(n)[0],a=Math.min(o,s+r);return tt(-1*(s-a)/Math.min(un(t).height+e+a,i-(s+r),i-o))}function Xn(t,e){void 0===e&&(e=/auto|scroll/);var n=Kn(t),i=Ut(t).filter((function(t){return t===n||e.test(Ue(t,"overflow"))&&t.scrollHeight>Math.round(un(t).height)})).reverse();return i.length?i:[n]}function Gn(t){return t===Kn(t)?window:t}function Jn(t){return Xn(t,/auto|scroll|hidden/)}function Kn(t){var e=R(t).document;return e.scrollingElement||e.documentElement}var Zn=ct&&window.IntersectionObserver||function(){function t(t,e){var n=this;void 0===e&&(e={});var i=e.rootMargin;void 0===i&&(i="0 0"),this.targets=[];var r,o=(i||"0 0").split(" ").map(F),s=o[0],a=o[1];this.offsetTop=s,this.offsetLeft=a,this.apply=function(){r||(r=requestAnimationFrame((function(){return setTimeout((function(){var e=n.takeRecords();e.length&&t(e,n),r=!1}))})))},this.off=Xt(window,"scroll resize load",this.apply,{passive:!0,capture:!0})}return t.prototype.takeRecords=function(){var t=this;return this.targets.filter((function(e){var n=Rn(e.target,t.offsetTop,t.offsetLeft);if(null===e.isIntersecting||n^e.isIntersecting)return e.isIntersecting=n,!0}))},t.prototype.observe=function(t){this.targets.push({target:t,isIntersecting:null}),this.apply()},t.prototype.disconnect=function(){this.targets=[],this.off()},t}();function Qn(t){return!(!d(t,"uk-")&&!d(t,"data-uk-"))&&a(t.replace("data-uk-","").replace("uk-",""))}var ti=function(t){this._init(t)};ti.util=Object.freeze({__proto__:null,ajax:pe,getImage:ge,transition:tn,Transition:en,animate:nn,Animation:on,attr:ot,hasAttr:st,removeAttr:at,data:ut,addClass:Pe,removeClass:Oe,removeClasses:He,replaceClass:Le,hasClass:je,toggleClass:Fe,positionAt:an,offset:un,position:hn,offsetPosition:ln,height:dn,width:fn,boxModelAdjust:gn,flipPosition:bn,toPx:xn,ready:me,index:ve,getIndex:we,empty:be,html:xe,prepend:function(t,e){return(t=De(t)).hasChildNodes()?Se(e,(function(e){return t.insertBefore(e,t.firstChild)})):ye(t,e)},append:ye,before:ke,after:$e,remove:Ie,wrapAll:Te,wrapInner:Ee,unwrap:_e,fragment:Ne,apply:Me,$:De,$$:ze,inBrowser:ct,isIE:ht,isRtl:lt,hasTouch:pt,pointerDown:gt,pointerMove:mt,pointerUp:vt,pointerEnter:wt,pointerLeave:bt,pointerCancel:xt,on:Xt,off:Gt,once:Jt,trigger:Kt,createEvent:Zt,toEventTargets:se,isTouch:ae,getEventPos:ue,fastdom:kn,isVoidElement:jt,isVisible:Ft,selInput:Wt,isInput:Vt,filter:Rt,within:qt,parents:Ut,children:Yt,hasOwn:n,hyphenate:o,camelize:a,ucfirst:c,startsWith:d,endsWith:p,includes:b,findIndex:y,isArray:k,isFunction:$,isObject:S,isPlainObject:T,isWindow:E,isDocument:_,isJQuery:C,isNode:A,isElement:N,isNodeCollection:M,isBoolean:D,isString:z,isNumber:B,isNumeric:P,isEmpty:O,isUndefined:H,toBoolean:L,toNumber:j,toFloat:F,toNode:W,toNodes:V,toWindow:R,toList:q,toMs:U,isEqual:Y,swap:X,assign:G,last:J,each:K,sortBy:Z,uniqueBy:Q,clamp:tt,noop:et,intersectRect:nt,pointInRect:it,Dimensions:rt,MouseTracker:En,mergeOptions:Mn,parseOptions:Dn,play:zn,pause:Bn,mute:Pn,Promise:ce,Deferred:he,IntersectionObserver:Zn,query:yt,queryAll:kt,find:St,findAll:It,matches:Dt,closest:Bt,parent:Pt,escape:Ht,css:Ue,getStyles:Ye,getStyle:Xe,getCssVar:Je,propName:Ze,isInView:Rn,scrollTop:qn,scrollIntoView:Un,scrolledOver:Yn,scrollParents:Xn,getViewport:Gn}),ti.data="__uikit__",ti.prefix="uk-",ti.options={},ti.version="3.5.8",function(t){var e,n=t.data;function i(t,e){if(t)for(var n in t)t[n]._connected&&t[n]._callUpdate(e)}t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,n){(n=(z(n)?t.component(n):n)||this).options=Mn(n.options,e)},t.extend=function(t){t=t||{};var e=function(t){this._init(t)};return(e.prototype=Object.create(this.prototype)).constructor=e,e.options=Mn(this.options,t),e.super=this,e.extend=this.extend,e},t.update=function(t,e){Ut(t=t?W(t):document.body).reverse().forEach((function(t){return i(t[n],e)})),Me(t,(function(t){return i(t[n],e)}))},Object.defineProperty(t,"container",{get:function(){return e||document.body},set:function(t){e=De(t)}})}(ti),function(t){t.prototype._callHook=function(t){var e=this,n=this.$options[t];n&&n.forEach((function(t){return t.call(e)}))},t.prototype._callConnected=function(){this._connected||(this._data={},this._computeds={},this._frames={reads:{},writes:{}},this._initProps(),this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._callUpdate())},t.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},t.prototype._callUpdate=function(t){var e=this;void 0===t&&(t="update");var n=t.type||t;b(["update","resize"],n)&&this._callWatches();var i=this.$options.update,r=this._frames,o=r.reads,s=r.writes;i&&i.forEach((function(t,i){var r=t.read,a=t.write,u=t.events;("update"===n||b(u,n))&&(r&&!b(kn.reads,o[i])&&(o[i]=kn.read((function(){var t=e._connected&&r.call(e,e._data,n);!1===t&&a?kn.clear(s[i]):T(t)&&G(e._data,t)}))),a&&!b(kn.writes,s[i])&&(s[i]=kn.write((function(){return e._connected&&a.call(e,e._data,n)}))))}))},t.prototype._callWatches=function(){var t=this,e=this._frames;if(!e._watch){var i=!n(e,"_watch");e._watch=kn.read((function(){if(t._connected){var r=t,o=r.$options.computed,s=r._computeds;for(var a in o){var u=n(s,a),c=s[a];delete s[a];var h=o[a],l=h.watch,d=h.immediate;l&&(i&&d||u&&!Y(c,t[a]))&&l.call(t,t[a],c)}e._watch=null}}))}}}(ti),function(t){var e=0;function i(t,e){var n={},i=t.args;void 0===i&&(i=[]);var r=t.props;void 0===r&&(r={});var s=t.el;if(!r)return n;for(var u in r){var h=o(u),l=ut(s,h);H(l)||(l=r[u]===Boolean&&""===l||c(r[u],l),("target"!==h||l&&!d(l,"_"))&&(n[u]=l))}var f=Dn(ut(s,e),i);for(var p in f){var g=a(p);void 0!==r[g]&&(n[g]=c(r[g],f[p]))}return n}function r(t,e,i){Object.defineProperty(t,e,{enumerable:!0,get:function(){var r=t._computeds,o=t.$props,s=t.$el;return n(r,e)||(r[e]=(i.get||i).call(t,o,s)),r[e]},set:function(n){var r=t._computeds;r[e]=i.set?i.set.call(t,n):n,H(r[e])&&delete r[e]}})}function s(t,e,n){T(e)||(e={name:n,handler:e});var i=e.name,r=e.el,o=e.handler,a=e.capture,u=e.passive,c=e.delegate,h=e.filter,l=e.self;r=$(r)?r.call(t):r||t.$el,k(r)?r.forEach((function(i){return s(t,G({},e,{el:i}),n)})):!r||h&&!h.call(t)||t._events.push(Xt(r,i,c?z(c)?c:c.call(t):null,z(o)?t[o]:o.bind(t),{passive:u,capture:a,self:l}))}function u(t,e){return t.every((function(t){return!t||!n(t,e)}))}function c(t,e){return t===Boolean?L(e):t===Number?j(e):"list"===t?q(e):t?t(e):e}t.prototype._init=function(t){(t=t||{}).data=function(t,e){var n=t.data,i=(t.el,e.args),r=e.props;if(void 0===r&&(r={}),n=k(n)?O(i)?void 0:n.slice(0,i.length).reduce((function(t,e,n){return T(e)?G(t,e):t[i[n]]=e,t}),{}):n)for(var o in n)H(n[o])?delete n[o]:n[o]=r[o]?c(r[o],n[o]):n[o];return n}(t,this.constructor.options),this.$options=Mn(this.constructor.options,t,this),this.$el=null,this.$props={},this._uid=e++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},t.prototype._initData=function(){var t=this.$options.data;for(var e in void 0===t&&(t={}),t)this.$props[e]=this[e]=t[e]},t.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=t[e].bind(this)},t.prototype._initComputeds=function(){var t=this.$options.computed;if(this._computeds={},t)for(var e in t)r(this,e,t[e])},t.prototype._initProps=function(t){var e;for(e in t=t||i(this.$options,this.$name))H(t[e])||(this.$props[e]=t[e]);var n=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&u(n,e)&&(this[e]=this.$props[e])},t.prototype._initEvents=function(){var t=this;this._events=[];var e=this.$options.events;e&&e.forEach((function(e){if(n(e,"handler"))s(t,e);else for(var i in e)s(t,e[i],i)}))},t.prototype._unbindEvents=function(){this._events.forEach((function(t){return t()})),delete this._events},t.prototype._initObserver=function(){var t=this,e=this.$options,n=e.attrs,r=e.props,s=e.el;if(!this._observer&&r&&!1!==n){n=k(n)?n:Object.keys(r),this._observer=new MutationObserver((function(e){var r=i(t.$options,t.$name);e.some((function(e){var i=e.attributeName,o=i.replace("data-","");return(o===t.$name?n:[a(o),a(i)]).some((function(e){return!H(r[e])&&r[e]!==t.$props[e]}))}))&&t.$reset()}));var u=n.map((function(t){return o(t)})).concat(this.$name);this._observer.observe(s,{attributes:!0,attributeFilter:u.concat(u.map((function(t){return"data-"+t})))})}}}(ti),function(t){var e=t.data,n={};t.component=function(e,i){var r=o(e);if(e=a(r),!i)return T(n[e])&&(n[e]=t.extend(n[e])),n[e];t[e]=function(n,i){for(var r=arguments.length,o=Array(r);r--;)o[r]=arguments[r];var s=t.component(e);return s.options.functional?new s({data:T(n)?n:[].concat(o)}):n?ze(n).map(a)[0]:a(n);function a(n){var r=t.getComponent(n,e);if(r){if(!i)return r;r.$destroy()}return new s({el:n,data:i})}};var s=T(i)?G({},i):i.options;return s.name=e,s.install&&s.install(t,s,e),t._initialized&&!s.functional&&kn.read((function(){return t[e]("[uk-"+r+"],[data-uk-"+r+"]")})),n[e]=T(i)?s:i},t.getComponents=function(t){return t&&t[e]||{}},t.getComponent=function(e,n){return t.getComponents(e)[n]},t.connect=function(i){if(i[e])for(var r in i[e])i[e][r]._callConnected();for(var o=0;o<i.attributes.length;o++){var s=Qn(i.attributes[o].name);s&&s in n&&t[s](i)}},t.disconnect=function(t){for(var n in t[e])t[e][n]._callDisconnected()}}(ti),function(t){var e=t.data;t.prototype.$create=function(e,n,i){return t[e](n,i)},t.prototype.$mount=function(t){var n=this.$options.name;t[e]||(t[e]={}),t[e][n]||(t[e][n]=this,this.$el=this.$options.el=this.$options.el||t,qt(t,document)&&this._callConnected())},t.prototype.$reset=function(){this._callDisconnected(),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var n=this.$options,i=n.el,r=n.name;i&&this._callDisconnected(),this._callHook("destroy"),i&&i[e]&&(delete i[e][r],O(i[e])||delete i[e],t&&Ie(this.$el))},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$update=function(e,n){void 0===e&&(e=this.$el),t.update(e,n)},t.prototype.$getComponent=t.getComponent;var n={};Object.defineProperties(t.prototype,{$container:Object.getOwnPropertyDescriptor(t,"container"),$name:{get:function(){var e=this.$options.name;return n[e]||(n[e]=t.prefix+o(e)),n[e]}}})}(ti);var ei={connected:function(){!je(this.$el,this.$name)&&Pe(this.$el,this.$name)}},ni={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String},data:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,n){var i=this;return ce.all(V(t).map((function(t){return new ce((function(r){return i._toggleElement(t,e,n).then(r,et)}))})))},isToggled:function(t){var e=V(t||this.$el);return this.cls?je(e,this.cls.split(" ")[0]):!st(e,"hidden")},updateAria:function(t){!1===this.cls&&ot(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,n){var i=this;if(e=D(e)?e:on.inProgress(t)?je(t,"uk-animation-leave"):en.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Kt(t,"before"+(e?"show":"hide"),[this]))return ce.reject();var r,o=($(n)?n:!1!==n&&this.hasAnimation?this.hasTransition?ii(this):(r=this,function(t,e){on.cancel(t);var n=r.animation,i=r.duration,o=r._toggle;return e?(o(t,!0),on.in(t,n[0],i,r.origin)):on.out(t,n[1]||n[0],i,r.origin).then((function(){return o(t,!1)}))}):this._toggle)(t,e);return Kt(t,e?"show":"hide",[this]),(o||ce.resolve()).then((function(){Kt(t,e?"shown":"hidden",[i]),i.$update(t)}))},_toggle:function(t,e){var n;t&&(e=Boolean(e),this.cls?(n=b(this.cls," ")||e!==je(t,this.cls))&&Fe(t,this.cls,b(this.cls," ")?void 0:e):(n=e===t.hidden)&&(t.hidden=!e),ze("[autofocus]",t).some((function(t){return Ft(t)?t.focus()||!0:t.blur()})),this.updateAria(t),n&&(Kt(t,"toggled",[this]),this.$update(t)))}}};function ii(t){var e=t.isToggled,n=t.duration,i=t.initProps,r=t.hideProps,o=t.transition,s=t._toggle;return function(t,a){var u=en.inProgress(t),c=t.hasChildNodes?F(Ue(t.firstElementChild,"marginTop"))+F(Ue(t.lastElementChild,"marginBottom")):0,h=Ft(t)?dn(t)+(u?0:c):0;en.cancel(t),e(t)||s(t,!0),dn(t,""),kn.flush();var l=dn(t)+(u?0:c);return dn(t,h),(a?en.start(t,G({},i,{overflow:"hidden",height:l}),Math.round(n*(1-h/l)),o):en.start(t,r,Math.round(n*(h/l)),o).then((function(){return s(t,!1)}))).then((function(){return Ue(t,i)}))}}var ri={mixins:[ei,ni],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String,offset:Number},data:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease",offset:0},computed:{items:{get:function(t,e){return ze(t.targets,e)},watch:function(t,e){var n=this;if(t.forEach((function(t){return oi(De(n.content,t),!je(t,n.clsOpen))})),!e&&!je(t,this.clsOpen)){var i=!1!==this.active&&t[Number(this.active)]||!this.collapsible&&t[0];i&&this.toggle(i,!1)}},immediate:!0}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(ve(ze(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],methods:{toggle:function(t,e){var n=this,i=[this.items[we(t,this.items)]],r=Rt(this.items,"."+this.clsOpen);this.multiple||b(r,i[0])||(i=i.concat(r)),!this.collapsible&&r.length<2&&!Rt(i,":not(."+this.clsOpen+")").length||i.forEach((function(t){return n.toggleElement(t,!je(t,n.clsOpen),(function(t,i){Fe(t,n.clsOpen,i);var r=De((t._wrapper?"> * ":"")+n.content,t);if(!1!==e&&n.hasTransition)return t._wrapper||(t._wrapper=Te(r,"<div"+(i?" hidden":"")+">")),oi(r,!1),ii(n)(t._wrapper,i).then((function(){if(oi(r,!i),delete t._wrapper,_e(r),i){var e=De(n.$props.toggle,t);Rn(e)||Un(e,{offset:n.offset})}}));oi(r,!i)}))}))}}};function oi(t,e){t&&(t.hidden=e)}var si,ai={mixins:[ei,ni],args:"animation",props:{close:String},data:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:G({opacity:0},ni.data.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then((function(){return t.$destroy(!0)}))}}},ui={args:"autoplay",props:{automute:Boolean,autoplay:Boolean},data:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!st(this.$el,"preload")&&(this.$el.preload="none"),this.automute&&Pn(this.$el)},update:{read:function(){return{visible:Ft(this.$el)&&"hidden"!==Ue(this.$el,"visibility"),inView:this.inView&&Rn(this.$el)}},write:function(t){var e=t.visible,n=t.inView;!e||this.inView&&!n?Bn(this.$el):(!0===this.autoplay||this.inView&&n)&&zn(this.$el)},events:["resize","scroll"]}},ci={mixins:[ei,ui],props:{width:Number,height:Number},data:{automute:!0},update:{read:function(){var t=this.$el,e=function(t){for(;t=Pt(t);)if("static"!==Ue(t,"position"))return t}(t)||t.parentNode,n=e.offsetHeight,i=e.offsetWidth,r=rt.cover({width:this.width||t.naturalWidth||t.videoWidth||t.clientWidth,height:this.height||t.naturalHeight||t.videoHeight||t.clientHeight},{width:i+(i%2?1:0),height:n+(n%2?1:0)});return!(!r.width||!r.height)&&r},write:function(t){var e=t.height,n=t.width;Ue(this.$el,{height:e,width:n})},events:["resize"]}},hi={props:{pos:String,offset:null,flip:Boolean,clsPos:String},data:{pos:"bottom-"+(lt?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(b(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,n){var i;He(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?");var r=this.offset,o=this.getAxis();P(r)||(r=(i=De(r))?un(i)["x"===o?"left":"top"]-un(e)["x"===o?"right":"bottom"]:0);var s=an(t,e,"x"===o?bn(this.dir)+" "+this.align:this.align+" "+bn(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,n).target,a=s.x,u=s.y;this.dir="x"===o?a:u,this.align="x"===o?u:a,Fe(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},li={mixins:[hi,ni],args:"pos",props:{mode:"list",toggle:Boolean,boundary:Boolean,boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},data:{mode:["click","hover"],toggle:"- *",boundary:ct&&window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,animation:["uk-animation-fade"],cls:"uk-open"},computed:{boundary:function(t,e){return yt(t.boundary,e)},clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},created:function(){this.tracker=new En},connected:function(){Pe(this.$el,this.clsDrop);var t=this.$props.toggle;this.toggle=t&&this.$create("toggle",yt(t,this.$el),{target:this.$el,mode:this.mode}),!this.toggle&&Kt(this.$el,"updatearia")},disconnected:function(){this.isActive()&&(si=null)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.defaultPrevented,n=t.current.hash;e||!n||qt(n,this.$el)||this.hide(!1)}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:"toggleshow",self:!0,handler:function(t,e){t.preventDefault(),this.show(e)}},{name:"togglehide",self:!0,handler:function(t){t.preventDefault(),this.hide()}},{name:wt,filter:function(){return b(this.mode,"hover")},handler:function(t){ae(t)||this.clearTimers()}},{name:bt,filter:function(){return b(this.mode,"hover")},handler:function(t){!ae(t)&&t.relatedTarget&&this.hide()}},{name:"toggled",self:!0,handler:function(){this.isToggled()&&(this.clearTimers(),this.position())}},{name:"show",self:!0,handler:function(){var t=this;si=this,this.tracker.init(),Kt(this.$el,"updatearia"),Jt(this.$el,"hide",Xt(document,gt,(function(e){var n=e.target;return!qt(n,t.$el)&&Jt(document,vt+" "+xt+" scroll",(function(e){var i=e.defaultPrevented,r=e.type,o=e.target;i||r!==vt||n!==o||t.toggle&&qt(n,t.toggle.$el)||t.hide(!1)}),!0)})),{self:!0}),Jt(this.$el,"hide",Xt(document,"keydown",(function(e){27===e.keyCode&&(e.preventDefault(),t.hide(!1))})),{self:!0})}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var e=t.target;this.$el===e?(si=this.isActive()?null:si,Kt(this.$el,"updatearia"),this.tracker.cancel()):si=null===si&&qt(e,this.$el)&&this.isToggled()?this:si}},{name:"updatearia",self:!0,handler:function(t,e){t.preventDefault(),this.updateAria(this.$el),(e||this.toggle)&&(ot((e||this.toggle).$el,"aria-expanded",this.isToggled()),Fe(this.toggle.$el,this.cls,this.isToggled()))}}],update:{write:function(){this.isToggled()&&!on.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,e){var n=this;if(void 0===t&&(t=this.toggle),void 0===e&&(e=!0),this.isToggled()&&t&&this.toggle&&t.$el!==this.toggle.$el&&this.hide(!1),this.toggle=t,this.clearTimers(),!this.isActive()){if(si){if(e&&si.isDelaying)return void(this.showTimer=setTimeout(this.show,10));for(var i;si&&i!==si&&!qt(this.$el,si.$el);)i=si,si.hide(!1)}this.showTimer=setTimeout((function(){return!n.isToggled()&&n.toggleElement(n.$el,!0)}),e&&this.delayShow||0)}},hide:function(t){var e=this;void 0===t&&(t=!0);var n,i,r=function(){return e.toggleElement(e.$el,!1,!1)};this.clearTimers(),this.isDelaying=(n=this.$el,i=[],Me(n,(function(t){return"static"!==Ue(t,"position")&&i.push(t)})),i).some((function(t){return e.tracker.movesTo(t)})),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,50):t&&this.delayHide?this.hideTimer=setTimeout(r,this.delayHide):r()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return si===this},position:function(){Oe(this.$el,this.clsDrop+"-stack"),Fe(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=un(this.boundary),e=this.boundaryAlign?t:un(this.toggle.$el);if("justify"===this.align){var n="y"===this.getAxis()?"width":"height";Ue(this.$el,n,e[n])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&Pe(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary)}}},di={mixins:[ei],args:"target",props:{target:Boolean},data:{target:!1},computed:{input:function(t,e){return De(Wt,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var n=t.target;return n&&(!0===n&&this.input.parentNode===e&&this.input.nextElementSibling||yt(n,e))}},update:function(){var t=this.target,e=this.input;if(t){var n,i=Vt(t)?"value":"textContent",r=t[i],o=e.files&&e.files[0]?e.files[0].name:Dt(e,"select")&&(n=ze("option",e).filter((function(t){return t.selected}))[0])?n.textContent:e.value;r!==o&&(t[i]=o)}},events:[{name:"change",handler:function(){this.$update()}},{name:"reset",el:function(){return Bt(this.$el,"form")},handler:function(){this.$update()}}]},fi={update:{read:function(t){var e=Rn(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=""+this.$el.src},events:["scroll","resize"]}},pi={props:{margin:String,firstColumn:Boolean},data:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(){var t=gi(this.$el.children);return{rows:t,columns:mi(t)}},write:function(t){var e=this,n=t.columns;t.rows.forEach((function(t,i){return t.forEach((function(t){Fe(t,e.margin,0!==i),Fe(t,e.firstColumn,b(n[0],t))}))}))},events:["resize"]}};function gi(t){return vi(t,"top","bottom")}function mi(t){var e=[[]];return t.forEach((function(t){return vi(t,"left","right").forEach((function(t,n){return e[n]=e[n]?e[n].concat(t):t}))})),lt?e.reverse():e}function vi(t,e,n){for(var i=[[]],r=0;r<t.length;r++){var o=t[r];if(Ft(o))for(var s=wi(o),a=i.length-1;a>=0;a--){var u=i[a];if(!u[0]){u.push(o);break}var c=void 0;if(u[0].offsetParent===o.offsetParent?c=wi(u[0]):(s=wi(o,!0),c=wi(u[0],!0)),s[e]>=c[n]-1&&s[e]!==c[e]){i.push([o]);break}if(s[n]-1>c[e]||s[e]===c[e]){u.push(o);break}if(0===a){i.unshift([o]);break}}}return i}function wi(t,e){var n;void 0===e&&(e=!1);var i=t.offsetTop,r=t.offsetLeft,o=t.offsetHeight,s=t.offsetWidth;return e&&(i=(n=ln(t))[0],r=n[1]),{top:i,left:r,bottom:i+o,right:r+s}}var bi={extends:pi,mixins:[ei],name:"grid",props:{masonry:Boolean,parallax:Number},data:{margin:"uk-grid-margin",clsStack:"uk-grid-stack",masonry:!1,parallax:0},connected:function(){this.masonry&&Pe(this.$el,"uk-flex-top uk-flex-wrap-top")},update:[{write:function(t){var e=t.columns;Fe(this.$el,this.clsStack,e.length<2)},events:["resize"]},{read:function(t){var e=t.columns,n=t.rows,i=Yt(this.$el);if(!i.length||!this.masonry&&!this.parallax)return!1;var r=i.some(en.inProgress),o=!1,s=function(t){return t.map((function(t){return t.reduce((function(t,e){return t+e.offsetHeight}),0)}))}(e),a=function(t,e){var n=t.filter((function(t){return je(t,e)}))[0];return F(n?Ue(n,"marginTop"):Ue(t[0],"paddingLeft"))}(i,this.margin)*(n.length-1),u=Math.max.apply(Math,s)+a;this.masonry&&(o=function(t,e){var n=t.map((function(t){return Math.max.apply(Math,t.map((function(t){return t.offsetHeight})))}));return e.map((function(t){var e=0;return t.map((function(i,r){return e+=r?n[r-1]-t[r-1].offsetHeight:0}))}))}(n,e=e.map((function(t){return Z(t,"offsetTop")}))));var c=Math.abs(this.parallax);return c&&(c=s.reduce((function(t,e,n){return Math.max(t,e+a+(n%2?c:c/8)-u)}),0)),{padding:c,columns:e,translates:o,height:!r&&(this.masonry?u:"")}},write:function(t){var e=t.height,n=t.padding;Ue(this.$el,"paddingBottom",n||""),!1!==e&&Ue(this.$el,"height",e)},events:["resize"]},{read:function(t){var e=t.height;return{scrolled:!!this.parallax&&Yn(this.$el,e?e-dn(this.$el):0)*Math.abs(this.parallax)}},write:function(t){var e=t.columns,n=t.scrolled,i=t.translates;(!1!==n||i)&&e.forEach((function(t,e){return t.forEach((function(t,r){return Ue(t,"transform",n||i?"translateY("+((i&&-i[e][r])+(n?e%2?n:n/8:0))+"px)":"")}))}))},events:["scroll","resize"]}]},xi=ht?{props:{selMinHeight:String},data:{selMinHeight:!1,forceHeight:!1},computed:{elements:function(t,e){var n=t.selMinHeight;return n?ze(n,e):[e]}},update:[{read:function(){Ue(this.elements,"height","")},order:-5,events:["resize"]},{write:function(){var t=this;this.elements.forEach((function(e){var n=F(Ue(e,"minHeight"));n&&(t.forceHeight||Math.round(n+gn(e,"height","content-box"))>=e.offsetHeight)&&Ue(e,"height",n)}))},order:5,events:["resize"]}]}:{},yi={mixins:[xi],args:"target",props:{target:String,row:Boolean},data:{target:"> *",row:!0,forceHeight:!0},computed:{elements:function(t,e){return ze(t.target,e)}},update:{read:function(){return{rows:(this.row?gi(this.elements):[this.elements]).map(ki)}},write:function(t){t.rows.forEach((function(t){var e=t.heights;return t.elements.forEach((function(t,n){return Ue(t,"minHeight",e[n])}))}))},events:["resize"]}};function ki(t){var e;if(t.length<2)return{heights:[""],elements:t};var n=$i(t),i=n.heights,r=n.max,o=t.some((function(t){return t.style.minHeight})),s=t.some((function(t,e){return!t.style.minHeight&&i[e]<r}));return o&&s&&(Ue(t,"minHeight",""),e=$i(t),i=e.heights,r=e.max),{heights:i=t.map((function(t,e){return i[e]===r&&F(t.style.minHeight).toFixed(2)!==r.toFixed(2)?"":r})),elements:t}}function $i(t){var e=t.map((function(t){return un(t).height-gn(t,"height","content-box")}));return{heights:e,max:Math.max.apply(null,e)}}var Si={mixins:[xi],props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},data:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{read:function(t){var e=t.minHeight;if(!Ft(this.$el))return!1;var n="",i=gn(this.$el,"height","content-box");if(this.expand){if(this.$el.dataset.heightExpand="",De("[data-height-expand]")!==this.$el)return!1;n=dn(window)-(Ii(document.documentElement)-Ii(this.$el))-i||""}else{if(n="calc(100vh",this.offsetTop){var r=un(this.$el).top;n+=r>0&&r<dn(window)/2?" - "+r+"px":""}!0===this.offsetBottom?n+=" - "+Ii(this.$el.nextElementSibling)+"px":P(this.offsetBottom)?n+=" - "+this.offsetBottom+"vh":this.offsetBottom&&p(this.offsetBottom,"px")?n+=" - "+F(this.offsetBottom)+"px":z(this.offsetBottom)&&(n+=" - "+Ii(yt(this.offsetBottom,this.$el))+"px"),n+=(i?" - "+i+"px":"")+")"}return{minHeight:n,prev:e}},write:function(t){var e=t.minHeight,n=t.prev;Ue(this.$el,{minHeight:e}),e!==n&&this.$update(this.$el,"resize"),this.minHeight&&F(Ue(this.$el,"minHeight"))<this.minHeight&&Ue(this.$el,"minHeight",this.minHeight)},events:["resize"]}};function Ii(t){return t&&un(t).height||0}var Ti={args:"src",props:{id:Boolean,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String,strokeAnimation:Boolean,focusable:Boolean,attributes:"list"},data:{ratio:1,include:["style","class","focusable"],class:"",strokeAnimation:!1},beforeConnect:function(){this.class+=" uk-svg"},connected:function(){var t,e=this;!this.icon&&b(this.src,"#")&&(t=this.src.split("#"),this.src=t[0],this.icon=t[1]),this.svg=this.getSvg().then((function(t){return e.applyAttributes(t),e.svgEl=function(t,e){if(jt(e)||"CANVAS"===e.tagName){e.hidden=!0;var n=e.nextElementSibling;return Ni(t,n)?n:$e(e,t)}var i=e.lastElementChild;return Ni(t,i)?i:ye(e,t)}(t,e.$el)}),et)},disconnected:function(){var t=this;jt(this.$el)&&(this.$el.hidden=!1),this.svg&&this.svg.then((function(e){return(!t._connected||e!==t.svgEl)&&Ie(e)}),et),this.svg=this.svgEl=null},update:{read:function(){return!!(this.strokeAnimation&&this.svgEl&&Ft(this.svgEl))},write:function(){var t,e;t=this.svgEl,(e=Ai(t))&&t.style.setProperty("--uk-animation-stroke",e)},type:["resize"]},methods:{getSvg:function(){var t,e=this;return(t=this.src,Ei[t]?Ei[t]:Ei[t]=new ce((function(e,n){t?d(t,"data:")?e(decodeURIComponent(t.split(",")[1])):pe(t).then((function(t){return e(t.response)}),(function(){return n("SVG not found.")})):n()}))).then((function(t){return function(t,e){return e&&b(t,"<symbol")&&(t=function(t,e){var n;if(!Ci[t])for(Ci[t]={},_i.lastIndex=0;n=_i.exec(t);)Ci[t][n[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+n[1]+"svg>";return Ci[t][e]}(t,e)||t),(t=De(t.substr(t.indexOf("<svg"))))&&t.hasChildNodes()&&t}(t,e.icon)||ce.reject("SVG not found.")}))},applyAttributes:function(t){var e=this;for(var n in this.$options.props)this[n]&&b(this.include,n)&&ot(t,n,this[n]);for(var i in this.attributes){var r=this.attributes[i].split(":",2),o=r[0],s=r[1];ot(t,o,s)}this.id||at(t,"id");var a=["width","height"],u=[this.width,this.height];u.some((function(t){return t}))||(u=a.map((function(e){return ot(t,e)})));var c=ot(t,"viewBox");c&&!u.some((function(t){return t}))&&(u=c.split(" ").slice(2)),u.forEach((function(n,i){(n=(0|n)*e.ratio)&&ot(t,a[i],n),n&&!u[1^i]&&at(t,a[1^i])})),ot(t,"data-svg",this.icon||this.src)}}},Ei={},_i=/<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g,Ci={};function Ai(t){return Math.ceil(Math.max.apply(Math,[0].concat(ze("[stroke]",t).map((function(t){try{return t.getTotalLength()}catch(t){return 0}})))))}function Ni(t,e){return ot(t,"data-svg")===ot(e,"data-svg")}var Mi={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',"slidenav-next-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',"slidenav-previous":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',"slidenav-previous-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>'},Di={install:function(t){t.icon.add=function(e,n){var i,r=z(e)?((i={})[e]=n,i):e;K(r,(function(t,e){Mi[e]=t,delete Li[e]})),t._initialized&&Me(document.body,(function(e){return K(t.getComponents(e),(function(t){t.$options.isIcon&&t.icon in r&&t.$reset()}))}))}},extends:Ti,args:"icon",props:["icon"],data:{include:["focusable"]},isIcon:!0,beforeConnect:function(){Pe(this.$el,"uk-icon")},methods:{getSvg:function(){var t=function(t){return Mi[t]?(Li[t]||(Li[t]=De((Mi[function(t){return lt?X(X(t,"left","right"),"previous","next"):t}(t)]||Mi[t]).trim())),Li[t].cloneNode(!0)):null}(this.icon);return t?ce.resolve(t):ce.reject("Icon not found.")}}},zi={args:!1,extends:Di,data:function(t){return{icon:o(t.constructor.options.name)}},beforeConnect:function(){Pe(this.$el,this.$name)}},Bi={extends:zi,beforeConnect:function(){Pe(this.$el,"uk-slidenav")},computed:{icon:function(t,e){var n=t.icon;return je(e,"uk-slidenav-large")?n+"-large":n}}},Pi={extends:zi,computed:{icon:function(t,e){var n=t.icon;return je(e,"uk-search-icon")&&Ut(e,".uk-search-large").length?"search-large":Ut(e,".uk-search-navbar").length?"search-navbar":n}}},Oi={extends:zi,computed:{icon:function(){return"close-"+(je(this.$el,"uk-close-large")?"large":"icon")}}},Hi={extends:zi,connected:function(){var t=this;this.svg.then((function(e){return 1!==t.ratio&&Ue(De("circle",e),"strokeWidth",1/t.ratio)}),et)}},Li={},ji={args:"dataSrc",props:{dataSrc:String,dataSrcset:Boolean,sizes:String,width:Number,height:Number,offsetTop:String,offsetLeft:String,target:String},data:{dataSrc:"",dataSrcset:!1,sizes:!1,width:!1,height:!1,offsetTop:"50vh",offsetLeft:0,target:!1},computed:{cacheKey:function(t){var e=t.dataSrc;return this.$name+"."+e},width:function(t){var e=t.width,n=t.dataWidth;return e||n},height:function(t){var e=t.height,n=t.dataHeight;return e||n},sizes:function(t){var e=t.sizes,n=t.dataSizes;return e||n},isImg:function(t,e){return Xi(e)},target:{get:function(t){var e=t.target;return[this.$el].concat(kt(e,this.$el))},watch:function(){this.observe()}},offsetTop:function(t){return xn(t.offsetTop,"height")},offsetLeft:function(t){return xn(t.offsetLeft,"width")}},connected:function(){Ri[this.cacheKey]?Fi(this.$el,Ri[this.cacheKey],this.dataSrcset,this.sizes):this.isImg&&this.width&&this.height&&Fi(this.$el,function(t,e,n){var i;return n&&(i=rt.ratio({width:t,height:e},"width",xn(Vi(n))),t=i.width,e=i.height),'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+e+'"></svg>'}(this.width,this.height,this.sizes)),this.observer=new Zn(this.load,{rootMargin:this.offsetTop+"px "+this.offsetLeft+"px"}),requestAnimationFrame(this.observe)},disconnected:function(){this.observer.disconnect()},update:{read:function(t){var e=this,n=t.image;if(n||"complete"!==document.readyState||this.load(this.observer.takeRecords()),this.isImg)return!1;n&&n.then((function(t){return t&&""!==t.currentSrc&&Fi(e.$el,Gi(t))}))},write:function(t){if(this.dataSrcset&&1!==window.devicePixelRatio){var e=Ue(this.$el,"backgroundSize");(e.match(/^(auto\s?)+$/)||F(e)===t.bgSize)&&(t.bgSize=(n=this.dataSrcset,i=this.sizes,r=xn(Vi(i)),(o=(n.match(Yi)||[]).map(F).sort((function(t,e){return t-e}))).filter((function(t){return t>=r}))[0]||o.pop()||""),Ue(this.$el,"backgroundSize",t.bgSize+"px"))}var n,i,r,o},events:["resize"]},methods:{load:function(t){var e=this;t.some((function(t){return H(t.isIntersecting)||t.isIntersecting}))&&(this._data.image=ge(this.dataSrc,this.dataSrcset,this.sizes).then((function(t){return Fi(e.$el,Gi(t),t.srcset,t.sizes),Ri[e.cacheKey]=Gi(t),t}),(function(t){return Kt(e.$el,new t.constructor(t.type,t))})),this.observer.disconnect())},observe:function(){var t=this;this._connected&&!this._data.image&&this.target.forEach((function(e){return t.observer.observe(e)}))}}};function Fi(t,e,n,i){Xi(t)?(i&&(t.sizes=i),n&&(t.srcset=n),e&&(t.src=e)):e&&!b(t.style.backgroundImage,e)&&(Ue(t,"backgroundImage","url("+Ht(e)+")"),Kt(t,Zt("load",!1)))}var Wi=/\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;function Vi(t){var e,n;for(Wi.lastIndex=0;e=Wi.exec(t);)if(!e[1]||window.matchMedia(e[1]).matches){e=d(n=e[2],"calc")?n.substring(5,n.length-1).replace(qi,(function(t){return xn(t)})).replace(/ /g,"").match(Ui).reduce((function(t,e){return t+ +e}),0):n;break}return e||"100vw"}var Ri,qi=/\d+(?:\w+|%)/g,Ui=/[+-]?(\d+)/g,Yi=/\s+\d+w\s*(?:,|$)/g;function Xi(t){return"IMG"===t.tagName}function Gi(t){return t.currentSrc||t.src}try{(Ri=window.sessionStorage||{}).__test__=1,delete Ri.__test__}catch(t){Ri={}}var Ji={props:{media:Boolean},data:{media:!1},computed:{matchMedia:function(){var t=function(t){if(z(t))if("@"===t[0]){var e="breakpoint-"+t.substr(1);t=F(Je(e))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(this.media);return!t||window.matchMedia(t).matches}}},Ki={mixins:[ei,Ji],props:{fill:String},data:{fill:"",clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||Je("leader-fill-content")}},connected:function(){var t;t=Ee(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){_e(this.wrapper.childNodes)},update:{read:function(t){var e=t.changed,n=t.width,i=n;return{width:n=Math.floor(this.$el.offsetWidth/2),fill:this.fill,changed:e||i!==n,hide:!this.matchMedia}},write:function(t){Fe(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,ot(this.wrapper,this.attrFill,new Array(t.width).join(t.fill)))},events:["resize"]}},Zi={props:{container:Boolean},data:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&this.$container||e&&De(e)}}},Qi=[],tr={mixins:[ei,Zi,ni],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},data:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return De(t.selPanel,e)},transitionElement:function(){return this.panel},bgClose:function(t){return t.bgClose&&this.panel}},beforeDisconnect:function(){this.isToggled()&&this.toggleElement(this.$el,!1,!1)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.isToggled()===b(Qi,this)&&this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){if(b(Qi,this))return!1;!this.stack&&Qi.length?(ce.all(Qi.map((function(t){return t.hide()}))).then(this.show),t.preventDefault()):Qi.push(this)}},{name:"show",self:!0,handler:function(){var t=this;fn(window)-fn(document)&&this.overlay&&Ue(document.body,"overflowY","scroll"),this.stack&&Ue(this.$el,"zIndex",F(Ue(this.$el,"zIndex"))+Qi.length),Pe(document.documentElement,this.clsPage),this.bgClose&&Jt(this.$el,"hide",Xt(document,gt,(function(e){var n=e.target;J(Qi)!==t||t.overlay&&!qt(n,t.$el)||qt(n,t.panel)||Jt(document,vt+" "+xt+" scroll",(function(e){var i=e.defaultPrevented,r=e.type,o=e.target;i||r!==vt||n!==o||t.hide()}),!0)})),{self:!0}),this.escClose&&Jt(this.$el,"hide",Xt(document,"keydown",(function(e){27===e.keyCode&&J(Qi)===t&&(e.preventDefault(),t.hide())})),{self:!0})}},{name:"hidden",self:!0,handler:function(){var t=this;Qi.splice(Qi.indexOf(this),1),Qi.length||Ue(document.body,"overflowY",""),Ue(this.$el,"zIndex",""),Qi.some((function(e){return e.clsPage===t.clsPage}))||Oe(document.documentElement,this.clsPage)}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){var t=this;return this.container&&this.$el.parentNode!==this.container?(ye(this.container,this.$el),new ce((function(e){return requestAnimationFrame((function(){return t.show().then(e)}))}))):this.toggleElement(this.$el,!0,er(this))},hide:function(){return this.toggleElement(this.$el,!1,er(this))}}};function er(t){var e=t.transitionElement,n=t._toggle;return function(t,i){return new ce((function(r,o){return Jt(t,"show hide",(function(){t._reject&&t._reject(),t._reject=o,n(t,i);var s=Jt(e,"transitionstart",(function(){Jt(e,"transitionend transitioncancel",r,{self:!0}),clearTimeout(a)}),{self:!0}),a=setTimeout((function(){s(),r()}),U(Ue(e,"transitionDuration")))}))}))}}var nr={install:function(t){var e=t.modal;function n(t,n,i,r){n=G({bgClose:!1,escClose:!0,labels:e.labels},n);var o=e.dialog(t(n),n),s=new he,a=!1;return Xt(o.$el,"submit","form",(function(t){t.preventDefault(),s.resolve(r&&r(o)),a=!0,o.hide()})),Xt(o.$el,"hide",(function(){return!a&&i(s)})),s.promise.dialog=o,s.promise}e.dialog=function(t,n){var i=e('<div class="uk-modal"> <div class="uk-modal-dialog">'+t+"</div> </div>",n);return i.show(),Xt(i.$el,"hidden",(function(){return ce.resolve().then((function(){return i.$destroy(!0)}))}),{self:!0}),i},e.alert=function(t,e){return n((function(e){var n=e.labels;return'<div class="uk-modal-body">'+(z(t)?t:xe(t))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+n.ok+"</button> </div>"}),e,(function(t){return t.resolve()}))},e.confirm=function(t,e){return n((function(e){var n=e.labels;return'<form> <div class="uk-modal-body">'+(z(t)?t:xe(t))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+n.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+n.ok+"</button> </div> </form>"}),e,(function(t){return t.reject()}))},e.prompt=function(t,e,i){return n((function(n){var i=n.labels;return'<form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(z(t)?t:xe(t))+'</label> <input class="uk-input" value="'+(e||"")+'" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.cancel+'</button> <button class="uk-button uk-button-primary">'+i.ok+"</button> </div> </form>"}),i,(function(t){return t.resolve(null)}),(function(t){return De("input",t.$el).value}))},e.labels={ok:"Ok",cancel:"Cancel"}},mixins:[tr],data:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){je(this.panel,"uk-margin-auto-vertical")?Pe(this.$el,"uk-flex"):Ue(this.$el,"display","block"),dn(this.$el)}},{name:"hidden",self:!0,handler:function(){Ue(this.$el,"display",""),Oe(this.$el,"uk-flex")}}]},ir={extends:ri,data:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}},rr={mixins:[ei,xi],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:Boolean,duration:Number},data:{dropdown:".uk-navbar-nav > li",align:lt?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200,forceHeight:!0,selMinHeight:".uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle"},computed:{boundary:function(t,e){var n=t.boundary,i=t.boundaryAlign;return!0===n||i?e:n},dropbarAnchor:function(t,e){return yt(t.dropbarAnchor,e)},pos:function(t){return"bottom-"+t.align},dropbar:{get:function(t){var e=t.dropbar;return e?(e=this._dropbar||yt(e,this.$el)||De("+ .uk-navbar-dropbar",this.$el))||(this._dropbar=De("<div></div>")):null},watch:function(t){Pe(t,"uk-navbar-dropbar")},immediate:!0},dropdowns:{get:function(t,e){return ze(t.dropdown+" ."+t.clsDrop,e)},watch:function(t){var e=this;this.$create("drop",t.filter((function(t){return!e.getDropdown(t)})),G({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},immediate:!0}},disconnected:function(){this.dropbar&&Ie(this.dropbar),delete this._dropbar},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,n=this.getActive();n&&n.toggle&&!qt(n.toggle.$el,e)&&!n.tracker.movesTo(n.$el)&&n.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!this.dropdowns.some((function(t){return Dt(t,":hover")}))&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||$e(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=e.dir;je(n,this.clsDrop)&&("slide"===this.dropbarMode&&Pe(this.dropbar,"uk-navbar-dropbar-slide"),this.clsDrop&&Pe(n,this.clsDrop+"-dropbar"),"bottom"===i&&this.transitionTo(n.offsetHeight+F(Ue(n,"marginTop"))+F(Ue(n,"marginBottom")),n))}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();Dt(this.dropbar,":hover")&&i&&i.$el===n&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el;if(je(n,this.clsDrop)){var i=this.getActive();(!i||i&&i.$el===n)&&this.transitionTo(0)}}}],methods:{getActive:function(){var t=this.dropdowns.map(this.getDropdown).filter((function(t){return t&&t.isActive()}))[0];return t&&b(t.mode,"hover")&&qt(t.toggle.$el,this.$el)&&t},transitionTo:function(t,e){var n=this,i=this.dropbar,r=Ft(i)?dn(i):0;return Ue(e=r<t&&e,"clip","rect(0,"+e.offsetWidth+"px,"+r+"px,0)"),dn(i,r),en.cancel([e,i]),ce.all([en.start(i,{height:t},this.duration),en.start(e,{clip:"rect(0,"+e.offsetWidth+"px,"+t+"px,0)"},this.duration)]).catch(et).then((function(){Ue(e,{clip:""}),n.$update(i)}))},getDropdown:function(t){return this.$getComponent(t,"drop")||this.$getComponent(t,"dropdown")}}},or={mixins:[tr],args:"mode",props:{mode:String,flip:Boolean,overlay:Boolean},data:{mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContainerAnimation:"uk-offcanvas-container-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close",container:!1},computed:{clsFlip:function(t){var e=t.flip,n=t.clsFlip;return e?n:""},clsOverlay:function(t){var e=t.overlay,n=t.clsOverlay;return e?n:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,n=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":n},clsContainerAnimation:function(t){var e=t.mode,n=t.clsContainerAnimation;return"push"!==e&&"reveal"!==e?"":n},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current.hash;!t.defaultPrevented&&e&&De(e,document.body)&&this.hide()}},{name:"touchstart",passive:!0,el:function(){return this.panel},handler:function(t){var e=t.targetTouches;1===e.length&&(this.clientY=e[0].clientY)}},{name:"touchmove",self:!0,passive:!1,filter:function(){return this.overlay},handler:function(t){t.cancelable&&t.preventDefault()}},{name:"touchmove",passive:!1,el:function(){return this.panel},handler:function(t){if(1===t.targetTouches.length){var e=event.targetTouches[0].clientY-this.clientY,n=this.panel,i=n.scrollTop,r=n.scrollHeight,o=n.clientHeight;(o>=r||0===i&&e>0||r-i<=o&&e<0)&&t.cancelable&&t.preventDefault()}}},{name:"show",self:!0,handler:function(){"reveal"!==this.mode||je(this.panel.parentNode,this.clsMode)||(Te(this.panel,"<div>"),Pe(this.panel.parentNode,this.clsMode)),Ue(document.documentElement,"overflowY",this.overlay?"hidden":""),Pe(document.body,this.clsContainer,this.clsFlip),Ue(document.body,"touch-action","pan-y pinch-zoom"),Ue(this.$el,"display","block"),Pe(this.$el,this.clsOverlay),Pe(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),dn(document.body),Pe(document.body,this.clsContainerAnimation),this.clsContainerAnimation&&(sr().content+=",user-scalable=0")}},{name:"hide",self:!0,handler:function(){Oe(document.body,this.clsContainerAnimation),Ue(document.body,"touch-action","")}},{name:"hidden",self:!0,handler:function(){var t;this.clsContainerAnimation&&((t=sr()).content=t.content.replace(/,user-scalable=0$/,"")),"reveal"===this.mode&&_e(this.panel),Oe(this.panel,this.clsSidebarAnimation,this.clsMode),Oe(this.$el,this.clsOverlay),Ue(this.$el,"display",""),Oe(document.body,this.clsContainer,this.clsFlip),Ue(document.documentElement,"overflowY","")}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&p(t.type,"Left")^this.flip&&this.hide()}}]};function sr(){return De('meta[name="viewport"]',document.head)||ye(document.head,'<meta name="viewport">')}var ar={mixins:[ei],props:{selContainer:String,selContent:String},data:{selContainer:".uk-modal",selContent:".uk-modal-dialog"},computed:{container:function(t,e){return Bt(e,t.selContainer)},content:function(t,e){return Bt(e,t.selContent)}},connected:function(){Ue(this.$el,"minHeight",150)},update:{read:function(){return!(!this.content||!this.container)&&{current:F(Ue(this.$el,"maxHeight")),max:Math.max(150,dn(this.container)-(un(this.content).height-dn(this.$el)))}},write:function(t){var e=t.current,n=t.max;Ue(this.$el,"maxHeight",n),Math.round(e)!==Math.round(n)&&Kt(this.$el,"resize")},events:["resize"]}},ur={props:["width","height"],connected:function(){Pe(this.$el,"uk-responsive-width")},update:{read:function(){return!!(Ft(this.$el)&&this.width&&this.height)&&{width:fn(this.$el.parentNode),height:this.height}},write:function(t){dn(this.$el,rt.contain({height:this.height,width:this.width},t).height)},events:["resize"]}},cr={props:{offset:Number},data:{offset:0},methods:{scrollTo:function(t){var e=this;t=t&&De(t)||document.body,Kt(this.$el,"beforescroll",[this,t])&&Un(t,{offset:this.offset}).then((function(){return Kt(e.$el,"scrolled",[e,t])}))}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(Ht(decodeURIComponent(this.$el.hash)).substr(1)))}}},hr={args:"cls",props:{cls:String,target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},data:function(){return{cls:!1,target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"}},computed:{elements:{get:function(t,e){var n=t.target;return n?ze(n,e):[e]},watch:function(t){this.hidden&&Ue(Rt(t,":not(."+this.inViewClass+")"),"visibility","hidden")},immediate:!0}},update:[{read:function(t){var e=this;t.update&&this.elements.forEach((function(t){t._ukScrollspy||(t._ukScrollspy={cls:ut(t,"uk-scrollspy-class")||e.cls}),t._ukScrollspy.show=Rn(t,e.offsetTop,e.offsetLeft)}))},write:function(t){var e=this;if(!t.update)return this.$emit(),t.update=!0;this.elements.forEach((function(n){var i=n._ukScrollspy,r=function(t){Ue(n,"visibility",!t&&e.hidden?"hidden":""),Fe(n,e.inViewClass,t),Fe(n,i.cls),Kt(n,t?"inview":"outview"),i.inview=t,e.$update(n)};!i.show||i.inview||i.queued?!i.show&&i.inview&&!i.queued&&e.repeat&&r(!1):(i.queued=!0,t.promise=(t.promise||ce.resolve()).then((function(){return new ce((function(t){return setTimeout(t,e.delay)}))})).then((function(){r(!0),setTimeout((function(){i.queued=!1,e.$emit()}),300)})))}))},events:["scroll","resize"]}]},lr={props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},data:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:{get:function(t,e){return ze('a[href^="#"]',e).filter((function(t){return t.hash}))},watch:function(t){this.scroll&&this.$create("scroll",t,{offset:this.offset||0})},immediate:!0},targets:function(){return ze(this.links.map((function(t){return Ht(t.hash).substr(1)})).join(","))},elements:function(t){var e=t.closest;return Bt(this.links,e||"*")}},update:[{read:function(){var t=this,e=this.targets.length;if(!e||!Ft(this.$el))return!1;var n=J(Xn(this.targets[0])),i=n.scrollTop,r=n.scrollHeight,o=Gn(n),s=r-un(o).height,a=!1;return i===s?a=e-1:(this.targets.every((function(e,n){if(hn(e,o).top-t.offset<=0)return a=n,!0})),!1===a&&this.overflow&&(a=0)),{active:a}},write:function(t){var e=t.active;this.links.forEach((function(t){return t.blur()})),Oe(this.elements,this.cls),!1!==e&&Kt(this.$el,"active",[e,Pe(this.elements[e],this.cls)])},events:["scroll","resize"]}]},dr={mixins:[ei,Ji],props:{top:null,bottom:Boolean,offset:String,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:Boolean,showOnUp:Boolean,targetOffset:Number},data:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,targetOffset:!1},computed:{offset:function(t){return xn(t.offset)},selTarget:function(t,e){var n=t.selTarget;return n&&De(n,e)||e},widthElement:function(t,e){return yt(t.widthElement,e)||this.placeholder},isActive:{get:function(){return je(this.selTarget,this.clsActive)},set:function(t){t&&!this.isActive?(Le(this.selTarget,this.clsInactive,this.clsActive),Kt(this.$el,"active")):t||je(this.selTarget,this.clsInactive)||(Le(this.selTarget,this.clsActive,this.clsInactive),Kt(this.$el,"inactive"))}}},connected:function(){this.placeholder=De("+ .uk-sticky-placeholder",this.$el)||De('<div class="uk-sticky-placeholder"></div>'),this.isFixed=!1,this.isActive=!1},disconnected:function(){this.isFixed&&(this.hide(),Oe(this.selTarget,this.clsInactive)),Ie(this.placeholder),this.placeholder=null,this.widthElement=null},events:[{name:"load hashchange popstate",el:ct&&window,handler:function(){var t=this;if(!1!==this.targetOffset&&location.hash&&window.pageYOffset>0){var e=De(location.hash);e&&kn.read((function(){var n=un(e).top,i=un(t.$el).top,r=t.$el.offsetHeight;t.isFixed&&i+r>=n&&i<=n+e.offsetHeight&&qn(window,n-r-(P(t.targetOffset)?t.targetOffset:0)-t.offset)}))}}}],update:[{read:function(t,e){var n=t.height;if(this.inactive=!this.matchMedia||!Ft(this.$el),this.inactive)return!1;this.isActive&&"update"!==e&&(this.hide(),n=this.$el.offsetHeight,this.show()),n=this.isActive?n:this.$el.offsetHeight,this.topOffset=un(this.isFixed?this.placeholder:this.$el).top,this.bottomOffset=this.topOffset+n;var i=fr("bottom",this);return this.top=Math.max(F(fr("top",this)),this.topOffset)-this.offset,this.bottom=i&&i-this.$el.offsetHeight,this.width=un(Ft(this.widthElement)?this.widthElement:this.$el).width,{height:n,top:ln(this.placeholder)[0],margins:Ue(this.$el,["marginTop","marginBottom","marginLeft","marginRight"])}},write:function(t){var e=t.height,n=t.margins,i=this.placeholder;Ue(i,G({height:e},n)),qt(i,document)||($e(this.$el,i),i.hidden=!0),this.isActive=!!this.isActive},events:["resize"]},{read:function(t){var e=t.scroll;return void 0===e&&(e=0),this.scroll=window.pageYOffset,{dir:e<=this.scroll?"down":"up",scroll:this.scroll}},write:function(t,e){var n=this,i=Date.now(),r=t.initTimestamp;void 0===r&&(r=0);var o=t.dir,s=t.lastDir,a=t.lastScroll,u=t.scroll,c=t.top;if(t.lastScroll=u,!(u<0||u===a&&"scroll"===e||this.showOnUp&&"scroll"!==e&&!this.isFixed||((i-r>300||o!==s)&&(t.initScroll=u,t.initTimestamp=i),t.lastDir=o,this.showOnUp&&!this.isFixed&&Math.abs(t.initScroll-u)<=30&&Math.abs(a-u)<=10)))if(this.inactive||u<this.top||this.showOnUp&&(u<=this.top||"down"===o&&"scroll"===e||"up"===o&&!this.isFixed&&u<=this.bottomOffset)){if(!this.isFixed)return void(on.inProgress(this.$el)&&c>u&&(on.cancel(this.$el),this.hide()));this.isFixed=!1,this.animation&&u>this.topOffset?(on.cancel(this.$el),on.out(this.$el,this.animation).then((function(){return n.hide()}),et)):this.hide()}else this.isFixed?this.update():this.animation?(on.cancel(this.$el),this.show(),on.in(this.$el,this.animation).catch(et)):this.show()},events:["resize","scroll"]}],methods:{show:function(){this.isFixed=!0,this.update(),this.placeholder.hidden=!1},hide:function(){this.isActive=!1,Oe(this.$el,this.clsFixed,this.clsBelow),Ue(this.$el,{position:"",top:"",width:""}),this.placeholder.hidden=!0},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);P(this.bottom)&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),Ue(this.$el,{position:"fixed",top:e+"px",width:this.width}),this.isActive=t,Fe(this.$el,this.clsBelow,this.scroll>this.bottomOffset),Pe(this.$el,this.clsFixed)}}};function fr(t,e){var n=e.$props,i=e.$el,r=e[t+"Offset"],o=n[t];if(o)return z(o)&&o.match(/^-?\d/)?r+xn(o):un(!0===o?i.parentNode:yt(o,i)).bottom}var pr={mixins:[ni],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},data:{connect:"~.uk-switcher",toggle:"> * > :first-child",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item"},computed:{connects:{get:function(t,e){return kt(t.connect,e)},watch:function(t){var e=this;t.forEach((function(t){return e.updateAria(t.children)})),this.swiping&&Ue(t,"touch-action","pan-y pinch-zoom")},immediate:!0},toggles:{get:function(t,e){return ze(t.toggle,e).filter((function(t){return!Dt(t,".uk-disabled *, .uk-disabled, [disabled]")}))},watch:function(t){var e=this.index();this.show(~e&&e||t[this.active]||t[0])},immediate:!0},children:function(){var t=this;return Yt(this.$el).filter((function(e){return t.toggles.some((function(t){return qt(t,e)}))}))}},events:[{name:"click",delegate:function(){return this.toggle},handler:function(t){b(this.toggles,t.current)&&(t.preventDefault(),this.show(t.current))}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){var e=t.type;this.show(p(e,"Left")?"next":"previous")}}],methods:{index:function(){var t=this;return y(this.children,(function(e){return je(e,t.cls)}))},show:function(t){var e=this,n=this.index(),i=we(t,this.toggles,n);n!==i&&(this.children.forEach((function(t,n){Fe(t,e.cls,i===n),ot(e.toggles[n],"aria-expanded",i===n)})),this.connects.forEach((function(t){var r=t.children;return e.toggleElement(V(r).filter((function(t,n){return n!==i&&e.isToggled(t)})),!1,n>=0).then((function(){return e.toggleElement(r[i],!0,n>=0)}))})))}}},gr={mixins:[ei],extends:pr,props:{media:Boolean},data:{media:960,attrItem:"uk-tab-item"},connected:function(){var t=je(this.$el,"uk-tab-left")?"uk-tab-left":!!je(this.$el,"uk-tab-right")&&"uk-tab-right";t&&this.$create("toggle",this.$el,{cls:t,mode:"media",media:this.media})}},mr={mixins:[Ji,ni],args:"target",props:{href:String,target:null,mode:"list",queued:Boolean},data:{href:!1,target:!1,mode:"click",queued:!0},computed:{target:{get:function(t,e){var n=t.href,i=t.target;return(i=kt(i||n,e)).length&&i||[e]},watch:function(){Kt(this.target,"updatearia",[this])},immediate:!0}},events:[{name:wt+" "+bt,filter:function(){return b(this.mode,"hover")},handler:function(t){ae(t)||this.toggle("toggle"+(t.type===wt?"show":"hide"))}},{name:"click",filter:function(){return b(this.mode,"click")||pt&&b(this.mode,"hover")},handler:function(t){var e;(Bt(t.target,'a[href="#"], a[href=""]')||(e=Bt(t.target,"a[href]"))&&(this.cls&&!je(this.target,this.cls.split(" ")[0])||!Ft(this.target)||e.hash&&Dt(this.target,e.hash)))&&t.preventDefault(),this.toggle()}}],update:{read:function(){return!(!b(this.mode,"media")||!this.media)&&{match:this.matchMedia}},write:function(t){var e=t.match,n=this.isToggled(this.target);(e?!n:n)&&this.toggle()},events:["resize"]},methods:{toggle:function(t){var e=this;if(Kt(this.target,t||"toggle",[this]))if(this.queued){var n=this.target.filter(this.isToggled);this.toggleElement(n,!1).then((function(){return e.toggleElement(e.target.filter((function(t){return!b(n,t)})),!0)}))}else this.toggleElement(this.target)}}};K(Object.freeze({__proto__:null,Accordion:ri,Alert:ai,Cover:ci,Drop:li,Dropdown:li,FormCustom:di,Gif:fi,Grid:bi,HeightMatch:yi,HeightViewport:Si,Icon:Di,Img:ji,Leader:Ki,Margin:pi,Modal:nr,Nav:ir,Navbar:rr,Offcanvas:or,OverflowAuto:ar,Responsive:ur,Scroll:cr,Scrollspy:hr,ScrollspyNav:lr,Sticky:dr,Svg:Ti,Switcher:pr,Tab:gr,Toggle:mr,Video:ui,Close:Oi,Spinner:Hi,SlidenavNext:Bi,SlidenavPrevious:Bi,SearchIcon:Pi,Marker:zi,NavbarToggleIcon:zi,OverlayIcon:zi,PaginationNext:zi,PaginationPrevious:zi,Totop:zi}),(function(t,e){return ti.component(e,t)})),ti.use((function(t){ct&&me((function(){var e;t.update(),Xt(window,"load resize",(function(){return t.update(null,"resize")})),Xt(document,"loadedmetadata load",(function(e){var n=e.target;return t.update(n,"resize")}),!0),Xt(window,"scroll",(function(n){e||(e=!0,kn.write((function(){return e=!1})),t.update(null,n.type))}),{passive:!0,capture:!0});var n,i=0;Xt(document,"animationstart",(function(t){var e=t.target;(Ue(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(i++,Ue(document.body,"overflowX","hidden"),setTimeout((function(){--i||Ue(document.body,"overflowX","")}),U(Ue(e,"animationDuration"))+100))}),!0),Xt(document,gt,(function(t){if(n&&n(),ae(t)){var e=ue(t),i="tagName"in t.target?t.target:t.target.parentNode;n=Jt(document,vt+" "+xt,(function(t){var n=ue(t),r=n.x,o=n.y;(i&&r&&Math.abs(e.x-r)>100||o&&Math.abs(e.y-o)>100)&&setTimeout((function(){var t,n,s,a;Kt(i,"swipe"),Kt(i,"swipe"+(t=e.x,n=e.y,s=r,a=o,Math.abs(t-s)>=Math.abs(n-a)?t-s>0?"Left":"Right":n-a>0?"Up":"Down"))}))}))}}),{passive:!0})}))})),function(t){var e=t.connect,n=t.disconnect;ct&&window.MutationObserver&&kn.read((function(){document.body&&Me(document.body,e),new MutationObserver((function(i){var r=[];i.forEach((function(i){return function(i,r){var o=i.target;("attributes"!==i.type?function(t){for(var i=t.addedNodes,r=t.removedNodes,o=0;o<i.length;o++)Me(i[o],e);for(var s=0;s<r.length;s++)Me(r[s],n);return!0}(i):function(e){var n=e.target,i=e.attributeName;if("href"===i)return!0;var r=Qn(i);if(r&&r in t){if(st(n,i))return t[r](n),!0;var o=t.getComponent(n,r);return o?(o.$destroy(),!0):void 0}}(i))&&!r.some((function(t){return t.contains(o)}))&&r.push(o.contains?o:o.parentNode)}(i,r)})),r.forEach((function(e){return t.update(e)}))})).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),t._initialized=!0}))}(ti);var vr,wr={mixins:[ei],props:{date:String,clsWrapper:String},data:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){return De(t.clsWrapper.replace("%unit%","days"),e)},hours:function(t,e){return De(t.clsWrapper.replace("%unit%","hours"),e)},minutes:function(t,e){return De(t.clsWrapper.replace("%unit%","minutes"),e)},seconds:function(t,e){return De(t.clsWrapper.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter((function(e){return t[e]}))}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach((function(e){return be(t[e])}))},events:[{name:"visibilitychange",el:ct&&document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e,n=this,i=(t=this.date,{total:e=t-Date.now(),seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24});i.total<=0&&(this.stop(),i.days=i.hours=i.minutes=i.seconds=0),this.units.forEach((function(t){var e=String(Math.floor(i[t]));e=e.length<2?"0"+e:e;var r=n[t];r.textContent!==e&&((e=e.split("")).length!==r.children.length&&xe(r,e.map((function(){return"<span></span>"})).join("")),e.forEach((function(t,e){return r.children[e].textContent=t})))}))}},methods:{start:function(){this.stop(),this.date&&this.units.length&&(this.$update(),this.timer=setInterval(this.$update,1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}},br={props:{animation:Number},data:{animation:150},methods:{animate:function(t,e){var n=this;void 0===e&&(e=this.$el),vr||(vr=ye(document.head,"<style>").sheet).insertRule(".uk-animation-target > * {\n            margin-top: 0 !important;\n            transform: none !important;\n        }",0);var i=Yt(e),r=i.map((function(t){return xr(t,!0)})),o=dn(e),s=window.pageYOffset;t(),en.cancel(e),i.forEach(en.cancel),yr(e),this.$update(e,"resize"),kn.flush();var a=dn(e),u=(i=i.concat(Yt(e).filter((function(t){return!b(i,t)})))).map((function(t,e){return!(!t.parentNode||!(e in r))&&(r[e]?Ft(t)?kr(t):{opacity:0}:{opacity:Ft(t)?1:0})}));return r=u.map((function(t,n){var o=i[n].parentNode===e&&(r[n]||xr(i[n]));return o&&(t?"opacity"in t||(o.opacity%1?t.opacity=1:delete o.opacity):delete o.opacity),o})),Pe(e,"uk-animation-target"),i.forEach((function(t,e){return r[e]&&Ue(t,r[e])})),Ue(e,{height:o,display:"block"}),qn(window,s),ce.all(i.map((function(t,e){return["top","left","height","width"].some((function(t){return r[e][t]!==u[e][t]}))&&en.start(t,u[e],n.animation,"ease")})).concat(o!==a&&en.start(e,{height:a},this.animation,"ease"))).then((function(){i.forEach((function(t,e){return Ue(t,{display:0===u[e].opacity?"none":"",zIndex:""})})),yr(e),n.$update(e,"resize"),kn.flush()}),et)}}};function xr(t,e){var n=Ue(t,"zIndex");return!!Ft(t)&&G({display:"",opacity:e?Ue(t,"opacity"):"0",pointerEvents:"none",position:"absolute",zIndex:"auto"===n?ve(t):n},kr(t))}function yr(t){Ue(t.children,{height:"",left:"",opacity:"",pointerEvents:"",position:"",top:"",width:""}),Oe(t,"uk-animation-target"),Ue(t,{height:"",display:""})}function kr(t){var e=un(t),n=e.height,i=e.width,r=hn(t);return{top:r.top,left:r.left,height:n,width:i}}var $r={mixins:[br],args:"target",props:{target:Boolean,selActive:Boolean},data:{target:null,selActive:!1,attrItem:"uk-filter-control",cls:"uk-active",animation:250},computed:{toggles:{get:function(t,e){return t.attrItem,ze("["+this.attrItem+"],[data-"+this.attrItem+"]",e)},watch:function(){var t=this;if(this.updateState(),!1!==this.selActive){var e=ze(this.selActive,this.$el);this.toggles.forEach((function(n){return Fe(n,t.cls,b(e,n))}))}},immediate:!0},children:{get:function(t,e){return ze(t.target+" > *",e)},watch:function(t,e){var n,i;i=e,(n=t).length===i.length&&n.every((function(t){return~i.indexOf(t)}))||this.updateState()}}},events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.apply(t.current)}}],methods:{apply:function(t){this.setState(Tr(t,this.attrItem,this.getState()))},getState:function(){var t=this;return this.toggles.filter((function(e){return je(e,t.cls)})).reduce((function(e,n){return Tr(n,t.attrItem,e)}),{filter:{"":""},sort:[]})},setState:function(t,e){var n=this;void 0===e&&(e=!0),t=G({filter:{"":""},sort:[]},t),Kt(this.$el,"beforeFilter",[this,t]),this.toggles.forEach((function(e){return Fe(e,n.cls,!!function(t,e,n){var i=n.filter;void 0===i&&(i={"":""});var r=n.sort,o=r[0],s=r[1],a=Sr(t,e),u=a.filter;void 0===u&&(u="");var c=a.group;void 0===c&&(c="");var h=a.sort,l=a.order;return void 0===l&&(l="asc"),H(h)?c in i&&u===i[c]||!u&&c&&!(c in i)&&!i[""]:o===h&&s===l}(e,n.attrItem,t))})),ce.all(ze(this.target,this.$el).map((function(i){var r=Yt(i);return e?n.animate((function(){return Ir(t,i,r)}),i):Ir(t,i,r)}))).then((function(){return Kt(n.$el,"afterFilter",[n])}))},updateState:function(){var t=this;kn.write((function(){return t.setState(t.getState(),!1)}))}}};function Sr(t,e){return Dn(ut(t,e),["filter"])}function Ir(t,e,n){var i=function(t){var e=t.filter,n="";return K(e,(function(t){return n+=t||""})),n}(t);n.forEach((function(t){return Ue(t,"display",i&&!Dt(t,i)?"none":"")}));var r=t.sort,o=r[0],s=r[1];if(o){var a=function(t,e,n){return G([],t).sort((function(t,i){return ut(t,e).localeCompare(ut(i,e),void 0,{numeric:!0})*("asc"===n||-1)}))}(n,o,s);Y(a,n)||ye(e,a)}}function Tr(t,e,n){var i=Sr(t,e),r=i.filter,o=i.group,s=i.sort,a=i.order;return void 0===a&&(a="asc"),(r||H(s))&&(o?r?(delete n.filter[""],n.filter[o]=r):(delete n.filter[o],(O(n.filter)||""in n.filter)&&(n.filter={"":r||""})):n.filter={"":r||""}),H(s)||(n.sort=[s,a]),n}var Er={slide:{show:function(t){return[{transform:Cr(-100*t)},{transform:Cr()}]},percent:function(t){return _r(t)},translate:function(t,e){return[{transform:Cr(-100*e*t)},{transform:Cr(100*e*(1-t))}]}}};function _r(t){return Math.abs(Ue(t,"transform").split(",")[4]/t.offsetWidth)||0}function Cr(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),t+=t?e:"",ht?"translateX("+t+")":"translate3d("+t+", 0, 0)"}function Ar(t){return"scale3d("+t+", "+t+", 1)"}var Nr=G({},Er,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-Ue(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:Ar(.8)},{opacity:1,transform:Ar(1)}]},percent:function(t){return 1-Ue(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Ar(1-.2*t)},{opacity:t,transform:Ar(.8+.2*t)}]}}});function Mr(t,e,n){Kt(t,Zt(e,!1,!1,n))}var Dr={props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},data:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.autoplay&&this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:function(){ot(this.slides,"tabindex","-1")},events:[{name:"visibilitychange",el:ct&&document,filter:function(){return this.autoplay},handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.interval=setInterval((function(){return(!t.draggable||!De(":focus",t.$el))&&(!t.pauseOnHover||!Dt(t.$el,":hover"))&&!t.stack.length&&t.show("next")}),this.autoplayInterval)},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}},zr={props:{draggable:Boolean},data:{draggable:!0,threshold:10},created:function(){var t=this;["start","move","end"].forEach((function(e){var n=t[e];t[e]=function(e){var i=ue(e).x*(lt?-1:1);t.prevPos=i!==t.pos?t.pos:t.prevPos,t.pos=i,n(e)}}))},events:[{name:gt,delegate:function(){return this.selSlides},handler:function(t){var e;!this.draggable||!ae(t)&&(!(e=t.target).children.length&&e.childNodes.length)||Bt(t.target,Wt)||t.button>0||this.length<2||this.start(t)}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.cancel(),this._transitioner.translate(this.percent),this.dragging=!0,this.stack=[]):this.prevIndex=this.index,Xt(document,mt,this.move,{passive:!1}),Xt(document,vt+" "+xt,this.end,!0),Ue(this.list,"userSelect","none")},move:function(t){var e=this,n=this.pos-this.drag;if(!(0===n||this.prevPos===this.pos||!this.dragging&&Math.abs(n)<this.threshold)){Ue(this.list,"pointerEvents","none"),t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=n<0?1:-1;for(var i=this.slides,r=this.prevIndex,o=Math.abs(n),s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;s!==r&&o>a;)this.drag-=a*this.dir,r=s,o-=a,s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;this.percent=o/a;var u,c=i[r],h=i[s],l=this.index!==s,d=r===s;[this.index,this.prevIndex].filter((function(t){return!b([s,r],t)})).forEach((function(t){Kt(i[t],"itemhidden",[e]),d&&(u=!0,e.prevIndex=r)})),(this.index===r&&this.prevIndex!==r||u)&&Kt(i[this.index],"itemshown",[this]),l&&(this.prevIndex=r,this.index=s,!d&&Kt(c,"beforeitemhide",[this]),Kt(h,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),c,!d&&h),l&&(!d&&Kt(c,"itemhide",[this]),Kt(h,"itemshow",[this]))}},end:function(){if(Gt(document,mt,this.move,{passive:!1}),Gt(document,vt+" "+xt,this.end,!0),this.dragging)if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(lt?this.dir*(lt?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(this.dir>0&&!t||this.dir<0&&t?"next":"previous",!0)}Ue(this.list,{userSelect:"",pointerEvents:""}),this.drag=this.percent=null}}},Br={mixins:[Dr,zr,{data:{selNav:!1},computed:{nav:function(t,e){return De(t.selNav,e)},selNavItem:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return ze(this.selNavItem,e)}},update:{write:function(){var t=this;this.nav&&this.length!==this.nav.children.length&&xe(this.nav,this.slides.map((function(e,n){return"<li "+t.attrItem+'="'+n+'"><a href></a></li>'})).join("")),Fe(ze(this.selNavItem,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["resize"]},events:[{name:"click",delegate:function(){return this.selNavItem},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var t=this,e=this.getValidIndex();this.navItems.forEach((function(n){var i=ut(n,t.attrItem);Fe(n,t.clsActive,j(i)===e),Fe(n,"uk-invisible",t.finite&&("previous"===i&&0===e||"next"===i&&e>=t.maxIndex))}))}}}],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number,selSlides:String},data:function(){return{easing:"ease",finite:!1,velocity:1,index:0,prevIndex:-1,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}}},connected:function(){this.prevIndex=-1,this.index=this.getValidIndex(this.index),this.stack=[]},disconnected:function(){Oe(this.slides,this.clsActive)},computed:{duration:function(t,e){var n=t.velocity;return Pr(e.offsetWidth/n)},list:function(t,e){return De(t.selList,e)},maxIndex:function(){return this.length-1},selSlides:function(t){return t.selList+" "+(t.selSlides||"> *")},slides:{get:function(){return ze(this.selSlides,this.$el)},watch:function(){this.$reset()}},length:function(){return this.slides.length}},events:{itemshown:function(){this.$update(this.list)}},methods:{show:function(t,e){var n=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var i=this.stack,r=e?0:i.length,o=function(){i.splice(r,1),i.length&&n.show(i.shift(),!0)};if(i[e?"unshift":"push"](t),!e&&i.length>1)2===i.length&&this._transitioner.forward(Math.min(this.duration,200));else{var s=this.getIndex(this.index),a=je(this.slides,this.clsActive)&&this.slides[s],u=this.getIndex(t,this.index),c=this.slides[u];if(a!==c){if(this.dir=function(t,e){return"next"===t?1:"previous"===t||t<e?-1:1}(t,s),this.prevIndex=s,this.index=u,a&&!Kt(a,"beforeitemhide",[this])||!Kt(c,"beforeitemshow",[this,a]))return this.index=this.prevIndex,void o();var h=this._show(a,c,e).then((function(){return a&&Kt(a,"itemhidden",[n]),Kt(c,"itemshown",[n]),new ce((function(t){kn.write((function(){i.shift(),i.length?n.show(i.shift(),!0):n._transitioner=null,t()}))}))}));return a&&Kt(a,"itemhide",[this]),Kt(c,"itemshow",[this]),h}o()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),tt(we(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,n){if(this._transitioner=this._getTransitioner(t,e,this.dir,G({easing:n?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!n&&!t)return this._translate(1),ce.resolve();var i=this.stack.length;return this._transitioner[i>1?"forward":"show"](i>1?Math.min(this.duration,75+75/(i-1)):this.duration,this.percent)},_getDistance:function(t,e){return this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,n){void 0===e&&(e=this.prevIndex),void 0===n&&(n=this.index);var i=this._getTransitioner(e!==n&&e,n);return i.translate(t),i},_getTransitioner:function(t,e,n,i){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===n&&(n=this.dir||1),void 0===i&&(i=this.transitionOptions),new this.Transitioner(B(t)?this.slides[t]:t,B(e)?this.slides[e]:e,n*(lt?-1:1),i)}}};function Pr(t){return.5*t+300}var Or={mixins:[Br],props:{animation:String},data:{animation:"slide",clsActivated:"uk-transition-active",Animations:Er,Transitioner:function(t,e,n,i){var r=i.animation,o=i.easing,s=r.percent,a=r.translate,u=r.show;void 0===u&&(u=et);var c=u(n),h=new he;return{dir:n,show:function(i,r,s){var a=this;void 0===r&&(r=0);var u=s?"linear":o;return i-=Math.round(i*tt(r,-1,1)),this.translate(r),Mr(e,"itemin",{percent:r,duration:i,timing:u,dir:n}),Mr(t,"itemout",{percent:1-r,duration:i,timing:u,dir:n}),ce.all([en.start(e,c[1],i,u),en.start(t,c[0],i,u)]).then((function(){a.reset(),h.resolve()}),et),h.promise},stop:function(){return en.stop([e,t])},cancel:function(){en.cancel([e,t])},reset:function(){for(var n in c[0])Ue([e,t],n,"")},forward:function(n,i){return void 0===i&&(i=this.percent()),en.cancel([e,t]),this.show(n,i,!0)},translate:function(i){this.reset();var r=a(i,n);Ue(e,r[1]),Ue(t,r[0]),Mr(e,"itemtranslatein",{percent:i,dir:n}),Mr(t,"itemtranslateout",{percent:1-i,dir:n})},percent:function(){return s(t||e,e,n)},getDistance:function(){return t&&t.offsetWidth}}}},computed:{animation:function(t){var e=t.animation,n=t.Animations;return G(n[e]||n.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(t){var e=t.target;this.$update(e)},beforeitemshow:function(t){Pe(t.target,this.clsActive)},itemshown:function(t){Pe(t.target,this.clsActivated)},itemhidden:function(t){Oe(t.target,this.clsActive,this.clsActivated)}}},Hr={mixins:[Zi,tr,ni,Or],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},data:function(){return{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",selCaption:".uk-lightbox-caption",pauseOnHover:!1,velocity:2,Animations:Nr,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'}},created:function(){var t=De(this.template),e=De(this.selList,t);this.items.forEach((function(){return ye(e,"<li>")})),this.$mount(ye(this.container,t))},computed:{caption:function(t,e){return t.selCaption,De(".uk-lightbox-caption",e)}},events:[{name:mt+" "+gt+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selSlides},handler:function(t){t.defaultPrevented||this.hide()}},{name:"shown",self:!0,handler:function(){this.showControls()}},{name:"hide",self:!0,handler:function(){this.hideControls(),Oe(this.slides,this.clsActive),en.stop(this.slides)}},{name:"hidden",self:!0,handler:function(){this.$destroy(!0)}},{name:"keyup",el:ct&&document,handler:function(t){if(this.isToggled(this.$el)&&this.draggable)switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.draggable=!1,t.preventDefault(),this.toggleElement(this.$el,!0,!1),this.animation=Nr.scale,Oe(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(){xe(this.caption,this.getItem().caption||"");for(var t=-this.preload;t<=this.preload;t++)this.loadItem(this.index+t)}},{name:"itemshown",handler:function(){this.draggable=this.$props.draggable}},{name:"itemload",handler:function(t,e){var n=this,i=e.source,r=e.type,o=e.alt;void 0===o&&(o="");var s=e.poster,a=e.attrs;if(void 0===a&&(a={}),this.setItem(e,"<span uk-spinner></span>"),i){var u,c={frameborder:"0",allow:"autoplay",allowfullscreen:"",style:"max-width: 100%; box-sizing: border-box;","uk-responsive":"","uk-video":""+this.videoAutoplay};if("image"===r||i.match(/\.(jpe?g|png|gif|svg|webp)($|\?)/i))ge(i,a.srcset,a.size).then((function(t){var r=t.width,s=t.height;return n.setItem(e,Lr("img",G({src:i,width:r,height:s,alt:o},a)))}),(function(){return n.setError(e)}));else if("video"===r||i.match(/\.(mp4|webm|ogv)($|\?)/i)){var h=Lr("video",G({src:i,poster:s,controls:"",playsinline:"","uk-video":""+this.videoAutoplay},a));Xt(h,"loadedmetadata",(function(){ot(h,{width:h.videoWidth,height:h.videoHeight}),n.setItem(e,h)})),Xt(h,"error",(function(){return n.setError(e)}))}else"iframe"===r||i.match(/\.(html|php)($|\?)/i)?this.setItem(e,Lr("iframe",G({src:i,frameborder:"0",allowfullscreen:"",class:"uk-lightbox-iframe"},a))):(u=i.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/))?this.setItem(e,Lr("iframe",G({src:"https://www.youtube"+(u[1]||"")+".com/embed/"+u[2]+(u[3]?"?"+u[3]:""),width:1920,height:1080},c,a))):(u=i.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/))&&pe("https://vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(i),{responseType:"json",withCredentials:!1}).then((function(t){var i=t.response,r=i.height,o=i.width;return n.setItem(e,Lr("iframe",G({src:"https://player.vimeo.com/video/"+u[1]+(u[2]?"?"+u[2]:""),width:o,height:r},c,a)))}),(function(){return n.setError(e)}))}}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);this.getSlide(e).childElementCount||Kt(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[we(t,this.slides)]},setItem:function(t,e){Kt(this.$el,"itemloaded",[this,xe(this.getSlide(t),e)])},getSlide:function(t){return this.slides[this.items.indexOf(t)]},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),Pe(this.$el,"uk-active","uk-transition-active")},hideControls:function(){Oe(this.$el,"uk-active","uk-transition-active")}}};function Lr(t,e){var n=Ne("<"+t+">");return ot(n,e),n}var jr,Fr={install:function(t,e){t.lightboxPanel||t.component("lightboxPanel",Hr),G(e.props,t.component("lightboxPanel").options.props)},props:{toggle:String},data:{toggle:"a"},computed:{toggles:{get:function(t,e){return ze(t.toggle,e)},watch:function(){this.hide()}}},disconnected:function(){this.hide()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}}],methods:{show:function(t){var e=this,n=Q(this.toggles.map(Wr),"source");if(N(t)){var i=Wr(t).source;t=y(n,(function(t){var e=t.source;return i===e}))}return this.panel=this.panel||this.$create("lightboxPanel",G({},this.$props,{items:n})),Xt(this.panel.$el,"hidden",(function(){return e.panel=!1})),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}};function Wr(t){var e={};return["href","caption","type","poster","alt","attrs"].forEach((function(n){e["href"===n?"source":n]=ut(t,n)})),e.attrs=Dn(e.attrs),e}var Vr={functional:!0,args:["message","status"],data:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsContainer:"uk-notification",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},install:function(t){t.notification.closeAll=function(e,n){Me(document.body,(function(i){var r=t.getComponent(i,"notification");!r||e&&e!==r.group||r.close(n)}))}},computed:{marginProp:function(t){return"margin"+(d(t.pos,"top")?"Top":"Bottom")},startProps:function(){var t;return(t={opacity:0})[this.marginProp]=-this.$el.offsetHeight,t}},created:function(){var t=De("."+this.clsContainer+"-"+this.pos,this.$container)||ye(this.$container,'<div class="'+this.clsContainer+" "+this.clsContainer+"-"+this.pos+'" style="display: block"></div>');this.$mount(ye(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},connected:function(){var t,e=this,n=F(Ue(this.$el,this.marginProp));en.start(Ue(this.$el,this.startProps),(t={opacity:1},t[this.marginProp]=n,t)).then((function(){e.timeout&&(e.timer=setTimeout(e.close,e.timeout))}))},events:(jr={click:function(t){Bt(t.target,'a[href="#"],a[href=""]')&&t.preventDefault(),this.close()}},jr[wt]=function(){this.timer&&clearTimeout(this.timer)},jr[bt]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},jr),methods:{close:function(t){var e=this,n=function(){var t=e.$el.parentNode;Kt(e.$el,"close",[e]),Ie(e.$el),t&&!t.hasChildNodes()&&Ie(t)};this.timer&&clearTimeout(this.timer),t?n():en.start(this.$el,this.startProps).then(n)}}},Rr=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity","stroke"],qr={mixins:[Ji],props:Rr.reduce((function(t,e){return t[e]="list",t}),{}),data:Rr.reduce((function(t,e){return t[e]=void 0,t}),{}),computed:{props:function(t,e){var n=this;return Rr.reduce((function(i,r){if(H(t[r]))return i;var o,s,a,u=r.match(/color/i),c=u||"opacity"===r,h=t[r].slice(0);c&&Ue(e,r,""),h.length<2&&h.unshift(("scale"===r?1:c?Ue(e,r):0)||0);var l=function(t){return t.reduce((function(t,e){return z(e)&&e.replace(/-|\d/g,"").trim()||t}),"")}(h);if(u){var f=e.style.color;h=h.map((function(t){return function(t,e){return Ue(Ue(t,"color",e),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(F)}(e,t)})),e.style.color=f}else if(d(r,"bg")){var p="bgy"===r?"height":"width";if(h=h.map((function(t){return xn(t,p,n.$el)})),Ue(e,"background-position-"+r[2],""),s=Ue(e,"backgroundPosition").split(" ")["x"===r[2]?0:1],n.covers){var g=Math.min.apply(Math,h),m=Math.max.apply(Math,h),v=h.indexOf(g)<h.indexOf(m);a=m-g,h=h.map((function(t){return t-(v?g:m)})),o=(v?-a:0)+"px"}else o=s}else h=h.map(F);if("stroke"===r){if(!h.some((function(t){return t})))return i;var w=Ai(n.$el);Ue(e,"strokeDasharray",w),"%"===l&&(h=h.map((function(t){return t*w/100}))),h=h.reverse(),r="strokeDashoffset"}return i[r]={steps:h,unit:l,pos:o,bgPos:s,diff:a},i}),{})},bgProps:function(){var t=this;return["bgx","bgy"].filter((function(e){return e in t.props}))},covers:function(t,e){return function(t){var e=t.style.backgroundSize,n="cover"===Ue(Ue(t,"backgroundSize",""),"backgroundSize");return t.style.backgroundSize=e,n}(e)}},disconnected:function(){delete this._image},update:{read:function(t){var e=this;if(t.active=this.matchMedia,t.active){if(!t.image&&this.covers&&this.bgProps.length){var n=Ue(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");if(n){var i=new Image;i.src=n,t.image=i,i.naturalWidth||(i.onload=function(){return e.$update()})}}var r=t.image;if(r&&r.naturalWidth){var o={width:this.$el.offsetWidth,height:this.$el.offsetHeight},s={width:r.naturalWidth,height:r.naturalHeight},a=rt.cover(s,o);this.bgProps.forEach((function(t){var n=e.props[t],i=n.diff,r=n.bgPos,u=n.steps,c="bgy"===t?"height":"width",h=a[c]-o[c];if(h<i)o[c]=a[c]+i-h;else if(h>i){var l=o[c]/xn(r,c,e.$el);l&&(e.props[t].steps=u.map((function(t){return t-(h-i)/l})))}a=rt.cover(s,o)})),t.dim=a}}},write:function(t){var e=t.dim;t.active?e&&Ue(this.$el,{backgroundSize:e.width+"px "+e.height+"px",backgroundRepeat:"no-repeat"}):Ue(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["resize"]},methods:{reset:function(){var t=this;K(this.getCss(0),(function(e,n){return Ue(t.$el,n,"")}))},getCss:function(t){var e=this.props;return Object.keys(e).reduce((function(n,i){var r=e[i],o=r.steps,s=r.unit,a=r.pos,u=function(t,e,n){void 0===n&&(n=2);var i=Ur(t,e),r=i[0],o=i[1],s=i[2];return(B(r)?r+Math.abs(r-o)*s*(r<o?1:-1):+o).toFixed(n)}(o,t);switch(i){case"x":case"y":s=s||"px",n.transform+=" translate"+c(i)+"("+F(u).toFixed("px"===s?0:2)+s+")";break;case"rotate":s=s||"deg",n.transform+=" rotate("+(u+s)+")";break;case"scale":n.transform+=" scale("+u+")";break;case"bgy":case"bgx":n["background-position-"+i[2]]="calc("+a+" + "+u+"px)";break;case"color":case"backgroundColor":case"borderColor":var h=Ur(o,t),l=h[0],d=h[1],f=h[2];n[i]="rgba("+l.map((function(t,e){return t+=f*(d[e]-t),3===e?F(t):parseInt(t,10)})).join(",")+")";break;case"blur":s=s||"px",n.filter+=" blur("+(u+s)+")";break;case"hue":s=s||"deg",n.filter+=" hue-rotate("+(u+s)+")";break;case"fopacity":s=s||"%",n.filter+=" opacity("+(u+s)+")";break;case"grayscale":case"invert":case"saturate":case"sepia":s=s||"%",n.filter+=" "+i+"("+(u+s)+")";break;default:n[i]=u}return n}),{transform:"",filter:""})}}};function Ur(t,e){var n=t.length-1,i=Math.min(Math.floor(n*e),n-1),r=t.slice(i,i+2);return r.push(1===e?1:e%(1/n)*n),r}var Yr={mixins:[qr],props:{target:String,viewport:Number,easing:Number},data:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var n=t.target;return function t(e){return e?"offsetTop"in e?e:t(e.parentNode):document.body}(n&&yt(n,e)||e)}},update:{read:function(t,e){var n=t.percent;if("scroll"!==e&&(n=!1),t.active){var i=n;return{percent:n=function(t,e){return tt(t*(1-(e-e*t)))}(Yn(this.target)/(this.viewport||1),this.easing),style:i!==n&&this.getCss(n)}}},write:function(t){var e=t.style;t.active?e&&Ue(this.$el,e):this.reset()},events:["scroll","resize"]}},Xr={update:{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex(this.index);~this.prevIndex&&this.index===t||this.show(t)}},events:["resize"]}};function Gr(t,e,n){var i=Zr(t,e);return n?i-function(t,e){return un(e).width/2-un(t).width/2}(t,e):Math.min(i,Jr(e))}function Jr(t){return Math.max(0,Kr(t)-un(t).width)}function Kr(t){return to(t).reduce((function(t,e){return un(e).width+t}),0)}function Zr(t,e){return(hn(t).left+(lt?un(t).width-un(e).width:0))*(lt?-1:1)}function Qr(t,e,n){Kt(t,Zt(e,!1,!1,n))}function to(t){return Yt(t)}var eo={mixins:[ei,Br,Xr],props:{center:Boolean,sets:Boolean},data:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:function(t,e,n,i){var r=i.center,o=i.easing,s=i.list,a=new he,u=t?Gr(t,s,r):Gr(e,s,r)+un(e).width*n,c=e?Gr(e,s,r):u+un(t).width*n*(lt?-1:1);return{dir:n,show:function(i,r,u){void 0===r&&(r=0);var h=u?"linear":o;i-=Math.round(i*tt(r,-1,1)),this.translate(r),t&&this.updateTranslates(),r=t?r:tt(r,0,1),Qr(this.getItemIn(),"itemin",{percent:r,duration:i,timing:h,dir:n}),t&&Qr(this.getItemIn(!0),"itemout",{percent:1-r,duration:i,timing:h,dir:n});var l=ve(e)/1e4;return en.start(s,{transform:Cr((-c+l)*(lt?-1:1),"px")},i,h).then(a.resolve,et),a.promise},stop:function(){return en.stop(s)},cancel:function(){en.cancel(s)},reset:function(){Ue(s,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),en.cancel(s),this.show(t,e,!0)},translate:function(e){var i=this.getDistance()*n*(lt?-1:1);Ue(s,"transform",Cr(tt(i-i*e-c,-Kr(s),un(s).width)*(lt?-1:1),"px")),this.updateTranslates(),t&&(e=tt(e,-1,1),Qr(this.getItemIn(),"itemtranslatein",{percent:e,dir:n}),Qr(this.getItemIn(!0),"itemtranslateout",{percent:1-e,dir:n}))},percent:function(){return Math.abs((Ue(s,"transform").split(",")[4]*(lt?-1:1)+u)/(c-u))},getDistance:function(){return Math.abs(c-u)},getItemIn:function(e){void 0===e&&(e=!1);var i=this.getActives(),r=Z(to(s),"offsetLeft"),o=ve(r,i[n*(e?-1:1)>0?i.length-1:0]);return~o&&r[o+(t&&!e?n:0)]},getActives:function(){var n=Gr(t||e,s,r);return Z(to(s).filter((function(t){var e=Zr(t,s);return e>=n&&e+un(t).width<=un(s).width+n})),"offsetLeft")},updateTranslates:function(){var t=this.getActives();to(s).forEach((function(n){var i=b(t,n);Qr(n,"itemtranslate"+(i?"in":"out"),{percent:i?1:0,dir:n.offsetLeft<=e.offsetLeft?1:-1})}))}}}},computed:{avgWidth:function(){return Kr(this.list)/this.length},finite:function(t){return t.finite||Math.ceil(Kr(this.list))<un(this.list).width+to(this.list).reduce((function(t,e){return Math.max(t,un(e).width)}),0)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return J(this.sets);Ue(this.slides,"order","");for(var t=Jr(this.list),e=this.length;e--;)if(Zr(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var e=this,n=t.sets,i=un(this.list).width/(this.center?2:1),r=0,o=i,s=0;return!O(n=n&&this.slides.reduce((function(t,n,a){var u=un(n).width;if(s+u>r&&(!e.center&&a>e.maxIndex&&(a=e.maxIndex),!b(t,a))){var c=e.slides[a+1];e.center&&c&&u<o-un(c).width/2?o-=u:(o=i,t.push(a),r=s+i+(e.center?u/2:0))}return s+=u,t}),[]))&&n},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){Fe(this.$el,this.clsContainer,!De("."+this.clsContainer,this.$el))},update:{write:function(){var t=this;ze("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach((function(e){var n=ut(e,t.attrItem);t.maxIndex&&Fe(e,"uk-hidden",P(n)&&(t.sets&&!b(t.sets,F(n))||n>t.maxIndex))})),!this.length||this.dragging||this.stack.length||(this.reorder(),this._translate(1));var e=this._getTransitioner(this.index).getActives();this.slides.forEach((function(n){return Fe(n,t.clsActive,b(e,n))})),(!this.sets||b(this.sets,F(this.index)))&&this.slides.forEach((function(n){return Fe(n,t.clsActivated,b(e,n))}))},events:["resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!b(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(this.dir>0&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&e>1){for(var n=0;n<e;n++)this.stack.splice(1,0,this.dir>0?"next":"previous");t.preventDefault()}else this.duration=Pr(this.avgWidth/this.velocity)*(un(this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).width/this.avgWidth),this.reorder()},itemshow:function(){~this.prevIndex&&Pe(this._getTransitioner().getItemIn(),this.clsActive)}},methods:{reorder:function(){var t=this;if(this.finite)Ue(this.slides,"order","");else{var e=this.dir>0&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach((function(n,i){return Ue(n,"order",t.dir>0&&i<e?1:t.dir<0&&i>=t.index?-1:"")})),this.center)for(var n=this.slides[e],i=un(this.list).width/2-un(n).width/2,r=0;i>0;){var o=this.getIndex(--r+e,e),s=this.slides[o];Ue(s,"order",o>e?-2:-1),i-=un(s).width}}},getValidIndex:function(t,e){if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;var n;do{if(b(this.sets,t))return t;n=t,t=this.getIndex(t+this.dir,e)}while(t!==n);return t}}},no={mixins:[qr],data:{selItem:"!li"},computed:{item:function(t,e){return yt(t.selItem,e)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){Ue(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.duration,o=n.timing,s=n.dir;en.cancel(this.$el),Ue(this.$el,this.getCss(ro(e,s,i))),en.start(this.$el,this.getCss(io(e)?.5:s>0?1:0),r,o).catch(et)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){en.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.dir;en.cancel(this.$el),Ue(this.$el,this.getCss(ro(e,r,i)))}}]};function io(t){return p(t,"in")}function ro(t,e,n){return n/=2,io(t)?e<0?1-n:n:e<0?n:1-n}var oo,so,ao=G({},Er,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ue(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:Ar(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ue(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Ar(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:Cr(30),zIndex:-1},{transform:Cr(),zIndex:0}]:[{transform:Cr(-100),zIndex:0},{transform:Cr(),zIndex:-1}]},percent:function(t,e,n){return n<0?1-_r(e):_r(t)},translate:function(t,e){return e<0?[{transform:Cr(30*t),zIndex:-1},{transform:Cr(-100*(1-t)),zIndex:0}]:[{transform:Cr(100*-t),zIndex:0},{transform:Cr(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:Cr(100),zIndex:0},{transform:Cr(),zIndex:-1}]:[{transform:Cr(-30),zIndex:-1},{transform:Cr(),zIndex:0}]},percent:function(t,e,n){return n>0?1-_r(e):_r(t)},translate:function(t,e){return e<0?[{transform:Cr(100*t),zIndex:0},{transform:Cr(-30*(1-t)),zIndex:-1}]:[{transform:Cr(-30*t),zIndex:-1},{transform:Cr(100*(1-t)),zIndex:0}]}}}),uo={mixins:[ei,Or,Xr],props:{ratio:String,minHeight:Number,maxHeight:Number},data:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:ao},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],n=t[1];return n=n*this.list.offsetWidth/e||0,this.minHeight&&(n=Math.max(this.minHeight,n)),this.maxHeight&&(n=Math.min(this.maxHeight,n)),{height:n-gn(this.list,"height","content-box")}},write:function(t){var e=t.height;e>0&&Ue(this.list,"minHeight",e)},events:["resize"]}},co={mixins:[ei,br],props:{group:String,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},data:{group:!1,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1,pos:{}},created:function(){var t=this;["init","start","move","end"].forEach((function(e){var n=t[e];t[e]=function(e){G(t.pos,ue(e)),n(e)}}))},events:{name:gt,passive:!1,handler:"init"},computed:{target:function(){return(this.$el.tBodies||[this.$el])[0]},items:function(){return Yt(this.target)},isEmpty:{get:function(){return O(this.items)},watch:function(t){Fe(this.target,this.clsEmpty,t)},immediate:!0},handles:{get:function(t,e){var n=t.handle;return n?ze(n,e):this.items},watch:function(t,e){Ue(e,{touchAction:"",userSelect:""}),Ue(t,{touchAction:pt?"none":"",userSelect:"none"})},immediate:!0}},update:{write:function(){if(this.drag&&Pt(this.placeholder)){var t=this.pos,e=t.x,n=t.y,i=this.origin,r=i.offsetTop,o=i.offsetLeft,s=this.drag,a=s.offsetHeight,u=s.offsetWidth,c=un(window),h=c.right,l=c.bottom,d=document.elementFromPoint(e,n);Ue(this.drag,{top:tt(n-r,0,l-a),left:tt(e-o,0,h-u)});var f=this.getSortable(d),p=this.getSortable(this.placeholder),g=f!==p;if(f&&!qt(d,this.placeholder)&&(!g||f.group&&f.group===p.group)){if(d=f.target===d.parentNode&&d||f.items.filter((function(t){return qt(d,t)}))[0],g)p.remove(this.placeholder);else if(!d)return;f.insert(this.placeholder,d),b(this.touched,f)||this.touched.push(f)}}},events:["move"]},methods:{init:function(t){var e=t.target,n=t.button,i=t.defaultPrevented,r=this.items.filter((function(t){return qt(e,t)}))[0];!r||i||n>0||Vt(e)||qt(e,"."+this.clsNoDrag)||this.handle&&!qt(e,this.handle)||(t.preventDefault(),this.touched=[this],this.placeholder=r,this.origin=G({target:e,index:ve(r)},this.pos),Xt(document,mt,this.move),Xt(document,vt,this.end),this.threshold||this.start(t))},start:function(t){var e,n,i;this.drag=(e=this.$container,n=this.placeholder,(i=ye(e,n.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g,"$1div$2"))).style.setProperty("margin","0","important"),Ue(i,G({boxSizing:"border-box",width:n.offsetWidth,height:n.offsetHeight,overflow:"hidden"},Ue(n,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),dn(i.firstElementChild,dn(n.firstElementChild)),i);var r=this.placeholder.getBoundingClientRect(),o=r.left,s=r.top;G(this.origin,{offsetLeft:this.pos.x-o,offsetTop:this.pos.y-s}),Pe(this.drag,this.clsDrag,this.clsCustom),Pe(this.placeholder,this.clsPlaceholder),Pe(this.items,this.clsItem),Pe(document.documentElement,this.clsDragState),Kt(this.$el,"start",[this,this.placeholder]),function(t){var e=Date.now();oo=setInterval((function(){var n=t.x,i=t.y;i+=window.pageYOffset;var r=.3*(Date.now()-e);e=Date.now(),Xn(document.elementFromPoint(n,t.y)).some((function(t){var e=t.scrollTop,n=t.scrollHeight,o=un(Gn(t)),s=o.top,a=o.bottom,u=o.height;if(s<i&&s+30>i)e-=r;else{if(!(a>i&&a-30<i))return;e+=r}if(e>0&&e<n-u)return qn(t,e),!0}))}),15)}(this.pos),this.move(t)},move:function(t){this.drag?this.$emit("move"):(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},end:function(t){if(Gt(document,mt,this.move),Gt(document,vt,this.end),Gt(window,"scroll",this.scroll),this.drag){clearInterval(oo);var e=this.getSortable(this.placeholder);this===e?this.origin.index!==ve(this.placeholder)&&Kt(this.$el,"moved",[this,this.placeholder]):(Kt(e.$el,"added",[e,this.placeholder]),Kt(this.$el,"removed",[this,this.placeholder])),Kt(this.$el,"stop",[this,this.placeholder]),Ie(this.drag),this.drag=null;var n=this.touched.map((function(t){return t.clsPlaceholder+" "+t.clsItem})).join(" ");this.touched.forEach((function(t){return Oe(t.items,n)})),Oe(document.documentElement,this.clsDragState)}},insert:function(t,e){var n=this;Pe(this.items,this.clsItem);var i=function(){e?!qt(t,n.target)||function(t,e){return t.parentNode===e.parentNode&&ve(t)>ve(e)}(t,e)?ke(e,t):$e(e,t):ye(n.target,t)};this.animation?this.animate(i):i()},remove:function(t){qt(t,this.target)&&(this.animation?this.animate((function(){return Ie(t)})):Ie(t))},getSortable:function(t){return t&&(this.$getComponent(t,"sortable")||this.getSortable(t.parentNode))}}},ho=[],lo={mixins:[Zi,ni,hi],args:"title",props:{delay:Number,title:String},data:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=st(this.$el,"title"),ot(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),ot(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var t=this;!this.isActive()&&this.title&&(ho.forEach((function(t){return t.hide()})),ho.push(this),this._unbind=Xt(document,vt,(function(e){return!qt(e.target,t.$el)&&t.hide()})),clearTimeout(this.showTimer),this.showTimer=setTimeout(this._show,this.delay))},hide:function(){var t=this;this.isActive()&&!Dt(this.$el,"input:focus")&&this.toggleElement(this.tooltip,!1,!1).then((function(){ho.splice(ho.indexOf(t),1),clearTimeout(t.showTimer),t.tooltip=Ie(t.tooltip),t._unbind()}))},_show:function(){var t=this;this.tooltip=ye(this.container,'<div class="'+this.clsPos+'"> <div class="'+this.clsPos+'-inner">'+this.title+"</div> </div>"),Xt(this.tooltip,"toggled",(function(){var e=t.isToggled(t.tooltip);ot(t.$el,"aria-expanded",e),e&&(t.positionAt(t.tooltip,t.$el),t.origin="y"===t.getAxis()?bn(t.dir)+"-"+t.align:t.align+"-"+bn(t.dir))})),this.toggleElement(this.tooltip,!0)},isActive:function(){return b(ho,this)}},events:(so={focus:"show",blur:"hide"},so[wt+" "+bt]=function(t){ae(t)||(t.type===wt?this.show():this.hide())},so[gt]=function(t){ae(t)&&(this.isActive()?this.hide():this.show())},so)},fo={props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Kilobytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:et,beforeAll:et,beforeSend:et,complete:et,completeAll:et,error:et,fail:et,load:et,loadEnd:et,loadStart:et,progress:et},events:{change:function(t){Dt(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){go(t);var e=t.dataTransfer;e&&e.files&&(Oe(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){go(t)},dragover:function(t){go(t),Pe(this.$el,this.clsDragover)},dragleave:function(t){go(t),Oe(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){Kt(this.$el,"upload",[t]);for(var n=0;n<t.length;n++){if(this.maxSize&&1e3*this.maxSize<t[n].size)return void this.fail(this.msgInvalidSize.replace("%s",this.maxSize));if(this.allow&&!po(this.allow,t[n].name))return void this.fail(this.msgInvalidName.replace("%s",this.allow));if(this.mime&&!po(this.mime,t[n].type))return void this.fail(this.msgInvalidMime.replace("%s",this.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var i=function(t,e){for(var n=[],i=0;i<t.length;i+=e){for(var r=[],o=0;o<e;o++)r.push(t[i+o]);n.push(r)}return n}(t,this.concurrent),r=function(t){var n=new FormData;for(var o in t.forEach((function(t){return n.append(e.name,t)})),e.params)n.append(o,e.params[o]);pe(e.url,{data:n,method:e.method,responseType:e.type,beforeSend:function(t){var n=t.xhr;n.upload&&Xt(n.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach((function(t){return Xt(n,t.toLowerCase(),e[t])})),e.beforeSend(t)}}).then((function(t){e.complete(t),i.length?r(i.shift()):e.completeAll(t)}),(function(t){return e.error(t)}))};r(i.shift())}}}};function po(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function go(t){t.preventDefault(),t.stopPropagation()}return K(Object.freeze({__proto__:null,Countdown:wr,Filter:$r,Lightbox:Fr,LightboxPanel:Hr,Notification:Vr,Parallax:Yr,Slider:eo,SliderParallax:no,Slideshow:uo,SlideshowParallax:no,Sortable:co,Tooltip:lo,Upload:fo}),(function(t,e){return ti.component(e,t)})),ti}()}))}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlraXQuanMiLCJzb3VyY2VzIjpbInNyYy9qcy91aWtpdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgVUlraXQgMy41LjggfCBodHRwczovL3d3dy5nZXR1aWtpdC5jb20gfCAoYykgMjAxNCAtIDIwMjAgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ3Vpa2l0JywgZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5VSWtpdCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBvYmpQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9ialByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZ1bmN0aW9uIGhhc093bihvYmosIGtleSkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZUNhY2hlID0ge307XG4gICAgdmFyIGh5cGhlbmF0ZVJlID0gLyhbYS16XFxkXSkoW0EtWl0pL2c7XG5cbiAgICBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG5cbiAgICAgICAgaWYgKCEoc3RyIGluIGh5cGhlbmF0ZUNhY2hlKSkge1xuICAgICAgICAgICAgaHlwaGVuYXRlQ2FjaGVbc3RyXSA9IHN0clxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGh5cGhlbmF0ZVJlLCAnJDEtJDInKVxuICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGh5cGhlbmF0ZUNhY2hlW3N0cl07XG4gICAgfVxuXG4gICAgdmFyIGNhbWVsaXplUmUgPSAvLShcXHcpL2c7XG5cbiAgICBmdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUmUsIHRvVXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvVXBwZXIoXywgYykge1xuICAgICAgICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVjZmlyc3Qoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIubGVuZ3RoID8gdG9VcHBlcihudWxsLCBzdHIuY2hhckF0KDApKSArIHN0ci5zbGljZSgxKSA6ICcnO1xuICAgIH1cblxuICAgIHZhciBzdHJQcm90b3R5cGUgPSBTdHJpbmcucHJvdG90eXBlO1xuICAgIHZhciBzdGFydHNXaXRoRm4gPSBzdHJQcm90b3R5cGUuc3RhcnRzV2l0aCB8fCBmdW5jdGlvbiAoc2VhcmNoKSB7IHJldHVybiB0aGlzLmxhc3RJbmRleE9mKHNlYXJjaCwgMCkgPT09IDA7IH07XG5cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoKSB7XG4gICAgICAgIHJldHVybiBzdGFydHNXaXRoRm4uY2FsbChzdHIsIHNlYXJjaCk7XG4gICAgfVxuXG4gICAgdmFyIGVuZHNXaXRoRm4gPSBzdHJQcm90b3R5cGUuZW5kc1dpdGggfHwgZnVuY3Rpb24gKHNlYXJjaCkgeyByZXR1cm4gdGhpcy5zdWJzdHIoLXNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7IH07XG5cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCkge1xuICAgICAgICByZXR1cm4gZW5kc1dpdGhGbi5jYWxsKHN0ciwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyUHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4gICAgdmFyIGluY2x1ZGVzRm4gPSBmdW5jdGlvbiAoc2VhcmNoLCBpKSB7IHJldHVybiAhIX50aGlzLmluZGV4T2Yoc2VhcmNoLCBpKTsgfTtcbiAgICB2YXIgaW5jbHVkZXNTdHIgPSBzdHJQcm90b3R5cGUuaW5jbHVkZXMgfHwgaW5jbHVkZXNGbjtcbiAgICB2YXIgaW5jbHVkZXNBcnJheSA9IGFyclByb3RvdHlwZS5pbmNsdWRlcyB8fCBpbmNsdWRlc0ZuO1xuXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMob2JqLCBzZWFyY2gpIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiAoaXNTdHJpbmcob2JqKSA/IGluY2x1ZGVzU3RyIDogaW5jbHVkZXNBcnJheSkuY2FsbChvYmosIHNlYXJjaCk7XG4gICAgfVxuXG4gICAgdmFyIGZpbmRJbmRleEZuID0gYXJyUHJvdG90eXBlLmZpbmRJbmRleCB8fCBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChhcmd1bWVudHMkMVsxXSwgdGhpc1tpXSwgaSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICAgIHJldHVybiBmaW5kSW5kZXhGbi5jYWxsKGFycmF5LCBwcmVkaWNhdGUpO1xuICAgIH1cblxuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIHZhciB0b1N0cmluZyA9IG9ialByb3RvdHlwZS50b1N0cmluZztcbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqID09PSBvYmoud2luZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRG9jdW1lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA9PT0gOTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0pRdWVyeShvYmopIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgISFvYmouanF1ZXJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTm9kZShvYmopIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLm5vZGVUeXBlID49IDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmoubm9kZVR5cGUgPT09IDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOb2RlQ29sbGVjdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXlxcW29iamVjdCAoTm9kZUxpc3R8SFRNTENvbGxlY3Rpb24pXFxdJC8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1lcmljKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgfHwgaXNTdHJpbmcodmFsdWUpICYmICFpc05hTih2YWx1ZSAtIHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICAgICAgICByZXR1cm4gIShpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gb2JqLmxlbmd0aFxuICAgICAgICAgICAgOiBpc09iamVjdChvYmopXG4gICAgICAgICAgICAgICAgPyBPYmplY3Qua2V5cyhvYmopLmxlbmd0aFxuICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQm9vbGVhbih2YWx1ZSlcbiAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgIDogdmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJzEnIHx8IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgIDogdmFsdWUgPT09ICdmYWxzZScgfHwgdmFsdWUgPT09ICcwJ1xuICAgICAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4obnVtYmVyKSA/IG51bWJlciA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob2RlKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGlzTm9kZShlbGVtZW50KVxuICAgICAgICAgICAgPyBlbGVtZW50XG4gICAgICAgICAgICA6IGlzTm9kZUNvbGxlY3Rpb24oZWxlbWVudCkgfHwgaXNKUXVlcnkoZWxlbWVudClcbiAgICAgICAgICAgICAgICA/IGVsZW1lbnRbMF1cbiAgICAgICAgICAgICAgICA6IGlzQXJyYXkoZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgPyB0b05vZGUoZWxlbWVudFswXSlcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm9kZXMoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaXNOb2RlKGVsZW1lbnQpXG4gICAgICAgICAgICA/IFtlbGVtZW50XVxuICAgICAgICAgICAgOiBpc05vZGVDb2xsZWN0aW9uKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgPyBhcnJQcm90b3R5cGUuc2xpY2UuY2FsbChlbGVtZW50KVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICA/IGVsZW1lbnQubWFwKHRvTm9kZSkuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgICAgIDogaXNKUXVlcnkoZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC50b0FycmF5KClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9XaW5kb3coZWxlbWVudCkge1xuICAgICAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgICAgICAgPyAoaXNEb2N1bWVudChlbGVtZW50KVxuICAgICAgICAgICAgICAgID8gZWxlbWVudFxuICAgICAgICAgICAgICAgIDogZWxlbWVudC5vd25lckRvY3VtZW50XG4gICAgICAgICAgICApLmRlZmF1bHRWaWV3XG4gICAgICAgICAgICA6IHdpbmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0xpc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICA/IHZhbHVlXG4gICAgICAgICAgICA6IGlzU3RyaW5nKHZhbHVlKVxuICAgICAgICAgICAgICAgID8gdmFsdWUuc3BsaXQoLywoPyFbXihdKlxcKSkvKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBpc051bWVyaWModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gdG9OdW1iZXIodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdG9Cb29sZWFuKHZhbHVlLnRyaW0oKSk7IH0pXG4gICAgICAgICAgICAgICAgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTXModGltZSkge1xuICAgICAgICByZXR1cm4gIXRpbWVcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBlbmRzV2l0aCh0aW1lLCAnbXMnKVxuICAgICAgICAgICAgICAgID8gdG9GbG9hdCh0aW1lKVxuICAgICAgICAgICAgICAgIDogdG9GbG9hdCh0aW1lKSAqIDEwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlclxuICAgICAgICAgICAgfHwgaXNPYmplY3QodmFsdWUpXG4gICAgICAgICAgICAmJiBpc09iamVjdChvdGhlcilcbiAgICAgICAgICAgICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGhcbiAgICAgICAgICAgICYmIGVhY2godmFsdWUsIGZ1bmN0aW9uICh2YWwsIGtleSkgeyByZXR1cm4gdmFsID09PSBvdGhlcltrZXldOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzd2FwKHZhbHVlLCBhLCBiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKFxuICAgICAgICAgICAgbmV3IFJlZ0V4cCgoYSArIFwifFwiICsgYiksICdnJyksXG4gICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoID09PSBhID8gYiA6IGE7IH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICAgICAgdGFyZ2V0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICAgICAgICBpZiAoc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlYWNoKG9iaiwgY2IpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGZhbHNlID09PSBjYihvYmpba2V5XSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzb3J0QnkoYXJyYXksIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LnNvcnQoZnVuY3Rpb24gKHJlZiwgcmVmJDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcEEgPSByZWZbcHJvcF07IGlmICggcHJvcEEgPT09IHZvaWQgMCApIHByb3BBID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcEIgPSByZWYkMVtwcm9wXTsgaWYgKCBwcm9wQiA9PT0gdm9pZCAwICkgcHJvcEIgPSAwO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BBID4gcHJvcEJcbiAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICA6IHByb3BCID4gcHJvcEFcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmlxdWVCeShhcnJheSwgcHJvcCkge1xuICAgICAgICB2YXIgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICB2YXIgY2hlY2sgPSByZWZbcHJvcF07XG5cbiAgICAgICAgICAgIHJldHVybiBzZWVuLmhhcyhjaGVjaylcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogc2Vlbi5hZGQoY2hlY2spIHx8IHRydWU7XG4gICAgICAgIH0gLy8gSUUgMTEgZG9lcyBub3QgcmV0dXJuIHRoZSBTZXQgb2JqZWN0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBtaW4sIG1heCkge1xuICAgICAgICBpZiAoIG1pbiA9PT0gdm9pZCAwICkgbWluID0gMDtcbiAgICAgICAgaWYgKCBtYXggPT09IHZvaWQgMCApIG1heCA9IDE7XG5cbiAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHRvTnVtYmVyKG51bWJlcikgfHwgMCwgbWluKSwgbWF4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub29wKCkge31cblxuICAgIGZ1bmN0aW9uIGludGVyc2VjdFJlY3QocjEsIHIyKSB7XG4gICAgICAgIHJldHVybiByMS5sZWZ0IDwgcjIucmlnaHQgJiZcbiAgICAgICAgICAgIHIxLnJpZ2h0ID4gcjIubGVmdCAmJlxuICAgICAgICAgICAgcjEudG9wIDwgcjIuYm90dG9tICYmXG4gICAgICAgICAgICByMS5ib3R0b20gPiByMi50b3A7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRJblJlY3QocG9pbnQsIHJlY3QpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50LnggPD0gcmVjdC5yaWdodCAmJlxuICAgICAgICAgICAgcG9pbnQueCA+PSByZWN0LmxlZnQgJiZcbiAgICAgICAgICAgIHBvaW50LnkgPD0gcmVjdC5ib3R0b20gJiZcbiAgICAgICAgICAgIHBvaW50LnkgPj0gcmVjdC50b3A7XG4gICAgfVxuXG4gICAgdmFyIERpbWVuc2lvbnMgPSB7XG5cbiAgICAgICAgcmF0aW86IGZ1bmN0aW9uKGRpbWVuc2lvbnMsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2JqO1xuXG5cbiAgICAgICAgICAgIHZhciBhUHJvcCA9IHByb3AgPT09ICd3aWR0aCcgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICAgICAgICAgIHJldHVybiAoIG9iaiA9IHt9LCBvYmpbYVByb3BdID0gZGltZW5zaW9uc1twcm9wXSA/IE1hdGgucm91bmQodmFsdWUgKiBkaW1lbnNpb25zW2FQcm9wXSAvIGRpbWVuc2lvbnNbcHJvcF0pIDogZGltZW5zaW9uc1thUHJvcF0sIG9ialtwcm9wXSA9IHZhbHVlLCBvYmogKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb250YWluOiBmdW5jdGlvbihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IGFzc2lnbih7fSwgZGltZW5zaW9ucyk7XG5cbiAgICAgICAgICAgIGVhY2goZGltZW5zaW9ucywgZnVuY3Rpb24gKF8sIHByb3ApIHsgcmV0dXJuIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zW3Byb3BdID4gbWF4RGltZW5zaW9uc1twcm9wXVxuICAgICAgICAgICAgICAgID8gdGhpcyQxLnJhdGlvKGRpbWVuc2lvbnMsIHByb3AsIG1heERpbWVuc2lvbnNbcHJvcF0pXG4gICAgICAgICAgICAgICAgOiBkaW1lbnNpb25zOyB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgICAgICAgfSxcblxuICAgICAgICBjb3ZlcjogZnVuY3Rpb24oZGltZW5zaW9ucywgbWF4RGltZW5zaW9ucykge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLmNvbnRhaW4oZGltZW5zaW9ucywgbWF4RGltZW5zaW9ucyk7XG5cbiAgICAgICAgICAgIGVhY2goZGltZW5zaW9ucywgZnVuY3Rpb24gKF8sIHByb3ApIHsgcmV0dXJuIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zW3Byb3BdIDwgbWF4RGltZW5zaW9uc1twcm9wXVxuICAgICAgICAgICAgICAgID8gdGhpcyQxLnJhdGlvKGRpbWVuc2lvbnMsIHByb3AsIG1heERpbWVuc2lvbnNbcHJvcF0pXG4gICAgICAgICAgICAgICAgOiBkaW1lbnNpb25zOyB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGF0dHIoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcblxuICAgICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICAgICAgICAgICAgYXR0cihlbGVtZW50LCBrZXksIG5hbWVba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b05vZGVzKGVsZW1lbnQpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwoZWxlbWVudCwgYXR0cihlbGVtZW50LCBuYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWxlbWVudCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBdHRyKGVsZW1lbnQsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRvTm9kZXMoZWxlbWVudCkuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUF0dHIoZWxlbWVudCwgbmFtZSkge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlcyhlbGVtZW50KTtcbiAgICAgICAgbmFtZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7IH1cbiAgICAgICAgICAgICk7IH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXRhKGVsZW1lbnQsIGF0dHJpYnV0ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgYXR0cnMgPSBbYXR0cmlidXRlLCAoXCJkYXRhLVwiICsgYXR0cmlidXRlKV07IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0F0dHIoZWxlbWVudCwgYXR0cnNbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0dHIoZWxlbWVudCwgYXR0cnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyogZ2xvYmFsIERvY3VtZW50VG91Y2ggKi9cblxuICAgIHZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgICB2YXIgaXNJRSA9IGluQnJvd3NlciAmJiAvbXNpZXx0cmlkZW50L2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIGlzUnRsID0gaW5Ccm93c2VyICYmIGF0dHIoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnZGlyJykgPT09ICdydGwnO1xuXG4gICAgdmFyIGhhc1RvdWNoRXZlbnRzID0gaW5Ccm93c2VyICYmICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbiAgICB2YXIgaGFzUG9pbnRlckV2ZW50cyA9IGluQnJvd3NlciAmJiB3aW5kb3cuUG9pbnRlckV2ZW50O1xuICAgIHZhciBoYXNUb3VjaCA9IGluQnJvd3NlciAmJiAoaGFzVG91Y2hFdmVudHNcbiAgICAgICAgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoXG4gICAgICAgIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyk7IC8vIElFID49MTFcblxuICAgIHZhciBwb2ludGVyRG93biA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmRvd24nIDogaGFzVG91Y2hFdmVudHMgPyAndG91Y2hzdGFydCcgOiAnbW91c2Vkb3duJztcbiAgICB2YXIgcG9pbnRlck1vdmUgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJtb3ZlJyA6IGhhc1RvdWNoRXZlbnRzID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJztcbiAgICB2YXIgcG9pbnRlclVwID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVydXAnIDogaGFzVG91Y2hFdmVudHMgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnO1xuICAgIHZhciBwb2ludGVyRW50ZXIgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJlbnRlcicgOiBoYXNUb3VjaEV2ZW50cyA/ICcnIDogJ21vdXNlZW50ZXInO1xuICAgIHZhciBwb2ludGVyTGVhdmUgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJsZWF2ZScgOiBoYXNUb3VjaEV2ZW50cyA/ICcnIDogJ21vdXNlbGVhdmUnO1xuICAgIHZhciBwb2ludGVyQ2FuY2VsID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyY2FuY2VsJyA6ICd0b3VjaGNhbmNlbCc7XG5cbiAgICBmdW5jdGlvbiBxdWVyeShzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlKHNlbGVjdG9yKSB8fCBmaW5kKHNlbGVjdG9yLCBnZXRDb250ZXh0KHNlbGVjdG9yLCBjb250ZXh0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gdG9Ob2RlcyhzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBub2Rlcy5sZW5ndGggJiYgbm9kZXMgfHwgZmluZEFsbChzZWxlY3RvciwgZ2V0Q29udGV4dChzZWxlY3RvciwgY29udGV4dCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbnRleHQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCBjb250ZXh0ID09PSB2b2lkIDAgKSBjb250ZXh0ID0gZG9jdW1lbnQ7XG5cbiAgICAgICAgcmV0dXJuIGlzQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSB8fCBpc0RvY3VtZW50KGNvbnRleHQpXG4gICAgICAgICAgICA/IGNvbnRleHRcbiAgICAgICAgICAgIDogY29udGV4dC5vd25lckRvY3VtZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRvTm9kZShfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQsICdxdWVyeVNlbGVjdG9yJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRBbGwoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRvTm9kZXMoX3F1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0LCAncXVlcnlTZWxlY3RvckFsbCcpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQsIHF1ZXJ5Rm4pIHtcbiAgICAgICAgaWYgKCBjb250ZXh0ID09PSB2b2lkIDAgKSBjb250ZXh0ID0gZG9jdW1lbnQ7XG5cblxuICAgICAgICBpZiAoIXNlbGVjdG9yIHx8ICFpc1N0cmluZyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKGNvbnRleHRTYW5pdGl6ZVJlLCAnJDEgKicpO1xuXG4gICAgICAgIHZhciByZW1vdmVzO1xuXG4gICAgICAgIGlmIChpc0NvbnRleHRTZWxlY3RvcihzZWxlY3RvcikpIHtcblxuICAgICAgICAgICAgcmVtb3ZlcyA9IFtdO1xuXG4gICAgICAgICAgICBzZWxlY3RvciA9IHNwbGl0U2VsZWN0b3Ioc2VsZWN0b3IpLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IsIGkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdHggPSBjb250ZXh0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yWzBdID09PSAnIScpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JzID0gc2VsZWN0b3Iuc3Vic3RyKDEpLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICBjdHggPSBjbG9zZXN0KHBhcmVudChjb250ZXh0KSwgc2VsZWN0b3JzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMuc2xpY2UoMSkuam9pbignICcpLnRyaW0oKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvclswXSA9PT0gJy0nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9ycyQxID0gc2VsZWN0b3Iuc3Vic3RyKDEpLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldiA9IChjdHggfHwgY29udGV4dCkucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gbWF0Y2hlcyhwcmV2LCBzZWxlY3Rvci5zdWJzdHIoMSkpID8gcHJldiA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3JzJDEuc2xpY2UoMSkuam9pbignICcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjdHguaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmlkID0gXCJ1ay1cIiArIChEYXRlLm5vdygpKSArIGk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZXMucHVzaChmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmVBdHRyKGN0eCwgJ2lkJyk7IH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCIjXCIgKyAoZXNjYXBlKGN0eC5pZCkpICsgXCIgXCIgKyBzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKS5qb2luKCcsJyk7XG5cbiAgICAgICAgICAgIGNvbnRleHQgPSBkb2N1bWVudDtcblxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRbcXVlcnlGbl0oc2VsZWN0b3IpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgfSBmaW5hbGx5IHtcblxuICAgICAgICAgICAgcmVtb3ZlcyAmJiByZW1vdmVzLmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZSkgeyByZXR1cm4gcmVtb3ZlKCk7IH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBjb250ZXh0U2VsZWN0b3JSZSA9IC8oXnxbXlxcXFxdLClcXHMqWyE+K34tXS87XG4gICAgdmFyIGNvbnRleHRTYW5pdGl6ZVJlID0gLyhbIT4rfi1dKSg/PVxccytbIT4rfi1dfFxccyokKS9nO1xuXG4gICAgZnVuY3Rpb24gaXNDb250ZXh0U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5tYXRjaChjb250ZXh0U2VsZWN0b3JSZSk7XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdG9yUmUgPSAvLio/W15cXFxcXSg/Oix8JCkvZztcblxuICAgIGZ1bmN0aW9uIHNwbGl0U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLm1hdGNoKHNlbGVjdG9yUmUpLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHsgcmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoLywkLywgJycpLnRyaW0oKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGVsUHJvdG8gPSBpbkJyb3dzZXIgPyBFbGVtZW50LnByb3RvdHlwZSA6IHt9O1xuICAgIHZhciBtYXRjaGVzRm4gPSBlbFByb3RvLm1hdGNoZXMgfHwgZWxQcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWxQcm90by5tc01hdGNoZXNTZWxlY3RvciB8fCBub29wO1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBtYXRjaGVzRm4uY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7IH0pO1xuICAgIH1cblxuICAgIHZhciBjbG9zZXN0Rm4gPSBlbFByb3RvLmNsb3Nlc3QgfHwgZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBhbmNlc3RvciA9IHRoaXM7XG5cbiAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlcyhhbmNlc3Rvciwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuY2VzdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKChhbmNlc3RvciA9IHBhcmVudChhbmNlc3RvcikpKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xuXG4gICAgICAgIGlmIChzdGFydHNXaXRoKHNlbGVjdG9yLCAnPicpKSB7XG4gICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzRWxlbWVudChlbGVtZW50KVxuICAgICAgICAgICAgPyBjbG9zZXN0Rm4uY2FsbChlbGVtZW50LCBzZWxlY3RvcilcbiAgICAgICAgICAgIDogdG9Ob2RlcyhlbGVtZW50KS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGNsb3Nlc3QoZWxlbWVudCwgc2VsZWN0b3IpOyB9KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50KGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgaXNFbGVtZW50KGVsZW1lbnQucGFyZW50Tm9kZSkgJiYgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHZhciBlc2NhcGVGbiA9IGluQnJvd3NlciAmJiB3aW5kb3cuQ1NTICYmIENTUy5lc2NhcGUgfHwgZnVuY3Rpb24gKGNzcykgeyByZXR1cm4gY3NzLnJlcGxhY2UoLyhbXlxceDdmLVxcdUZGRkZcXHctXSkvZywgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiAoXCJcXFxcXCIgKyBtYXRjaCk7IH0pOyB9O1xuICAgIGZ1bmN0aW9uIGVzY2FwZShjc3MpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNzcykgPyBlc2NhcGVGbi5jYWxsKG51bGwsIGNzcykgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgdm9pZEVsZW1lbnRzID0ge1xuICAgICAgICBhcmVhOiB0cnVlLFxuICAgICAgICBiYXNlOiB0cnVlLFxuICAgICAgICBicjogdHJ1ZSxcbiAgICAgICAgY29sOiB0cnVlLFxuICAgICAgICBlbWJlZDogdHJ1ZSxcbiAgICAgICAgaHI6IHRydWUsXG4gICAgICAgIGltZzogdHJ1ZSxcbiAgICAgICAgaW5wdXQ6IHRydWUsXG4gICAgICAgIGtleWdlbjogdHJ1ZSxcbiAgICAgICAgbGluazogdHJ1ZSxcbiAgICAgICAgbWVudWl0ZW06IHRydWUsXG4gICAgICAgIG1ldGE6IHRydWUsXG4gICAgICAgIHBhcmFtOiB0cnVlLFxuICAgICAgICBzb3VyY2U6IHRydWUsXG4gICAgICAgIHRyYWNrOiB0cnVlLFxuICAgICAgICB3YnI6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGlzVm9pZEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiB2b2lkRWxlbWVudHNbZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCldOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Zpc2libGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IGVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg7IH0pO1xuICAgIH1cblxuICAgIHZhciBzZWxJbnB1dCA9ICdpbnB1dCxzZWxlY3QsdGV4dGFyZWEsYnV0dG9uJztcbiAgICBmdW5jdGlvbiBpc0lucHV0KGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRvTm9kZXMoZWxlbWVudCkuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbWF0Y2hlcyhlbGVtZW50LCBzZWxJbnB1dCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlcihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3aXRoaW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuICFpc1N0cmluZyhzZWxlY3RvcilcbiAgICAgICAgICAgID8gZWxlbWVudCA9PT0gc2VsZWN0b3IgfHwgKGlzRG9jdW1lbnQoc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgPyBzZWxlY3Rvci5kb2N1bWVudEVsZW1lbnRcbiAgICAgICAgICAgICAgICA6IHRvTm9kZShzZWxlY3RvcikpLmNvbnRhaW5zKHRvTm9kZShlbGVtZW50KSkgLy8gSUUgMTEgZG9jdW1lbnQgZG9lcyBub3QgaW1wbGVtZW50IGNvbnRhaW5zXG4gICAgICAgICAgICA6IG1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpIHx8ICEhY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50cyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcblxuICAgICAgICB3aGlsZSAoKGVsZW1lbnQgPSBwYXJlbnQoZWxlbWVudCkpKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50ID8gdG9Ob2RlcyhlbGVtZW50LmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyBmaWx0ZXIoY2hpbGRyZW4sIHNlbGVjdG9yKSA6IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciB0YXJnZXRzID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuXG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBkZXRhaWwobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUNhcHR1cmUgJiYgdXNlQ2FwdHVyZS5zZWxmKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IHNlbGZGaWx0ZXIobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGRlbGVnYXRlKHRhcmdldHMsIHNlbGVjdG9yLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZUZpbHRlcih1c2VDYXB0dXJlKTtcblxuICAgICAgICB0eXBlLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gb2ZmKHRhcmdldHMsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmYodGFyZ2V0cywgdHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKCB1c2VDYXB0dXJlID09PSB2b2lkIDAgKSB1c2VDYXB0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgdXNlQ2FwdHVyZSA9IHVzZUNhcHR1cmVGaWx0ZXIodXNlQ2FwdHVyZSk7XG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcbiAgICAgICAgdHlwZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7IH1cbiAgICAgICAgICAgICk7IH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmNlKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuICAgICAgICB2YXIgY29uZGl0aW9uID0gcmVmWzVdO1xuICAgICAgICB2YXIgb2ZmID0gb24oZWxlbWVudCwgdHlwZSwgc2VsZWN0b3IsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gIWNvbmRpdGlvbiB8fCBjb25kaXRpb24oZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb2ZmKCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG5cbiAgICAgICAgcmV0dXJuIG9mZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKHRhcmdldHMsIGV2ZW50LCBkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIHRvRXZlbnRUYXJnZXRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAobm90Q2FuY2VsZWQsIHRhcmdldCkgeyByZXR1cm4gbm90Q2FuY2VsZWQgJiYgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoZXZlbnQsIHRydWUsIHRydWUsIGRldGFpbCkpOyB9XG4gICAgICAgICAgICAsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCkge1xuICAgICAgICBpZiAoIGJ1YmJsZXMgPT09IHZvaWQgMCApIGJ1YmJsZXMgPSB0cnVlO1xuICAgICAgICBpZiAoIGNhbmNlbGFibGUgPT09IHZvaWQgMCApIGNhbmNlbGFibGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcoZSkpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpOyAvLyBJRSAxMVxuICAgICAgICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgICAgICAgICBlID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBcmdzKGFyZ3MpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnc1syXSkpIHtcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKDIsIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxlZ2F0ZShkZWxlZ2F0ZXMsIHNlbGVjdG9yLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZGVsZWdhdGVzLmZvckVhY2goZnVuY3Rpb24gKGRlbGVnYXRlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGVjdG9yWzBdID09PSAnPidcbiAgICAgICAgICAgICAgICAgICAgPyBmaW5kQWxsKHNlbGVjdG9yLCBkZWxlZ2F0ZSkucmV2ZXJzZSgpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKGUudGFyZ2V0LCBlbGVtZW50KTsgfSlbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBjbG9zZXN0KGUudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgICAgICAgICAgICAgIGUuY3VycmVudCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzJDEsIGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRhaWwobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBpc0FycmF5KGUuZGV0YWlsKSA/IGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgWyBlIF0uY29uY2F0KCBlLmRldGFpbCApKSA6IGxpc3RlbmVyKGUpOyB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGZGaWx0ZXIobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldCA9PT0gZS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyLmNhbGwobnVsbCwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlQ2FwdHVyZUZpbHRlcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIGlzSUUgJiYgIWlzQm9vbGVhbihvcHRpb25zKVxuICAgICAgICAgICAgPyAhIW9wdGlvbnMuY2FwdHVyZVxuICAgICAgICAgICAgOiBvcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQgJiYgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaXNFdmVudFRhcmdldCh0YXJnZXQpID8gdGFyZ2V0IDogdG9Ob2RlKHRhcmdldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9FdmVudFRhcmdldHModGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRhcmdldClcbiAgICAgICAgICAgICAgICA/IHRhcmdldC5tYXAodG9FdmVudFRhcmdldCkuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgOiBpc1N0cmluZyh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8gZmluZEFsbCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIDogaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFt0YXJnZXRdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRvTm9kZXModGFyZ2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1RvdWNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgfHwgISFlLnRvdWNoZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRQb3MoZSkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgdmFyIHJlZiA9IHRvdWNoZXMgJiYgdG91Y2hlc1swXSB8fCBjaGFuZ2VkVG91Y2hlcyAmJiBjaGFuZ2VkVG91Y2hlc1swXSB8fCBlO1xuICAgICAgICB2YXIgeCA9IHJlZi5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IHJlZi5jbGllbnRZO1xuXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgLyogZ2xvYmFsIHNldEltbWVkaWF0ZSAqL1xuXG4gICAgdmFyIFByb21pc2UgPSBpbkJyb3dzZXIgJiYgd2luZG93LlByb21pc2UgfHwgUHJvbWlzZUZuO1xuXG4gICAgdmFyIERlZmVycmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICB0aGlzJDEucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcm9taXNlcy9BKyBwb2x5ZmlsbCB2MS4xLjQgKGh0dHBzOi8vZ2l0aHViLmNvbS9icmFtc3RlaW4vcHJvbWlzKVxuICAgICAqL1xuXG4gICAgdmFyIFJFU09MVkVEID0gMDtcbiAgICB2YXIgUkVKRUNURUQgPSAxO1xuICAgIHZhciBQRU5ESU5HID0gMjtcblxuICAgIHZhciBhc3luYyA9IGluQnJvd3NlciAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlIHx8IHNldFRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBQcm9taXNlRm4oZXhlY3V0b3IpIHtcblxuICAgICAgICB0aGlzLnN0YXRlID0gUEVORElORztcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IFtdO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0b3IoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcm9taXNlRm4ucmVqZWN0ID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLnJlc29sdmUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXNvbHZlKHgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLmFsbCA9IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBpZiAoaXRlcmFibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlcihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmFibGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlRm4ucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlcihpKSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByb21pc2VGbi5yYWNlID0gZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUZuLnJlc29sdmUoaXRlcmFibGVbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwID0gUHJvbWlzZUZuLnByb3RvdHlwZTtcblxuICAgIHAucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoZW4gPSB4ICYmIHgudGhlbjtcblxuICAgICAgICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmIGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhlbi5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvbWlzZS5zdGF0ZSA9IFJFU09MVkVEO1xuICAgICAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHg7XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAucmVqZWN0ID0gZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmIChyZWFzb24gPT09IHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIHNldHRsZWQgd2l0aCBpdHNlbGYuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb21pc2Uuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgICAgICAgICAgIHByb21pc2UudmFsdWUgPSByZWFzb247XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBhc3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMkMS5kZWZlcnJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMS5kZWZlcnJlZC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25SZXNvbHZlZCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uUmVqZWN0ZWQgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlID0gcmVmWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVqZWN0ID0gcmVmWzNdO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlID09PSBSRVNPTFZFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZXNvbHZlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzJDEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcyQxLnN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVqZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZWplY3RlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMkMS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdGhpcyQxLmRlZmVycmVkLnB1c2goW29uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQsIHJlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgICAgdGhpcyQxLm5vdGlmeSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcC5jYXRjaCA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWpheCh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgdmFyIGVudiA9IGFzc2lnbih7XG4gICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgICAgIHhocjogbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogbm9vcCxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICcnXG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgZW52LmJlZm9yZVNlbmQoZW52KTtcblxuICAgICAgICAgICAgdmFyIHhociA9IGVudi54aHI7XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZW52KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhocltwcm9wXSA9IGVudltwcm9wXTtcblxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeGhyLm9wZW4oZW52Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gZW52LmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGVudi5oZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvbih4aHIsICdsb2FkJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDAgfHwgeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCB8fCB4aHIuc3RhdHVzID09PSAzMDQpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJRSAxMSBkb2VzIG5vdCBzdXBwb3J0IHJlc3BvbnNlVHlwZSAnanNvbidcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudi5yZXNwb25zZVR5cGUgPT09ICdqc29uJyAmJiBpc1N0cmluZyh4aHIucmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIgPSBhc3NpZ24oY29weVhocih4aHIpLCB7cmVzcG9uc2U6IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKX0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGFzc2lnbihFcnJvcih4aHIuc3RhdHVzVGV4dCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhocjogeGhyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvbih4aHIsICdlcnJvcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdChhc3NpZ24oRXJyb3IoJ05ldHdvcmsgRXJyb3InKSwge3hocjogeGhyfSkpOyB9KTtcbiAgICAgICAgICAgIG9uKHhociwgJ3RpbWVvdXQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoYXNzaWduKEVycm9yKCdOZXR3b3JrIFRpbWVvdXQnKSwge3hocjogeGhyfSkpOyB9KTtcblxuICAgICAgICAgICAgeGhyLnNlbmQoZW52LmRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbWFnZShzcmMsIHNyY3NldCwgc2l6ZXMpIHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiByZWplY3QoZSk7IH07XG4gICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZShpbWcpOyB9O1xuXG4gICAgICAgICAgICBzaXplcyAmJiAoaW1nLnNpemVzID0gc2l6ZXMpO1xuICAgICAgICAgICAgc3Jjc2V0ICYmIChpbWcuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29weVhocihzb3VyY2UpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZHkoZm4pIHtcblxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuYmluZCA9IG9uKGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVuYmluZCgpO1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5kZXgoZWxlbWVudCwgcmVmKSB7XG4gICAgICAgIHJldHVybiByZWZcbiAgICAgICAgICAgID8gdG9Ob2RlcyhlbGVtZW50KS5pbmRleE9mKHRvTm9kZShyZWYpKVxuICAgICAgICAgICAgOiBjaGlsZHJlbihwYXJlbnQoZWxlbWVudCkpLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW5kZXgoaSwgZWxlbWVudHMsIGN1cnJlbnQsIGZpbml0ZSkge1xuICAgICAgICBpZiAoIGN1cnJlbnQgPT09IHZvaWQgMCApIGN1cnJlbnQgPSAwO1xuICAgICAgICBpZiAoIGZpbml0ZSA9PT0gdm9pZCAwICkgZmluaXRlID0gZmFsc2U7XG5cblxuICAgICAgICBlbGVtZW50cyA9IHRvTm9kZXMoZWxlbWVudHMpO1xuXG4gICAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaSA9IGlzTnVtZXJpYyhpKVxuICAgICAgICAgICAgPyB0b051bWJlcihpKVxuICAgICAgICAgICAgOiBpID09PSAnbmV4dCdcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQgKyAxXG4gICAgICAgICAgICAgICAgOiBpID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudCAtIDFcbiAgICAgICAgICAgICAgICAgICAgOiBpbmRleChlbGVtZW50cywgaSk7XG5cbiAgICAgICAgaWYgKGZpbml0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNsYW1wKGksIDAsIGxlbmd0aCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaSAlPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGkgPCAwID8gaSArIGxlbmd0aCA6IGk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1wdHkoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHRtbChwYXJlbnQsIGh0bWwpIHtcbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoaHRtbClcbiAgICAgICAgICAgID8gcGFyZW50LmlubmVySFRNTFxuICAgICAgICAgICAgOiBhcHBlbmQocGFyZW50Lmhhc0NoaWxkTm9kZXMoKSA/IGVtcHR5KHBhcmVudCkgOiBwYXJlbnQsIGh0bWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBlbmQocGFyZW50LCBlbGVtZW50KSB7XG5cbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuXG4gICAgICAgIGlmICghcGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGVuZChwYXJlbnQsIGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHBhcmVudC5maXJzdENoaWxkKTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQocGFyZW50KTtcbiAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZm9yZShyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCByZWYpOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZnRlcihyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5uZXh0U2libGluZ1xuICAgICAgICAgICAgPyBiZWZvcmUocmVmLm5leHRTaWJsaW5nLCBlbGVtZW50KVxuICAgICAgICAgICAgOiBhcHBlbmQocmVmLnBhcmVudE5vZGUsIGVsZW1lbnQpOyB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGlzU3RyaW5nKGVsZW1lbnQpID8gZnJhZ21lbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgICAgICAgPyAnbGVuZ3RoJyBpbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGVsZW1lbnQpLm1hcChmbilcbiAgICAgICAgICAgICAgICA6IGZuKGVsZW1lbnQpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgdG9Ob2RlcyhlbGVtZW50KS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBBbGwoZWxlbWVudCwgc3RydWN0dXJlKSB7XG5cbiAgICAgICAgc3RydWN0dXJlID0gdG9Ob2RlKGJlZm9yZShlbGVtZW50LCBzdHJ1Y3R1cmUpKTtcblxuICAgICAgICB3aGlsZSAoc3RydWN0dXJlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHN0cnVjdHVyZSA9IHN0cnVjdHVyZS5maXJzdENoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwZW5kKHN0cnVjdHVyZSwgZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwSW5uZXIoZWxlbWVudCwgc3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0NoaWxkTm9kZXMgPyB3cmFwQWxsKHRvTm9kZXMoZWxlbWVudC5jaGlsZE5vZGVzKSwgc3RydWN0dXJlKSA6IGFwcGVuZChlbGVtZW50LCBzdHJ1Y3R1cmUpOyB9XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcChlbGVtZW50KSB7XG4gICAgICAgIHRvTm9kZXMoZWxlbWVudClcbiAgICAgICAgICAgIC5tYXAocGFyZW50KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDsgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUocGFyZW50LCBwYXJlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHBhcmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnRSZSA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi87XG4gICAgdmFyIHNpbmdsZVRhZ1JlID0gL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT4pPyQvO1xuXG4gICAgZnVuY3Rpb24gZnJhZ21lbnQoaHRtbCkge1xuXG4gICAgICAgIHZhciBtYXRjaGVzID0gc2luZ2xlVGFnUmUuZXhlYyhodG1sKTtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG1hdGNoZXNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpZiAoZnJhZ21lbnRSZS50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sLnRyaW0oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIudGV4dENvbnRlbnQgPSBodG1sO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA+IDEgPyB0b05vZGVzKGNvbnRhaW5lci5jaGlsZE5vZGVzKSA6IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkobm9kZSwgZm4pIHtcblxuICAgICAgICBpZiAoIWlzRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm4obm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGFwcGx5KG5vZGUsIGZuKTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGUoc2VsZWN0b3IpXG4gICAgICAgICAgICA6IGlzSHRtbChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IHRvTm9kZShmcmFnbWVudChzZWxlY3RvcikpXG4gICAgICAgICAgICAgICAgOiBmaW5kKHNlbGVjdG9yLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGVzKHNlbGVjdG9yKVxuICAgICAgICAgICAgOiBpc0h0bWwoc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGZyYWdtZW50KHNlbGVjdG9yKSlcbiAgICAgICAgICAgICAgICA6IGZpbmRBbGwoc2VsZWN0b3IsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSHRtbChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0clswXSA9PT0gJzwnIHx8IHN0ci5tYXRjaCgvXlxccyo8Lyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgIGFwcGx5JDEoZWxlbWVudCwgYXJncywgJ2FkZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcHBseSQxKGVsZW1lbnQsIGFyZ3MsICdyZW1vdmUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnQsIGNscykge1xuICAgICAgICBhdHRyKGVsZW1lbnQsICdjbGFzcycsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlIHx8ICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoKFwiXFxcXGJcIiArIGNscyArIFwiXFxcXGJcIiksICdnJyksICcnKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcmdzWzBdICYmIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGFyZ3NbMF0pO1xuICAgICAgICBhcmdzWzFdICYmIGFkZENsYXNzKGVsZW1lbnQsIGFyZ3NbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNscykge1xuICAgICAgICByZXR1cm4gY2xzICYmIHRvTm9kZXMoZWxlbWVudCkuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xzLnNwbGl0KCcgJylbMF0pOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblxuICAgICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gZ2V0QXJncyQxKGFyZ3MpO1xuXG4gICAgICAgIHZhciBmb3JjZSA9ICFpc1N0cmluZyhsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiBbXTsgLy8gaW4gaU9TIDkuMyBmb3JjZSA9PT0gdW5kZWZpbmVkIGV2YWx1YXRlcyB0byBmYWxzZVxuXG4gICAgICAgIGFyZ3MgPSBhcmdzLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICB0b05vZGVzKGVsZW1lbnQpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzLkZvcmNlXG4gICAgICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0LnRvZ2dsZS5hcHBseShjbGFzc0xpc3QsIFthcmdzW2ldXS5jb25jYXQoZm9yY2UpKVxuICAgICAgICAgICAgICAgICAgICA6IChjbGFzc0xpc3RbKCFpc1VuZGVmaW5lZChmb3JjZSkgPyBmb3JjZSA6ICFjbGFzc0xpc3QuY29udGFpbnMoYXJnc1tpXSkpID8gJ2FkZCcgOiAncmVtb3ZlJ10oYXJnc1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5JDEoZWxlbWVudCwgYXJncywgZm4pIHtcbiAgICAgICAgYXJncyA9IGdldEFyZ3MkMShhcmdzKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgYXJncy5sZW5ndGggJiYgdG9Ob2RlcyhlbGVtZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc0xpc3QgPSByZWYuY2xhc3NMaXN0O1xuXG4gICAgICAgICAgICBzdXBwb3J0cy5NdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0W2ZuXS5hcHBseShjbGFzc0xpc3QsIGFyZ3MpXG4gICAgICAgICAgICAgICAgOiBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZXR1cm4gY2xhc3NMaXN0W2ZuXShjbHMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXJncyQxKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhcmdzLCBhcmcpIHsgcmV0dXJuIGFyZ3MuY29uY2F0LmNhbGwoYXJncywgaXNTdHJpbmcoYXJnKSAmJiBpbmNsdWRlcyhhcmcsICcgJykgPyBhcmcudHJpbSgpLnNwbGl0KCcgJykgOiBhcmcpOyB9XG4gICAgICAgICAgICAsIFtdKTtcbiAgICB9XG5cbiAgICAvLyBJRSAxMVxuICAgIHZhciBzdXBwb3J0cyA9IHtcblxuICAgICAgICBnZXQgTXVsdGlwbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ19tdWx0aXBsZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBGb3JjZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCgnX2ZvcmNlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcblxuICAgICAgICAgICAgaWYgKCFoYXNPd24odGhpcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdfJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnYScsICdiJyk7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LnRvZ2dsZSgnYycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tdWx0aXBsZSA9IGNsYXNzTGlzdC5jb250YWlucygnYicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvcmNlID0gIWNsYXNzTGlzdC5jb250YWlucygnYycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGNzc051bWJlciA9IHtcbiAgICAgICAgJ2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQnOiB0cnVlLFxuICAgICAgICAnY29sdW1uLWNvdW50JzogdHJ1ZSxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdmbGV4LWdyb3cnOiB0cnVlLFxuICAgICAgICAnZmxleC1zaHJpbmsnOiB0cnVlLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiB0cnVlLFxuICAgICAgICAnbGluZS1oZWlnaHQnOiB0cnVlLFxuICAgICAgICAnb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdvcmRlcic6IHRydWUsXG4gICAgICAgICdvcnBoYW5zJzogdHJ1ZSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiB0cnVlLFxuICAgICAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiB0cnVlLFxuICAgICAgICAnd2lkb3dzJzogdHJ1ZSxcbiAgICAgICAgJ3otaW5kZXgnOiB0cnVlLFxuICAgICAgICAnem9vbSc6IHRydWVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkge1xuXG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcocHJvcGVydHkpKSB7XG5cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BOYW1lKHByb3BlcnR5KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiAhaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gaXNOdW1lcmljKHZhbHVlKSAmJiAhY3NzTnVtYmVyW3Byb3BlcnR5XSA/ICh2YWx1ZSArIFwicHhcIikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShwcm9wZXJ0eSkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHNbcHJvcGVydHldID0gc3R5bGVzW3Byb3BOYW1lKHByb3BlcnR5KV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgZWFjaChwcm9wZXJ0eSwgZnVuY3Rpb24gKHZhbHVlLCBwcm9wZXJ0eSkgeyByZXR1cm4gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcblxuICAgICAgICB9KVswXTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0eWxlcyhlbGVtZW50LCBwc2V1ZG9FbHQpIHtcbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHksIHBzZXVkb0VsdCkge1xuICAgICAgICByZXR1cm4gZ2V0U3R5bGVzKGVsZW1lbnQsIHBzZXVkb0VsdClbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHZhciB2YXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRDc3NWYXIobmFtZSkge1xuXG4gICAgICAgIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBpZiAoIWlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRTdHlsZXMoZG9jRWwpLmdldFByb3BlcnR5VmFsdWUoKFwiLS11ay1cIiArIG5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKG5hbWUgaW4gdmFycykpIHtcblxuICAgICAgICAgICAgLyogdXNhZ2UgaW4gY3NzOiAudWstbmFtZTpiZWZvcmUgeyBjb250ZW50OlwieHl6XCIgfSAqL1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFwcGVuZChkb2NFbCwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAoXCJ1ay1cIiArIG5hbWUpKTtcblxuICAgICAgICAgICAgdmFyc1tuYW1lXSA9IGdldFN0eWxlKGVsZW1lbnQsICdjb250ZW50JywgJzpiZWZvcmUnKS5yZXBsYWNlKC9eW1wiJ10oLiopW1wiJ10kLywgJyQxJyk7XG5cbiAgICAgICAgICAgIHJlbW92ZShlbGVtZW50KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhcnNbbmFtZV07XG5cbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICB2YXIgcmV0ID0gY3NzUHJvcHNbbmFtZV07XG4gICAgICAgIGlmICghcmV0KSB7XG4gICAgICAgICAgICByZXQgPSBjc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJlZml4ZXMgPSBbJ3dlYmtpdCcsICdtb3onLCAnbXMnXTtcblxuICAgIGZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICBuYW1lID0gaHlwaGVuYXRlKG5hbWUpO1xuXG4gICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTtcblxuICAgICAgICBpZiAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IGNzc1ByZWZpeGVzLmxlbmd0aCwgcHJlZml4ZWROYW1lO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHByZWZpeGVkTmFtZSA9IFwiLVwiICsgKGNzc1ByZWZpeGVzW2ldKSArIFwiLVwiICsgbmFtZTtcbiAgICAgICAgICAgIGlmIChwcmVmaXhlZE5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ZWROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbihlbGVtZW50LCBwcm9wcywgZHVyYXRpb24sIHRpbWluZykge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDQwMDtcbiAgICAgICAgaWYgKCB0aW1pbmcgPT09IHZvaWQgMCApIHRpbWluZyA9ICdsaW5lYXInO1xuXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNzcyhlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpOyB9LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBvbmNlKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kIHRyYW5zaXRpb25jYW5jZWxlZCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcblxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICcnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAndHJhbnNpdGlvbmNhbmNlbGVkJyA/IHJlamVjdCgpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcE5hbWUpLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAoZHVyYXRpb24gKyBcIm1zXCIpLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IHRpbWluZ1xuICAgICAgICAgICAgICAgIH0sIHByb3BzKSk7XG5cbiAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICkpO1xuXG4gICAgfVxuXG4gICAgdmFyIFRyYW5zaXRpb24gPSB7XG5cbiAgICAgICAgc3RhcnQ6IHRyYW5zaXRpb24sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmNhbmNlbGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5Qcm9ncmVzczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKGVsZW1lbnQsICd1ay10cmFuc2l0aW9uJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgYW5pbWF0aW9uUHJlZml4ID0gJ3VrLWFuaW1hdGlvbi0nO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIG91dCkge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDIwMDtcblxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAnYW5pbWF0aW9uY2FuY2VsZWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyaWdnZXIoZWxlbWVudCwgJ2FuaW1hdGlvbmVuZCcpOyB9LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBvbmNlKGVsZW1lbnQsICdhbmltYXRpb25lbmQgYW5pbWF0aW9uY2FuY2VsZWQnLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG5cblxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09ICdhbmltYXRpb25jYW5jZWxlZCcgPyByZWplY3QoKSA6IHJlc29sdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwgJ2FuaW1hdGlvbkR1cmF0aW9uJywgJycpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKGVsZW1lbnQsIChhbmltYXRpb25QcmVmaXggKyBcIlxcXFxTKlwiKSk7XG5cbiAgICAgICAgICAgICAgICB9LCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsICdhbmltYXRpb25EdXJhdGlvbicsIChkdXJhdGlvbiArIFwibXNcIikpO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGFuaW1hdGlvbiwgYW5pbWF0aW9uUHJlZml4ICsgKG91dCA/ICdsZWF2ZScgOiAnZW50ZXInKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRzV2l0aChhbmltYXRpb24sIGFuaW1hdGlvblByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3JpZ2luICYmIChcInVrLXRyYW5zZm9ybS1vcmlnaW4tXCIgKyBvcmlnaW4pLCBvdXQgJiYgKGFuaW1hdGlvblByZWZpeCArIFwicmV2ZXJzZVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTsgfVxuICAgICAgICApKTtcblxuICAgIH1cblxuICAgIHZhciBpblByb2dyZXNzID0gbmV3IFJlZ0V4cCgoYW5pbWF0aW9uUHJlZml4ICsgXCIoZW50ZXJ8bGVhdmUpXCIpKTtcbiAgICB2YXIgQW5pbWF0aW9uID0ge1xuXG4gICAgICAgIGluOiBhbmltYXRlLFxuXG4gICAgICAgIG91dDogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgb3JpZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluUHJvZ3Jlc3M6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBpblByb2dyZXNzLnRlc3QoYXR0cihlbGVtZW50LCAnY2xhc3MnKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICB0cmlnZ2VyKGVsZW1lbnQsICdhbmltYXRpb25jYW5jZWxlZCcpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGRpcnMgPSB7XG4gICAgICAgIHdpZHRoOiBbJ3gnLCAnbGVmdCcsICdyaWdodCddLFxuICAgICAgICBoZWlnaHQ6IFsneScsICd0b3AnLCAnYm90dG9tJ11cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9zaXRpb25BdChlbGVtZW50LCB0YXJnZXQsIGVsQXR0YWNoLCB0YXJnZXRBdHRhY2gsIGVsT2Zmc2V0LCB0YXJnZXRPZmZzZXQsIGZsaXAsIGJvdW5kYXJ5KSB7XG5cbiAgICAgICAgZWxBdHRhY2ggPSBnZXRQb3MoZWxBdHRhY2gpO1xuICAgICAgICB0YXJnZXRBdHRhY2ggPSBnZXRQb3ModGFyZ2V0QXR0YWNoKTtcblxuICAgICAgICB2YXIgZmxpcHBlZCA9IHtlbGVtZW50OiBlbEF0dGFjaCwgdGFyZ2V0OiB0YXJnZXRBdHRhY2h9O1xuXG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmxpcHBlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaW0gPSBnZXREaW1lbnNpb25zKGVsZW1lbnQpO1xuICAgICAgICB2YXIgdGFyZ2V0RGltID0gZ2V0RGltZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB0YXJnZXREaW07XG5cbiAgICAgICAgbW92ZVRvKHBvc2l0aW9uLCBlbEF0dGFjaCwgZGltLCAtMSk7XG4gICAgICAgIG1vdmVUbyhwb3NpdGlvbiwgdGFyZ2V0QXR0YWNoLCB0YXJnZXREaW0sIDEpO1xuXG4gICAgICAgIGVsT2Zmc2V0ID0gZ2V0T2Zmc2V0cyhlbE9mZnNldCwgZGltLndpZHRoLCBkaW0uaGVpZ2h0KTtcbiAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gZ2V0T2Zmc2V0cyh0YXJnZXRPZmZzZXQsIHRhcmdldERpbS53aWR0aCwgdGFyZ2V0RGltLmhlaWdodCk7XG5cbiAgICAgICAgZWxPZmZzZXRbJ3gnXSArPSB0YXJnZXRPZmZzZXRbJ3gnXTtcbiAgICAgICAgZWxPZmZzZXRbJ3knXSArPSB0YXJnZXRPZmZzZXRbJ3knXTtcblxuICAgICAgICBwb3NpdGlvbi5sZWZ0ICs9IGVsT2Zmc2V0Wyd4J107XG4gICAgICAgIHBvc2l0aW9uLnRvcCArPSBlbE9mZnNldFsneSddO1xuXG4gICAgICAgIGlmIChmbGlwKSB7XG5cbiAgICAgICAgICAgIHZhciBib3VuZGFyaWVzID0gW2dldERpbWVuc2lvbnModG9XaW5kb3coZWxlbWVudCkpXTtcblxuICAgICAgICAgICAgaWYgKGJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgYm91bmRhcmllcy51bnNoaWZ0KGdldERpbWVuc2lvbnMoYm91bmRhcnkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWFjaChkaXJzLCBmdW5jdGlvbiAocmVmLCBwcm9wKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICB2YXIgYWxpZ24gPSByZWZbMV07XG4gICAgICAgICAgICAgICAgdmFyIGFsaWduRmxpcCA9IHJlZlsyXTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCEoZmxpcCA9PT0gdHJ1ZSB8fCBpbmNsdWRlcyhmbGlwLCBkaXIpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYm91bmRhcmllcy5zb21lKGZ1bmN0aW9uIChib3VuZGFyeSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtT2Zmc2V0ID0gZWxBdHRhY2hbZGlyXSA9PT0gYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gLWRpbVtwcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlbEF0dGFjaFtkaXJdID09PSBhbGlnbkZsaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGRpbVtwcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0T2Zmc2V0ID0gdGFyZ2V0QXR0YWNoW2Rpcl0gPT09IGFsaWduXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRhcmdldERpbVtwcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0YXJnZXRBdHRhY2hbZGlyXSA9PT0gYWxpZ25GbGlwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAtdGFyZ2V0RGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvblthbGlnbl0gPCBib3VuZGFyeVthbGlnbl0gfHwgcG9zaXRpb25bYWxpZ25dICsgZGltW3Byb3BdID4gYm91bmRhcnlbYWxpZ25GbGlwXSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VudGVyT2Zmc2V0ID0gZGltW3Byb3BdIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZW50ZXJUYXJnZXRPZmZzZXQgPSB0YXJnZXRBdHRhY2hbZGlyXSA9PT0gJ2NlbnRlcicgPyAtdGFyZ2V0RGltW3Byb3BdIC8gMiA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbEF0dGFjaFtkaXJdID09PSAnY2VudGVyJyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHkoY2VudGVyT2Zmc2V0LCBjZW50ZXJUYXJnZXRPZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYXBwbHkoLWNlbnRlck9mZnNldCwgLWNlbnRlclRhcmdldE9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgICAgICkgfHwgYXBwbHkoZWxlbU9mZnNldCwgdGFyZ2V0T2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYXBwbHkoZWxlbU9mZnNldCwgdGFyZ2V0T2Zmc2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSB0b0Zsb2F0KChwb3NpdGlvblthbGlnbl0gKyBlbGVtT2Zmc2V0ICsgdGFyZ2V0T2Zmc2V0IC0gZWxPZmZzZXRbZGlyXSAqIDIpLnRvRml4ZWQoNCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsID49IGJvdW5kYXJ5W2FsaWduXSAmJiBuZXdWYWwgKyBkaW1bcHJvcF0gPD0gYm91bmRhcnlbYWxpZ25GbGlwXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uW2FsaWduXSA9IG5ld1ZhbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnZWxlbWVudCcsICd0YXJnZXQnXS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGlwcGVkW2VsXVtkaXJdID0gIWVsZW1PZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmxpcHBlZFtlbF1bZGlyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmbGlwcGVkW2VsXVtkaXJdID09PSBkaXJzW3Byb3BdWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkaXJzW3Byb3BdWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkaXJzW3Byb3BdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb2Zmc2V0KGVsZW1lbnQsIHBvc2l0aW9uKTtcblxuICAgICAgICByZXR1cm4gZmxpcHBlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmZzZXQoZWxlbWVudCwgY29vcmRpbmF0ZXMpIHtcblxuICAgICAgICBpZiAoIWNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGltZW5zaW9ucyhlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZ2V0RGltZW5zaW9ucyhlbGVtZW50KTtcbiAgICAgICAgdmFyIHBvcyA9IGNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcblxuICAgICAgICBbJ2xlZnQnLCAndG9wJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjc3MoZWxlbWVudCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsIGNvb3JkaW5hdGVzW3Byb3BdIC0gY3VycmVudE9mZnNldFtwcm9wXVxuICAgICAgICAgICAgICAgICAgICArIHRvRmxvYXQocG9zID09PSAnYWJzb2x1dGUnICYmIHZhbHVlID09PSAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcG9zaXRpb24oZWxlbWVudClbcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG5cbiAgICAgICAgdmFyIHJlZiA9IHRvV2luZG93KGVsZW1lbnQpO1xuICAgICAgICB2YXIgdG9wID0gcmVmLnBhZ2VZT2Zmc2V0O1xuICAgICAgICB2YXIgbGVmdCA9IHJlZi5wYWdlWE9mZnNldDtcblxuICAgICAgICB2YXIgcmVjdCA9IGlzV2luZG93KGVsZW1lbnQpXG4gICAgICAgICAgICA/IHtoZWlnaHQ6IGhlaWdodChlbGVtZW50KSwgd2lkdGg6IHdpZHRoKGVsZW1lbnQpLCB0b3A6IDAsIGxlZnQ6IDB9XG4gICAgICAgICAgICA6IGdldFJlY3QodG9Ob2RlKGVsZW1lbnQpKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHRvcCxcbiAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGxlZnQsXG4gICAgICAgICAgICBib3R0b206IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgKyB0b3AsXG4gICAgICAgICAgICByaWdodDogcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCArIGxlZnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbihlbGVtZW50LCBwYXJlbnQpIHtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgKHRvTm9kZShlbGVtZW50KSB8fCB7fSkub2Zmc2V0UGFyZW50IHx8IHRvV2luZG93KGVsZW1lbnQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICB2YXIgZWxlbWVudE9mZnNldCA9IG9mZnNldChlbGVtZW50KTtcbiAgICAgICAgdmFyIHBhcmVudE9mZnNldCA9IG9mZnNldChwYXJlbnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IGVsZW1lbnRPZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIHRvRmxvYXQoY3NzKHBhcmVudCwgJ2JvcmRlclRvcFdpZHRoJykpLFxuICAgICAgICAgICAgbGVmdDogZWxlbWVudE9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSB0b0Zsb2F0KGNzcyhwYXJlbnQsICdib3JkZXJMZWZ0V2lkdGgnKSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRQb3NpdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBbMCwgMF07XG5cbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgIG9mZnNldFswXSArPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIG9mZnNldFsxXSArPSBlbGVtZW50Lm9mZnNldExlZnQ7XG5cbiAgICAgICAgICAgIGlmIChjc3MoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luID0gdG9XaW5kb3coZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WzBdICs9IHdpbi5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICBvZmZzZXRbMV0gKz0gd2luLnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoKGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCkpO1xuXG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuXG4gICAgdmFyIGhlaWdodCA9IGRpbWVuc2lvbignaGVpZ2h0Jyk7XG4gICAgdmFyIHdpZHRoID0gZGltZW5zaW9uKCd3aWR0aCcpO1xuXG4gICAgZnVuY3Rpb24gZGltZW5zaW9uKHByb3ApIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gdWNmaXJzdChwcm9wKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZSkge1xuXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbKFwiaW5uZXJcIiArIHByb3BOYW1lKV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzRG9jdW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoZG9jWyhcIm9mZnNldFwiICsgcHJvcE5hbWUpXSwgZG9jWyhcInNjcm9sbFwiICsgcHJvcE5hbWUpXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIHZhbHVlID0gY3NzKGVsZW1lbnQsIHByb3ApO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPT09ICdhdXRvJyA/IGVsZW1lbnRbKFwib2Zmc2V0XCIgKyBwcm9wTmFtZSldIDogdG9GbG9hdCh2YWx1ZSkgfHwgMDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAtIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3ApO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsICF2YWx1ZSAmJiB2YWx1ZSAhPT0gMFxuICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgIDogK3ZhbHVlICsgYm94TW9kZWxBZGp1c3QoZWxlbWVudCwgcHJvcCkgKyAncHgnXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYm94TW9kZWxBZGp1c3QoZWxlbWVudCwgcHJvcCwgc2l6aW5nKSB7XG4gICAgICAgIGlmICggc2l6aW5nID09PSB2b2lkIDAgKSBzaXppbmcgPSAnYm9yZGVyLWJveCc7XG5cbiAgICAgICAgcmV0dXJuIGNzcyhlbGVtZW50LCAnYm94U2l6aW5nJykgPT09IHNpemluZ1xuICAgICAgICAgICAgPyBkaXJzW3Byb3BdLnNsaWNlKDEpLm1hcCh1Y2ZpcnN0KS5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBwcm9wKSB7IHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgICAgICsgdG9GbG9hdChjc3MoZWxlbWVudCwgKFwicGFkZGluZ1wiICsgcHJvcCkpKVxuICAgICAgICAgICAgICAgICsgdG9GbG9hdChjc3MoZWxlbWVudCwgKFwiYm9yZGVyXCIgKyBwcm9wICsgXCJXaWR0aFwiKSkpOyB9XG4gICAgICAgICAgICAgICAgLCAwKVxuICAgICAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmVUbyhwb3NpdGlvbiwgYXR0YWNoLCBkaW0sIGZhY3Rvcikge1xuICAgICAgICBlYWNoKGRpcnMsIGZ1bmN0aW9uIChyZWYsIHByb3ApIHtcbiAgICAgICAgICAgIHZhciBkaXIgPSByZWZbMF07XG4gICAgICAgICAgICB2YXIgYWxpZ24gPSByZWZbMV07XG4gICAgICAgICAgICB2YXIgYWxpZ25GbGlwID0gcmVmWzJdO1xuXG4gICAgICAgICAgICBpZiAoYXR0YWNoW2Rpcl0gPT09IGFsaWduRmxpcCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2FsaWduXSArPSBkaW1bcHJvcF0gKiBmYWN0b3I7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaFtkaXJdID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2FsaWduXSArPSBkaW1bcHJvcF0gKiBmYWN0b3IgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQb3MocG9zKSB7XG5cbiAgICAgICAgdmFyIHggPSAvbGVmdHxjZW50ZXJ8cmlnaHQvO1xuICAgICAgICB2YXIgeSA9IC90b3B8Y2VudGVyfGJvdHRvbS87XG5cbiAgICAgICAgcG9zID0gKHBvcyB8fCAnJykuc3BsaXQoJyAnKTtcblxuICAgICAgICBpZiAocG9zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcG9zID0geC50ZXN0KHBvc1swXSlcbiAgICAgICAgICAgICAgICA/IHBvcy5jb25jYXQoJ2NlbnRlcicpXG4gICAgICAgICAgICAgICAgOiB5LnRlc3QocG9zWzBdKVxuICAgICAgICAgICAgICAgICAgICA/IFsnY2VudGVyJ10uY29uY2F0KHBvcylcbiAgICAgICAgICAgICAgICAgICAgOiBbJ2NlbnRlcicsICdjZW50ZXInXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LnRlc3QocG9zWzBdKSA/IHBvc1swXSA6ICdjZW50ZXInLFxuICAgICAgICAgICAgeTogeS50ZXN0KHBvc1sxXSkgPyBwb3NbMV0gOiAnY2VudGVyJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE9mZnNldHMob2Zmc2V0cywgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgICAgIHZhciByZWYgPSAob2Zmc2V0cyB8fCAnJykuc3BsaXQoJyAnKTtcbiAgICAgICAgdmFyIHggPSByZWZbMF07XG4gICAgICAgIHZhciB5ID0gcmVmWzFdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4ID8gdG9GbG9hdCh4KSAqIChlbmRzV2l0aCh4LCAnJScpID8gd2lkdGggLyAxMDAgOiAxKSA6IDAsXG4gICAgICAgICAgICB5OiB5ID8gdG9GbG9hdCh5KSAqIChlbmRzV2l0aCh5LCAnJScpID8gaGVpZ2h0IC8gMTAwIDogMSkgOiAwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmxpcFBvc2l0aW9uKHBvcykge1xuICAgICAgICBzd2l0Y2ggKHBvcykge1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1B4KHZhbHVlLCBwcm9wZXJ0eSwgZWxlbWVudCkge1xuICAgICAgICBpZiAoIHByb3BlcnR5ID09PSB2b2lkIDAgKSBwcm9wZXJ0eSA9ICd3aWR0aCc7XG4gICAgICAgIGlmICggZWxlbWVudCA9PT0gdm9pZCAwICkgZWxlbWVudCA9IHdpbmRvdztcblxuICAgICAgICByZXR1cm4gaXNOdW1lcmljKHZhbHVlKVxuICAgICAgICAgICAgPyArdmFsdWVcbiAgICAgICAgICAgIDogZW5kc1dpdGgodmFsdWUsICd2aCcpXG4gICAgICAgICAgICAgICAgPyBwZXJjZW50KGhlaWdodCh0b1dpbmRvdyhlbGVtZW50KSksIHZhbHVlKVxuICAgICAgICAgICAgICAgIDogZW5kc1dpdGgodmFsdWUsICd2dycpXG4gICAgICAgICAgICAgICAgICAgID8gcGVyY2VudCh3aWR0aCh0b1dpbmRvdyhlbGVtZW50KSksIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAnJScpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBlcmNlbnQoZ2V0RGltZW5zaW9ucyhlbGVtZW50KVtwcm9wZXJ0eV0sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0b0Zsb2F0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZXJjZW50KGJhc2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlICogdG9GbG9hdCh2YWx1ZSkgLyAxMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UmVjdChlbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3R5bGU7XG5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHN0eWxlID0gYXR0cihlbGVtZW50LCAnc3R5bGUnKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnYmxvY2snLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgYXR0cihlbGVtZW50LCAnc3R5bGUnLCBzdHlsZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgQmFzZWQgb246XG4gICAgICAgIENvcHlyaWdodCAoYykgMjAxNiBXaWxzb24gUGFnZSB3aWxzb25wYWdlQG1lLmNvbVxuICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vd2lsc29ucGFnZS9mYXN0ZG9tXG4gICAgKi9cblxuICAgIHZhciBmYXN0ZG9tID0ge1xuXG4gICAgICAgIHJlYWRzOiBbXSxcbiAgICAgICAgd3JpdGVzOiBbXSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRzLnB1c2godGFzayk7XG4gICAgICAgICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZTogZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgdGhpcy53cml0ZXMucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICAgICAgICAgIHJldHVybiB0YXNrO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlJDEodGhpcy5yZWFkcywgdGFzaykgfHwgcmVtb3ZlJDEodGhpcy53cml0ZXMsIHRhc2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZsdXNoOiBmbHVzaFxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZsdXNoKHJlY3Vyc2lvbikge1xuICAgICAgICBpZiAoIHJlY3Vyc2lvbiA9PT0gdm9pZCAwICkgcmVjdXJzaW9uID0gMTtcblxuICAgICAgICBydW5UYXNrcyhmYXN0ZG9tLnJlYWRzKTtcbiAgICAgICAgcnVuVGFza3MoZmFzdGRvbS53cml0ZXMuc3BsaWNlKDAsIGZhc3Rkb20ud3JpdGVzLmxlbmd0aCkpO1xuXG4gICAgICAgIGZhc3Rkb20uc2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGZhc3Rkb20ucmVhZHMubGVuZ3RoIHx8IGZhc3Rkb20ud3JpdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc2NoZWR1bGVGbHVzaChyZWN1cnNpb24gKyAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBSRUNVUlNJT05fTElNSVQgPSA0O1xuICAgIGZ1bmN0aW9uIHNjaGVkdWxlRmx1c2gocmVjdXJzaW9uKSB7XG5cbiAgICAgICAgaWYgKGZhc3Rkb20uc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmYXN0ZG9tLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIGlmIChyZWN1cnNpb24gJiYgcmVjdXJzaW9uIDwgUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsdXNoKHJlY3Vyc2lvbik7IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsdXNoKCk7IH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5UYXNrcyh0YXNrcykge1xuICAgICAgICB2YXIgdGFzaztcbiAgICAgICAgd2hpbGUgKCh0YXNrID0gdGFza3Muc2hpZnQoKSkpIHtcbiAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZSQxKGFycmF5LCBpdGVtKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgICAgIHJldHVybiAhIX5pbmRleCAmJiAhIWFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTW91c2VUcmFja2VyKCkge31cblxuICAgIE1vdXNlVHJhY2tlci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgcG9zaXRpb25zOiBbXSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25zID0gW107XG5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kID0gb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gcG9zaXRpb24gPSBnZXRFdmVudFBvcyhlKTsgfSk7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEucG9zaXRpb25zLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCAmJiB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVzVG86IGZ1bmN0aW9uKHRhcmdldCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wb3NpdGlvbnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHAgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHAubGVmdDtcbiAgICAgICAgICAgIHZhciByaWdodCA9IHAucmlnaHQ7XG4gICAgICAgICAgICB2YXIgdG9wID0gcC50b3A7XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gcC5ib3R0b207XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLnBvc2l0aW9ucztcbiAgICAgICAgICAgIHZhciBwcmV2UG9zaXRpb24gPSByZWZbMF07XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBsYXN0KHRoaXMucG9zaXRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXRoID0gW3ByZXZQb3NpdGlvbiwgcG9zaXRpb25dO1xuXG4gICAgICAgICAgICBpZiAocG9pbnRJblJlY3QocG9zaXRpb24sIHApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGlhZ29uYWxzID0gW1t7eDogbGVmdCwgeTogdG9wfSwge3g6IHJpZ2h0LCB5OiBib3R0b219XSwgW3t4OiBsZWZ0LCB5OiBib3R0b219LCB7eDogcmlnaHQsIHk6IHRvcH1dXTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFscy5zb21lKGZ1bmN0aW9uIChkaWFnb25hbCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3QocGF0aCwgZGlhZ29uYWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gJiYgcG9pbnRJblJlY3QoaW50ZXJzZWN0aW9uLCBwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gSW5zcGlyZWQgYnkgaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvaW50bGluZXBsYW5lL1xuICAgIGZ1bmN0aW9uIGludGVyc2VjdChyZWYsIHJlZiQxKSB7XG4gICAgICAgIHZhciByZWZfMCA9IHJlZlswXTtcbiAgICAgICAgdmFyIHgxID0gcmVmXzAueDtcbiAgICAgICAgdmFyIHkxID0gcmVmXzAueTtcbiAgICAgICAgdmFyIHJlZl8xID0gcmVmWzFdO1xuICAgICAgICB2YXIgeDIgPSByZWZfMS54O1xuICAgICAgICB2YXIgeTIgPSByZWZfMS55O1xuICAgICAgICB2YXIgcmVmJDFfMCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgeDMgPSByZWYkMV8wLng7XG4gICAgICAgIHZhciB5MyA9IHJlZiQxXzAueTtcbiAgICAgICAgdmFyIHJlZiQxXzEgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIHg0ID0gcmVmJDFfMS54O1xuICAgICAgICB2YXIgeTQgPSByZWYkMV8xLnk7XG5cblxuICAgICAgICB2YXIgZGVub21pbmF0b3IgPSAoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSk7XG5cbiAgICAgICAgLy8gTGluZXMgYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVhID0gKCh4NCAtIHgzKSAqICh5MSAtIHkzKSAtICh5NCAtIHkzKSAqICh4MSAtIHgzKSkgLyBkZW5vbWluYXRvcjtcblxuICAgICAgICBpZiAodWEgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgb2YgdGhlIGludGVyc2VjdGlvblxuICAgICAgICByZXR1cm4ge3g6IHgxICsgdWEgKiAoeDIgLSB4MSksIHk6IHkxICsgdWEgKiAoeTIgLSB5MSl9O1xuICAgIH1cblxuICAgIHZhciBzdHJhdHMgPSB7fTtcblxuICAgIHN0cmF0cy5ldmVudHMgPVxuICAgIHN0cmF0cy5jcmVhdGVkID1cbiAgICBzdHJhdHMuYmVmb3JlQ29ubmVjdCA9XG4gICAgc3RyYXRzLmNvbm5lY3RlZCA9XG4gICAgc3RyYXRzLmJlZm9yZURpc2Nvbm5lY3QgPVxuICAgIHN0cmF0cy5kaXNjb25uZWN0ZWQgPVxuICAgIHN0cmF0cy5kZXN0cm95ID0gY29uY2F0U3RyYXQ7XG5cbiAgICAvLyBhcmdzIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmFyZ3MgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWwgIT09IGZhbHNlICYmIGNvbmNhdFN0cmF0KGNoaWxkVmFsIHx8IHBhcmVudFZhbCk7XG4gICAgfTtcblxuICAgIC8vIHVwZGF0ZSBzdHJhdGVneVxuICAgIHN0cmF0cy51cGRhdGUgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gc29ydEJ5KGNvbmNhdFN0cmF0KHBhcmVudFZhbCwgaXNGdW5jdGlvbihjaGlsZFZhbCkgPyB7cmVhZDogY2hpbGRWYWx9IDogY2hpbGRWYWwpLCAnb3JkZXInKTtcbiAgICB9O1xuXG4gICAgLy8gcHJvcGVydHkgc3RyYXRlZ3lcbiAgICBzdHJhdHMucHJvcHMgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXG4gICAgICAgIGlmIChpc0FycmF5KGNoaWxkVmFsKSkge1xuICAgICAgICAgICAgY2hpbGRWYWwgPSBjaGlsZFZhbC5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gU3RyaW5nO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJhdHMubWV0aG9kcyhwYXJlbnRWYWwsIGNoaWxkVmFsKTtcbiAgICB9O1xuXG4gICAgLy8gZXh0ZW5kIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmNvbXB1dGVkID1cbiAgICBzdHJhdHMubWV0aG9kcyA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgICAgICAgPyBwYXJlbnRWYWxcbiAgICAgICAgICAgICAgICA/IGFzc2lnbih7fSwgcGFyZW50VmFsLCBjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA6IGNoaWxkVmFsXG4gICAgICAgICAgICA6IHBhcmVudFZhbDtcbiAgICB9O1xuXG4gICAgLy8gZGF0YSBzdHJhdGVneVxuICAgIHN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKSB7XG5cbiAgICAgICAgaWYgKCF2bSkge1xuXG4gICAgICAgICAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRWYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlRm5EYXRhKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICAgICAgcmV0dXJuIHN0cmF0cy5jb21wdXRlZChcbiAgICAgICAgICAgIGlzRnVuY3Rpb24ocGFyZW50VmFsKVxuICAgICAgICAgICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogcGFyZW50VmFsLFxuICAgICAgICAgICAgaXNGdW5jdGlvbihjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogY2hpbGRWYWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb25jYXQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBjb25jYXRTdHJhdChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG5cbiAgICAgICAgcGFyZW50VmFsID0gcGFyZW50VmFsICYmICFpc0FycmF5KHBhcmVudFZhbCkgPyBbcGFyZW50VmFsXSA6IHBhcmVudFZhbDtcblxuICAgICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICAgICAgICAgID8gcGFyZW50VmFsXG4gICAgICAgICAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgICAgICAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICAgICAgICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICAgICAgICAgIDogcGFyZW50VmFsO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBkZWZhdWx0U3RyYXQocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoY2hpbGRWYWwpID8gcGFyZW50VmFsIDogY2hpbGRWYWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIG1lcmdlS2V5KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkkMSkpIHtcbiAgICAgICAgICAgICAgICBtZXJnZUtleShrZXkkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtZXJnZUtleShrZXkpIHtcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IChzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQpKHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucywgYXJncykge1xuICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgIGlmICggYXJncyA9PT0gdm9pZCAwICkgYXJncyA9IFtdO1xuXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIHJldHVybiAhb3B0aW9uc1xuICAgICAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgICAgICA6IHN0YXJ0c1dpdGgob3B0aW9ucywgJ3snKVxuICAgICAgICAgICAgICAgICAgICA/IEpTT04ucGFyc2Uob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgOiBhcmdzLmxlbmd0aCAmJiAhaW5jbHVkZXMob3B0aW9ucywgJzonKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKCBvYmogPSB7fSwgb2JqW2FyZ3NbMF1dID0gb3B0aW9ucywgb2JqICkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKG9wdGlvbnMsIG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvcHRpb24uc3BsaXQoLzooLiopLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAmJiAhaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheShlbCkge1xuXG4gICAgICAgIGlmIChpc0lGcmFtZShlbCkpIHtcbiAgICAgICAgICAgIGNhbGwoZWwsIHtmdW5jOiAncGxheVZpZGVvJywgbWV0aG9kOiAncGxheSd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hUTUw1KGVsKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbC5wbGF5KCkuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXVzZShlbCkge1xuXG4gICAgICAgIGlmIChpc0lGcmFtZShlbCkpIHtcbiAgICAgICAgICAgIGNhbGwoZWwsIHtmdW5jOiAncGF1c2VWaWRlbycsIG1ldGhvZDogJ3BhdXNlJ30pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSFRNTDUoZWwpKSB7XG4gICAgICAgICAgICBlbC5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdXRlKGVsKSB7XG5cbiAgICAgICAgaWYgKGlzSUZyYW1lKGVsKSkge1xuICAgICAgICAgICAgY2FsbChlbCwge2Z1bmM6ICdtdXRlJywgbWV0aG9kOiAnc2V0Vm9sdW1lJywgdmFsdWU6IDB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hUTUw1KGVsKSkge1xuICAgICAgICAgICAgZWwubXV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0hUTUw1KGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC50YWdOYW1lID09PSAnVklERU8nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSUZyYW1lKGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC50YWdOYW1lID09PSAnSUZSQU1FJyAmJiAoaXNZb3V0dWJlKGVsKSB8fCBpc1ZpbWVvKGVsKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNZb3V0dWJlKGVsKSB7XG4gICAgICAgIHJldHVybiAhIWVsLnNyYy5tYXRjaCgvXFwvXFwvLio/eW91dHViZSgtbm9jb29raWUpP1xcLlthLXpdK1xcLyh3YXRjaFxcP3Y9W14mXFxzXSt8ZW1iZWQpfHlvdXR1XFwuYmVcXC8uKi8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmltZW8oZWwpIHtcbiAgICAgICAgcmV0dXJuICEhZWwuc3JjLm1hdGNoKC92aW1lb1xcLmNvbVxcL3ZpZGVvXFwvLiovKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsKGVsLCBjbWQpIHtcbiAgICAgICAgZW5hYmxlQXBpKGVsKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QoZWwsIGNtZCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc3QoZWwsIGNtZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZWwuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShhc3NpZ24oe2V2ZW50OiAnY29tbWFuZCd9LCBjbWQpKSwgJyonKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB2YXIgc3RhdGVLZXkgPSAnX3VrUGxheWVyJztcbiAgICB2YXIgY291bnRlciA9IDA7XG4gICAgZnVuY3Rpb24gZW5hYmxlQXBpKGVsKSB7XG5cbiAgICAgICAgaWYgKGVsW3N0YXRlS2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsW3N0YXRlS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB5b3V0dWJlID0gaXNZb3V0dWJlKGVsKTtcbiAgICAgICAgdmFyIHZpbWVvID0gaXNWaW1lbyhlbCk7XG5cbiAgICAgICAgdmFyIGlkID0gKytjb3VudGVyO1xuICAgICAgICB2YXIgcG9sbGVyO1xuXG4gICAgICAgIHJldHVybiBlbFtzdGF0ZUtleV0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXG4gICAgICAgICAgICB5b3V0dWJlICYmIG9uY2UoZWwsICdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QoZWwsIHtldmVudDogJ2xpc3RlbmluZycsIGlkOiBpZH0pOyB9O1xuICAgICAgICAgICAgICAgIHBvbGxlciA9IHNldEludGVydmFsKGxpc3RlbmVyLCAxMDApO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb25jZSh3aW5kb3csICdtZXNzYWdlJywgcmVzb2x2ZSwgZmFsc2UsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEgJiYgKHlvdXR1YmUgJiYgZGF0YS5pZCA9PT0gaWQgJiYgZGF0YS5ldmVudCA9PT0gJ29uUmVhZHknIHx8IHZpbWVvICYmIE51bWJlcihkYXRhLnBsYXllcl9pZCkgPT09IGlkKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZWwuc3JjID0gXCJcIiArIChlbC5zcmMpICsgKGluY2x1ZGVzKGVsLnNyYywgJz8nKSA/ICcmJyA6ICc/JykgKyAoeW91dHViZSA/ICdlbmFibGVqc2FwaT0xJyA6IChcImFwaT0xJnBsYXllcl9pZD1cIiArIGlkKSk7XG5cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBjbGVhckludGVydmFsKHBvbGxlcik7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW5WaWV3KGVsZW1lbnQsIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCkge1xuICAgICAgICBpZiAoIG9mZnNldFRvcCA9PT0gdm9pZCAwICkgb2Zmc2V0VG9wID0gMDtcbiAgICAgICAgaWYgKCBvZmZzZXRMZWZ0ID09PSB2b2lkIDAgKSBvZmZzZXRMZWZ0ID0gMDtcblxuXG4gICAgICAgIGlmICghaXNWaXNpYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW50cyA9IG92ZXJmbG93UGFyZW50cyhlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gcGFyZW50cy5ldmVyeShmdW5jdGlvbiAocGFyZW50LCBpKSB7XG5cbiAgICAgICAgICAgIHZhciBjbGllbnQgPSBvZmZzZXQocGFyZW50c1tpICsgMV0gfHwgZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgcmVmID0gb2Zmc2V0KGdldFZpZXdwb3J0KHBhcmVudCkpO1xuICAgICAgICAgICAgdmFyIHRvcCA9IHJlZi50b3A7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHJlZi5sZWZ0O1xuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IHJlZi5ib3R0b207XG4gICAgICAgICAgICB2YXIgcmlnaHQgPSByZWYucmlnaHQ7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3RSZWN0KGNsaWVudCwge1xuICAgICAgICAgICAgICAgIHRvcDogdG9wIC0gb2Zmc2V0VG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQgLSBvZmZzZXRMZWZ0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogYm90dG9tICsgb2Zmc2V0VG9wLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodCArIG9mZnNldExlZnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUb3AoZWxlbWVudCwgdG9wKSB7XG5cbiAgICAgICAgaWYgKGlzV2luZG93KGVsZW1lbnQpIHx8IGlzRG9jdW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBnZXRTY3JvbGxpbmdFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gdG9wO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGVsZW1lbnQsIHJlZikge1xuICAgICAgICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gICAgICAgIHZhciBvZmZzZXRCeSA9IHJlZi5vZmZzZXQ7IGlmICggb2Zmc2V0QnkgPT09IHZvaWQgMCApIG9mZnNldEJ5ID0gMDtcblxuXG4gICAgICAgIGlmICghaXNWaXNpYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW50cyA9IG92ZXJmbG93UGFyZW50cyhlbGVtZW50KS5jb25jYXQoZWxlbWVudCk7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGkgKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBwYXJlbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHBhcmVudHNbaSArIDFdO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGwgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IE1hdGguY2VpbChwb3NpdGlvbihlbGVtZW50LCBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KSkudG9wIC0gb2Zmc2V0QnkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBnZXREdXJhdGlvbihNYXRoLmFicyh0b3ApKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBlYXNlKGNsYW1wKChEYXRlLm5vdygpIC0gc3RhcnQpIC8gZHVyYXRpb24pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHNjcm9sbEVsZW1lbnQsIHNjcm9sbCArIHRvcCAqIHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGwgbW9yZSBpZiB3ZSBoYXZlIG5vdCByZWFjaGVkIG91ciBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnQgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAoKTtcbiAgICAgICAgICAgICAgICB9KTsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoIC0gMTsgaSsrKSBsb29wKCBpICk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RHVyYXRpb24oZGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIDQwICogTWF0aC5wb3coZGlzdCwgLjM3NSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlYXNlKGspIHtcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbGVkT3ZlcihlbGVtZW50LCBoZWlnaHRPZmZzZXQpIHtcbiAgICAgICAgaWYgKCBoZWlnaHRPZmZzZXQgPT09IHZvaWQgMCApIGhlaWdodE9mZnNldCA9IDA7XG5cblxuICAgICAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IGxhc3Qoc2Nyb2xsUGFyZW50cyhlbGVtZW50KSk7XG4gICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSBzY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gb2Zmc2V0KHZpZXdwb3J0KS5oZWlnaHQ7XG4gICAgICAgIHZhciB2aWV3cG9ydFRvcCA9IG9mZnNldFBvc2l0aW9uKGVsZW1lbnQpWzBdIC0gc2Nyb2xsVG9wIC0gb2Zmc2V0UG9zaXRpb24oc2Nyb2xsRWxlbWVudClbMF07XG4gICAgICAgIHZhciB2aWV3cG9ydERpc3QgPSBNYXRoLm1pbih2aWV3cG9ydEhlaWdodCwgdmlld3BvcnRUb3AgKyBzY3JvbGxUb3ApO1xuXG4gICAgICAgIHZhciB0b3AgPSB2aWV3cG9ydFRvcCAtIHZpZXdwb3J0RGlzdDtcbiAgICAgICAgdmFyIGRpc3QgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIG9mZnNldChlbGVtZW50KS5oZWlnaHQgKyBoZWlnaHRPZmZzZXQgKyB2aWV3cG9ydERpc3QsXG4gICAgICAgICAgICBzY3JvbGxIZWlnaHQgLSAodmlld3BvcnRUb3AgKyBzY3JvbGxUb3ApLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0IC0gdmlld3BvcnRIZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gY2xhbXAoLTEgKiB0b3AgLyBkaXN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxQYXJlbnRzKGVsZW1lbnQsIG92ZXJmbG93UmUpIHtcbiAgICAgICAgaWYgKCBvdmVyZmxvd1JlID09PSB2b2lkIDAgKSBvdmVyZmxvd1JlID0gL2F1dG98c2Nyb2xsLztcblxuICAgICAgICB2YXIgc2Nyb2xsRWwgPSBnZXRTY3JvbGxpbmdFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50cyA9IHBhcmVudHMoZWxlbWVudCkuZmlsdGVyKGZ1bmN0aW9uIChwYXJlbnQpIHsgcmV0dXJuIHBhcmVudCA9PT0gc2Nyb2xsRWxcbiAgICAgICAgICAgIHx8IG92ZXJmbG93UmUudGVzdChjc3MocGFyZW50LCAnb3ZlcmZsb3cnKSlcbiAgICAgICAgICAgICYmIHBhcmVudC5zY3JvbGxIZWlnaHQgPiBNYXRoLnJvdW5kKG9mZnNldChwYXJlbnQpLmhlaWdodCk7IH1cbiAgICAgICAgKS5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBzY3JvbGxQYXJlbnRzLmxlbmd0aCA/IHNjcm9sbFBhcmVudHMgOiBbc2Nyb2xsRWxdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpZXdwb3J0KHNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEVsZW1lbnQgPT09IGdldFNjcm9sbGluZ0VsZW1lbnQoc2Nyb2xsRWxlbWVudCkgPyB3aW5kb3cgOiBzY3JvbGxFbGVtZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG92ZXJmbG93UGFyZW50cyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxQYXJlbnRzKGVsZW1lbnQsIC9hdXRvfHNjcm9sbHxoaWRkZW4vKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxpbmdFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHJlZiA9IHRvV2luZG93KGVsZW1lbnQpO1xuICAgICAgICB2YXIgZG9jdW1lbnQgPSByZWYuZG9jdW1lbnQ7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBpbkJyb3dzZXIgJiYgd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyXG4gICAgICAgIHx8IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzKGNhbGxiYWNrLCByZWYpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICAgICAgICAgICAgdmFyIHJvb3RNYXJnaW4gPSByZWYucm9vdE1hcmdpbjsgaWYgKCByb290TWFyZ2luID09PSB2b2lkIDAgKSByb290TWFyZ2luID0gJzAgMCc7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gKHJvb3RNYXJnaW4gfHwgJzAgMCcpLnNwbGl0KCcgJykubWFwKHRvRmxvYXQpO1xuICAgICAgICAgICAgdmFyIG9mZnNldFRvcCA9IHJlZiQxWzBdO1xuICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYkMVsxXTtcblxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0VG9wID0gb2Zmc2V0VG9wO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0TGVmdCA9IG9mZnNldExlZnQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGVuZGluZztcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZHMgPSB0aGlzJDEudGFrZVJlY29yZHMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVjb3JkcywgdGhpcyQxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTsgfSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5vZmYgPSBvbih3aW5kb3csICdzY3JvbGwgcmVzaXplIGxvYWQnLCB0aGlzLmFwcGx5LCB7cGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZX0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3MucHJvdG90eXBlLnRha2VSZWNvcmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0cy5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluVmlldyA9IGlzSW5WaWV3KGVudHJ5LnRhcmdldCwgdGhpcyQxLm9mZnNldFRvcCwgdGhpcyQxLm9mZnNldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gbnVsbCB8fCBpblZpZXcgXiBlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuaXNJbnRlcnNlY3RpbmcgPSBpblZpZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIGlzSW50ZXJzZWN0aW5nOiBudWxsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcy5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcztcbiAgICB9KCkpO1xuXG4gICAgdmFyIHV0aWwgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgYWpheDogYWpheCxcbiAgICAgICAgZ2V0SW1hZ2U6IGdldEltYWdlLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICAgICAgICBhbmltYXRlOiBhbmltYXRlLFxuICAgICAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICAgICAgYXR0cjogYXR0cixcbiAgICAgICAgaGFzQXR0cjogaGFzQXR0cixcbiAgICAgICAgcmVtb3ZlQXR0cjogcmVtb3ZlQXR0cixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICAgICAgICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gICAgICAgIHJlbW92ZUNsYXNzZXM6IHJlbW92ZUNsYXNzZXMsXG4gICAgICAgIHJlcGxhY2VDbGFzczogcmVwbGFjZUNsYXNzLFxuICAgICAgICBoYXNDbGFzczogaGFzQ2xhc3MsXG4gICAgICAgIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgICAgICAgcG9zaXRpb25BdDogcG9zaXRpb25BdCxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgb2Zmc2V0UG9zaXRpb246IG9mZnNldFBvc2l0aW9uLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBib3hNb2RlbEFkanVzdDogYm94TW9kZWxBZGp1c3QsXG4gICAgICAgIGZsaXBQb3NpdGlvbjogZmxpcFBvc2l0aW9uLFxuICAgICAgICB0b1B4OiB0b1B4LFxuICAgICAgICByZWFkeTogcmVhZHksXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZ2V0SW5kZXg6IGdldEluZGV4LFxuICAgICAgICBlbXB0eTogZW1wdHksXG4gICAgICAgIGh0bWw6IGh0bWwsXG4gICAgICAgIHByZXBlbmQ6IHByZXBlbmQsXG4gICAgICAgIGFwcGVuZDogYXBwZW5kLFxuICAgICAgICBiZWZvcmU6IGJlZm9yZSxcbiAgICAgICAgYWZ0ZXI6IGFmdGVyLFxuICAgICAgICByZW1vdmU6IHJlbW92ZSxcbiAgICAgICAgd3JhcEFsbDogd3JhcEFsbCxcbiAgICAgICAgd3JhcElubmVyOiB3cmFwSW5uZXIsXG4gICAgICAgIHVud3JhcDogdW53cmFwLFxuICAgICAgICBmcmFnbWVudDogZnJhZ21lbnQsXG4gICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgJDogJCxcbiAgICAgICAgJCQ6ICQkLFxuICAgICAgICBpbkJyb3dzZXI6IGluQnJvd3NlcixcbiAgICAgICAgaXNJRTogaXNJRSxcbiAgICAgICAgaXNSdGw6IGlzUnRsLFxuICAgICAgICBoYXNUb3VjaDogaGFzVG91Y2gsXG4gICAgICAgIHBvaW50ZXJEb3duOiBwb2ludGVyRG93bixcbiAgICAgICAgcG9pbnRlck1vdmU6IHBvaW50ZXJNb3ZlLFxuICAgICAgICBwb2ludGVyVXA6IHBvaW50ZXJVcCxcbiAgICAgICAgcG9pbnRlckVudGVyOiBwb2ludGVyRW50ZXIsXG4gICAgICAgIHBvaW50ZXJMZWF2ZTogcG9pbnRlckxlYXZlLFxuICAgICAgICBwb2ludGVyQ2FuY2VsOiBwb2ludGVyQ2FuY2VsLFxuICAgICAgICBvbjogb24sXG4gICAgICAgIG9mZjogb2ZmLFxuICAgICAgICBvbmNlOiBvbmNlLFxuICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICBjcmVhdGVFdmVudDogY3JlYXRlRXZlbnQsXG4gICAgICAgIHRvRXZlbnRUYXJnZXRzOiB0b0V2ZW50VGFyZ2V0cyxcbiAgICAgICAgaXNUb3VjaDogaXNUb3VjaCxcbiAgICAgICAgZ2V0RXZlbnRQb3M6IGdldEV2ZW50UG9zLFxuICAgICAgICBmYXN0ZG9tOiBmYXN0ZG9tLFxuICAgICAgICBpc1ZvaWRFbGVtZW50OiBpc1ZvaWRFbGVtZW50LFxuICAgICAgICBpc1Zpc2libGU6IGlzVmlzaWJsZSxcbiAgICAgICAgc2VsSW5wdXQ6IHNlbElucHV0LFxuICAgICAgICBpc0lucHV0OiBpc0lucHV0LFxuICAgICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgICAgd2l0aGluOiB3aXRoaW4sXG4gICAgICAgIHBhcmVudHM6IHBhcmVudHMsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgaGFzT3duOiBoYXNPd24sXG4gICAgICAgIGh5cGhlbmF0ZTogaHlwaGVuYXRlLFxuICAgICAgICBjYW1lbGl6ZTogY2FtZWxpemUsXG4gICAgICAgIHVjZmlyc3Q6IHVjZmlyc3QsXG4gICAgICAgIHN0YXJ0c1dpdGg6IHN0YXJ0c1dpdGgsXG4gICAgICAgIGVuZHNXaXRoOiBlbmRzV2l0aCxcbiAgICAgICAgaW5jbHVkZXM6IGluY2x1ZGVzLFxuICAgICAgICBmaW5kSW5kZXg6IGZpbmRJbmRleCxcbiAgICAgICAgaXNBcnJheTogaXNBcnJheSxcbiAgICAgICAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgICAgICAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICAgICAgICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICAgICAgICBpc1dpbmRvdzogaXNXaW5kb3csXG4gICAgICAgIGlzRG9jdW1lbnQ6IGlzRG9jdW1lbnQsXG4gICAgICAgIGlzSlF1ZXJ5OiBpc0pRdWVyeSxcbiAgICAgICAgaXNOb2RlOiBpc05vZGUsXG4gICAgICAgIGlzRWxlbWVudDogaXNFbGVtZW50LFxuICAgICAgICBpc05vZGVDb2xsZWN0aW9uOiBpc05vZGVDb2xsZWN0aW9uLFxuICAgICAgICBpc0Jvb2xlYW46IGlzQm9vbGVhbixcbiAgICAgICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICAgICAgICBpc051bWJlcjogaXNOdW1iZXIsXG4gICAgICAgIGlzTnVtZXJpYzogaXNOdW1lcmljLFxuICAgICAgICBpc0VtcHR5OiBpc0VtcHR5LFxuICAgICAgICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gICAgICAgIHRvQm9vbGVhbjogdG9Cb29sZWFuLFxuICAgICAgICB0b051bWJlcjogdG9OdW1iZXIsXG4gICAgICAgIHRvRmxvYXQ6IHRvRmxvYXQsXG4gICAgICAgIHRvTm9kZTogdG9Ob2RlLFxuICAgICAgICB0b05vZGVzOiB0b05vZGVzLFxuICAgICAgICB0b1dpbmRvdzogdG9XaW5kb3csXG4gICAgICAgIHRvTGlzdDogdG9MaXN0LFxuICAgICAgICB0b01zOiB0b01zLFxuICAgICAgICBpc0VxdWFsOiBpc0VxdWFsLFxuICAgICAgICBzd2FwOiBzd2FwLFxuICAgICAgICBhc3NpZ246IGFzc2lnbixcbiAgICAgICAgbGFzdDogbGFzdCxcbiAgICAgICAgZWFjaDogZWFjaCxcbiAgICAgICAgc29ydEJ5OiBzb3J0QnksXG4gICAgICAgIHVuaXF1ZUJ5OiB1bmlxdWVCeSxcbiAgICAgICAgY2xhbXA6IGNsYW1wLFxuICAgICAgICBub29wOiBub29wLFxuICAgICAgICBpbnRlcnNlY3RSZWN0OiBpbnRlcnNlY3RSZWN0LFxuICAgICAgICBwb2ludEluUmVjdDogcG9pbnRJblJlY3QsXG4gICAgICAgIERpbWVuc2lvbnM6IERpbWVuc2lvbnMsXG4gICAgICAgIE1vdXNlVHJhY2tlcjogTW91c2VUcmFja2VyLFxuICAgICAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICAgICAgcGFyc2VPcHRpb25zOiBwYXJzZU9wdGlvbnMsXG4gICAgICAgIHBsYXk6IHBsYXksXG4gICAgICAgIHBhdXNlOiBwYXVzZSxcbiAgICAgICAgbXV0ZTogbXV0ZSxcbiAgICAgICAgUHJvbWlzZTogUHJvbWlzZSxcbiAgICAgICAgRGVmZXJyZWQ6IERlZmVycmVkLFxuICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgcXVlcnlBbGw6IHF1ZXJ5QWxsLFxuICAgICAgICBmaW5kOiBmaW5kLFxuICAgICAgICBmaW5kQWxsOiBmaW5kQWxsLFxuICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgICBjbG9zZXN0OiBjbG9zZXN0LFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgIGNzczogY3NzLFxuICAgICAgICBnZXRTdHlsZXM6IGdldFN0eWxlcyxcbiAgICAgICAgZ2V0U3R5bGU6IGdldFN0eWxlLFxuICAgICAgICBnZXRDc3NWYXI6IGdldENzc1ZhcixcbiAgICAgICAgcHJvcE5hbWU6IHByb3BOYW1lLFxuICAgICAgICBpc0luVmlldzogaXNJblZpZXcsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxJbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgIHNjcm9sbGVkT3Zlcjogc2Nyb2xsZWRPdmVyLFxuICAgICAgICBzY3JvbGxQYXJlbnRzOiBzY3JvbGxQYXJlbnRzLFxuICAgICAgICBnZXRWaWV3cG9ydDogZ2V0Vmlld3BvcnRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdsb2JhbEFQSSAoVUlraXQpIHtcblxuICAgICAgICB2YXIgREFUQSA9IFVJa2l0LmRhdGE7XG5cbiAgICAgICAgVUlraXQudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuXG4gICAgICAgICAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx1Z2luLmNhbGwobnVsbCwgdGhpcyk7XG4gICAgICAgICAgICBwbHVnaW4uaW5zdGFsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4sIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gKGlzU3RyaW5nKGNvbXBvbmVudCkgPyBVSWtpdC5jb21wb25lbnQoY29tcG9uZW50KSA6IGNvbXBvbmVudCkgfHwgdGhpcztcbiAgICAgICAgICAgIGNvbXBvbmVudC5vcHRpb25zID0gbWVyZ2VPcHRpb25zKGNvbXBvbmVudC5vcHRpb25zLCBtaXhpbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQuZXh0ZW5kID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVUlraXRDb21wb25lbnQob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICAgICAgICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFN1cGVyLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBTdWIuc3VwZXIgPSBTdXBlcjtcbiAgICAgICAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG5cbiAgICAgICAgICAgIHJldHVybiBTdWI7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQudXBkYXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGUpIHtcblxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgPyB0b05vZGUoZWxlbWVudCkgOiBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgICAgICBwYXJlbnRzKGVsZW1lbnQpLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiB1cGRhdGUoZWxlbWVudFtEQVRBXSwgZSk7IH0pO1xuICAgICAgICAgICAgYXBwbHkoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHVwZGF0ZShlbGVtZW50W0RBVEFdLCBlKTsgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udGFpbmVyO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVUlraXQsICdjb250YWluZXInLCB7XG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoZGF0YSwgZSkge1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW25hbWVdLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXS5fY2FsbFVwZGF0ZShlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhvb2tzQVBJIChVSWtpdCkge1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbEhvb2sgPSBmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy4kb3B0aW9uc1tob29rXTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMkMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbENvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZWRzID0ge307XG4gICAgICAgICAgICB0aGlzLl9mcmFtZXMgPSB7cmVhZHM6IHt9LCB3cml0ZXM6IHt9fTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdFByb3BzKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVDb25uZWN0Jyk7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0RXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0T2JzZXJ2ZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbERpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVEaXNjb25uZWN0Jyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Rpc2Nvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbFVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgIGlmICggZSA9PT0gdm9pZCAwICkgZSA9ICd1cGRhdGUnO1xuXG5cbiAgICAgICAgICAgIHZhciB0eXBlID0gZS50eXBlIHx8IGU7XG5cbiAgICAgICAgICAgIGlmIChpbmNsdWRlcyhbJ3VwZGF0ZScsICdyZXNpemUnXSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsV2F0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdXBkYXRlcyA9IHRoaXMuJG9wdGlvbnMudXBkYXRlO1xuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuX2ZyYW1lcztcbiAgICAgICAgICAgIHZhciByZWFkcyA9IHJlZi5yZWFkcztcbiAgICAgICAgICAgIHZhciB3cml0ZXMgPSByZWYud3JpdGVzO1xuXG4gICAgICAgICAgICBpZiAoIXVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocmVmLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWQgPSByZWYucmVhZDtcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGUgPSByZWYud3JpdGU7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHJlZi5ldmVudHM7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAndXBkYXRlJyAmJiAhaW5jbHVkZXMoZXZlbnRzLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlYWQgJiYgIWluY2x1ZGVzKGZhc3Rkb20ucmVhZHMsIHJlYWRzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkc1tpXSA9IGZhc3Rkb20ucmVhZChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzJDEuX2Nvbm5lY3RlZCAmJiByZWFkLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiB3cml0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhc3Rkb20uY2xlYXIod3JpdGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduKHRoaXMkMS5fZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHdyaXRlICYmICFpbmNsdWRlcyhmYXN0ZG9tLndyaXRlcywgd3JpdGVzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXNbaV0gPSBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5fY29ubmVjdGVkICYmIHdyaXRlLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9jYWxsV2F0Y2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9mcmFtZXMgPSByZWYuX2ZyYW1lcztcblxuICAgICAgICAgICAgaWYgKF9mcmFtZXMuX3dhdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5pdGl0YWwgPSAhaGFzT3duKF9mcmFtZXMsICdfd2F0Y2gnKTtcblxuICAgICAgICAgICAgX2ZyYW1lcy5fd2F0Y2ggPSBmYXN0ZG9tLnJlYWQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzJDEuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMTtcbiAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWQgPSByZWYuJG9wdGlvbnMuY29tcHV0ZWQ7XG4gICAgICAgICAgICAgICAgdmFyIF9jb21wdXRlZHMgPSByZWYuX2NvbXB1dGVkcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNQcmV2ID0gaGFzT3duKF9jb21wdXRlZHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gX2NvbXB1dGVkc1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfY29tcHV0ZWRzW2tleV07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gY29tcHV0ZWRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGNoID0gcmVmJDEud2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbW1lZGlhdGUgPSByZWYkMS5pbW1lZGlhdGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aXRhbCAmJiBpbW1lZGlhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGhhc1ByZXYgJiYgIWlzRXF1YWwocHJldiwgdGhpcyQxW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmNhbGwodGhpcyQxLCB0aGlzJDFba2V5XSwgcHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9mcmFtZXMuX3dhdGNoID0gbnVsbDtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXRlQVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciB1aWQgPSAwO1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gbm9ybWFsaXplRGF0YShvcHRpb25zLCB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucywgb3B0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLiRlbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiRwcm9wcyA9IHt9O1xuXG4gICAgICAgICAgICB0aGlzLl91aWQgPSB1aWQrKztcbiAgICAgICAgICAgIHRoaXMuX2luaXREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0TWV0aG9kcygpO1xuICAgICAgICAgICAgdGhpcy5faW5pdENvbXB1dGVkcygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2NyZWF0ZWQnKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtb3VudChvcHRpb25zLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7IGlmICggZGF0YSA9PT0gdm9pZCAwICkgZGF0YSA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSB0aGlzW2tleV0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0TWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IHJlZi5tZXRob2RzO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG1ldGhvZHNba2V5XS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRDb21wdXRlZHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkID0gcmVmLmNvbXB1dGVkO1xuXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlZHMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcHV0ZWQodGhpcywga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0UHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcblxuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCBnZXRQcm9wcyh0aGlzLiRvcHRpb25zLCB0aGlzLiRuYW1lKTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGV4Y2x1ZGUgPSBbdGhpcy4kb3B0aW9ucy5jb21wdXRlZCwgdGhpcy4kb3B0aW9ucy5tZXRob2RzXTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIHRoaXMuJHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wcyAmJiBub3RJbihleGNsdWRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHRoaXMuJHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBldmVudHMgPSByZWYuZXZlbnRzO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRzKSB7XG5cbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093bihldmVudCwgJ2hhbmRsZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJFdmVudCh0aGlzJDEsIGV2ZW50W2tleV0sIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50KHRoaXMkMSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX3VuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh1bmJpbmQpIHsgcmV0dXJuIHVuYmluZCgpOyB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0T2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBhdHRycyA9IHJlZi5hdHRycztcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICAgICAgICAgIHZhciBlbCA9IHJlZi5lbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlciB8fCAhcHJvcHMgfHwgYXR0cnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRycyA9IGlzQXJyYXkoYXR0cnMpID8gYXR0cnMgOiBPYmplY3Qua2V5cyhwcm9wcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKHJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldFByb3BzKHRoaXMkMS4kb3B0aW9ucywgdGhpcyQxLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkcy5zb21lKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSByZWYuYXR0cmlidXRlTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnZGF0YS0nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJvcCA9PT0gdGhpcyQxLiRuYW1lID8gYXR0cnMgOiBbY2FtZWxpemUocHJvcCksIGNhbWVsaXplKGF0dHJpYnV0ZU5hbWUpXSkuc29tZShmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gIWlzVW5kZWZpbmVkKGRhdGFbcHJvcF0pICYmIGRhdGFbcHJvcF0gIT09IHRoaXMkMS4kcHJvcHNbcHJvcF07IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGF0dHJzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBoeXBoZW5hdGUoa2V5KTsgfSkuY29uY2F0KHRoaXMuJG5hbWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKGVsLCB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IGZpbHRlci5jb25jYXQoZmlsdGVyLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoXCJkYXRhLVwiICsga2V5KTsgfSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRQcm9wcyhvcHRzLCBuYW1lKSB7XG5cbiAgICAgICAgICAgIHZhciBkYXRhJDEgPSB7fTtcbiAgICAgICAgICAgIHZhciBhcmdzID0gb3B0cy5hcmdzOyBpZiAoIGFyZ3MgPT09IHZvaWQgMCApIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IG9wdHMucHJvcHM7IGlmICggcHJvcHMgPT09IHZvaWQgMCApIHByb3BzID0ge307XG4gICAgICAgICAgICB2YXIgZWwgPSBvcHRzLmVsO1xuXG4gICAgICAgICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEkMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBkYXRhKGVsLCBwcm9wKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc1trZXldID09PSBCb29sZWFuICYmIHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICAgICAgOiBjb2VyY2UocHJvcHNba2V5XSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICd0YXJnZXQnICYmICghdmFsdWUgfHwgc3RhcnRzV2l0aCh2YWx1ZSwgJ18nKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YSQxW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBwYXJzZU9wdGlvbnMoZGF0YShlbCwgbmFtZSksIGFyZ3MpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkkMSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3AkMSA9IGNhbWVsaXplKGtleSQxKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNbcHJvcCQxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEkMVtwcm9wJDFdID0gY29lcmNlKHByb3BzW3Byb3AkMV0sIG9wdGlvbnNba2V5JDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhJDE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWdpc3RlckNvbXB1dGVkKGNvbXBvbmVudCwga2V5LCBjYikge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbXBvbmVudCwga2V5LCB7XG5cbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgX2NvbXB1dGVkcyA9IGNvbXBvbmVudC5fY29tcHV0ZWRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHByb3BzID0gY29tcG9uZW50LiRwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9IGNvbXBvbmVudC4kZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNPd24oX2NvbXB1dGVkcywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbXB1dGVkc1trZXldID0gKGNiLmdldCB8fCBjYikuY2FsbChjb21wb25lbnQsICRwcm9wcywgJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29tcHV0ZWRzW2tleV07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgX2NvbXB1dGVkcyA9IGNvbXBvbmVudC5fY29tcHV0ZWRzO1xuXG4gICAgICAgICAgICAgICAgICAgIF9jb21wdXRlZHNba2V5XSA9IGNiLnNldCA/IGNiLnNldC5jYWxsKGNvbXBvbmVudCwgdmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKF9jb21wdXRlZHNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfY29tcHV0ZWRzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJFdmVudChjb21wb25lbnQsIGV2ZW50LCBrZXkpIHtcblxuICAgICAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gKHtuYW1lOiBrZXksIGhhbmRsZXI6IGV2ZW50fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuYW1lID0gZXZlbnQubmFtZTtcbiAgICAgICAgICAgIHZhciBlbCA9IGV2ZW50LmVsO1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBldmVudC5oYW5kbGVyO1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBldmVudC5jYXB0dXJlO1xuICAgICAgICAgICAgdmFyIHBhc3NpdmUgPSBldmVudC5wYXNzaXZlO1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRlID0gZXZlbnQuZGVsZWdhdGU7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZXZlbnQuZmlsdGVyO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBldmVudC5zZWxmO1xuICAgICAgICAgICAgZWwgPSBpc0Z1bmN0aW9uKGVsKVxuICAgICAgICAgICAgICAgID8gZWwuY2FsbChjb21wb25lbnQpXG4gICAgICAgICAgICAgICAgOiBlbCB8fCBjb21wb25lbnQuJGVsO1xuXG4gICAgICAgICAgICBpZiAoaXNBcnJheShlbCkpIHtcbiAgICAgICAgICAgICAgICBlbC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gcmVnaXN0ZXJFdmVudChjb21wb25lbnQsIGFzc2lnbih7fSwgZXZlbnQsIHtlbDogZWx9KSwga2V5KTsgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWVsIHx8IGZpbHRlciAmJiAhZmlsdGVyLmNhbGwoY29tcG9uZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tcG9uZW50Ll9ldmVudHMucHVzaChcbiAgICAgICAgICAgICAgICBvbihcbiAgICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICFkZWxlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlzU3RyaW5nKGRlbGVnYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGVsZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlbGVnYXRlLmNhbGwoY29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAgICAgaXNTdHJpbmcoaGFuZGxlcikgPyBjb21wb25lbnRbaGFuZGxlcl0gOiBoYW5kbGVyLmJpbmQoY29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAgICAge3Bhc3NpdmU6IHBhc3NpdmUsIGNhcHR1cmU6IGNhcHR1cmUsIHNlbGY6IHNlbGZ9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbm90SW4ob3B0aW9ucywga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAoYXJyKSB7IHJldHVybiAhYXJyIHx8ICFoYXNPd24oYXJyLCBrZXkpOyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvZXJjZSh0eXBlLCB2YWx1ZSkge1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gQm9vbGVhbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9MaXN0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPyB0eXBlKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplRGF0YShyZWYsIHJlZiQxKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuICAgICAgICAgICAgdmFyIGVsID0gcmVmLmVsO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSByZWYkMS5hcmdzO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gcmVmJDEucHJvcHM7IGlmICggcHJvcHMgPT09IHZvaWQgMCApIHByb3BzID0ge307XG5cbiAgICAgICAgICAgIGRhdGEgPSBpc0FycmF5KGRhdGEpXG4gICAgICAgICAgICAgICAgPyAhaXNFbXB0eShhcmdzKVxuICAgICAgICAgICAgICAgICAgICA/IGRhdGEuc2xpY2UoMCwgYXJncy5sZW5ndGgpLnJlZHVjZShmdW5jdGlvbiAoZGF0YSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZGF0YSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2FyZ3NbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIDogZGF0YTtcblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoZGF0YVtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IHByb3BzW2tleV0gPyBjb2VyY2UocHJvcHNba2V5XSwgZGF0YVtrZXldKSA6IGRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YW5jZUFQSSAoVUlraXQpIHtcblxuICAgICAgICB2YXIgREFUQSA9IFVJa2l0LmRhdGE7XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLiRjcmVhdGUgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBlbGVtZW50LCBkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gVUlraXRbY29tcG9uZW50XShlbGVtZW50LCBkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcblxuICAgICAgICAgICAgaWYgKCFlbFtEQVRBXSkge1xuICAgICAgICAgICAgICAgIGVsW0RBVEFdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbFtEQVRBXVtuYW1lXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxbREFUQV1bbmFtZV0gPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLiRlbCA9IHRoaXMuJG9wdGlvbnMuZWwgPSB0aGlzLiRvcHRpb25zLmVsIHx8IGVsO1xuXG4gICAgICAgICAgICBpZiAod2l0aGluKGVsLCBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsQ29ubmVjdGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLiRyZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxEaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxDb25uZWN0ZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAocmVtb3ZlRWwpIHtcbiAgICAgICAgICAgIGlmICggcmVtb3ZlRWwgPT09IHZvaWQgMCApIHJlbW92ZUVsID0gZmFsc2U7XG5cblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgZWwgPSByZWYuZWw7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsRGlzY29ubmVjdGVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdkZXN0cm95Jyk7XG5cbiAgICAgICAgICAgIGlmICghZWwgfHwgIWVsW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgZWxbREFUQV1bbmFtZV07XG5cbiAgICAgICAgICAgIGlmICghaXNFbXB0eShlbFtEQVRBXSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZWxbREFUQV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW1vdmVFbCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLiRlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxVcGRhdGUoZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLiR1cGRhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgZSkge1xuICAgICAgICAgICAgaWYgKCBlbGVtZW50ID09PSB2b2lkIDAgKSBlbGVtZW50ID0gdGhpcy4kZWw7XG5cbiAgICAgICAgICAgIFVJa2l0LnVwZGF0ZShlbGVtZW50LCBlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGdldENvbXBvbmVudCA9IFVJa2l0LmdldENvbXBvbmVudDtcblxuICAgICAgICB2YXIgbmFtZXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVUlraXQucHJvdG90eXBlLCB7XG5cbiAgICAgICAgICAgICRjb250YWluZXI6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoVUlraXQsICdjb250YWluZXInKSxcblxuICAgICAgICAgICAgJG5hbWU6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmFtZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzW25hbWVdID0gVUlraXQucHJlZml4ICsgaHlwaGVuYXRlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcG9uZW50QVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciBEQVRBID0gVUlraXQuZGF0YTtcblxuICAgICAgICB2YXIgY29tcG9uZW50cyA9IHt9O1xuXG4gICAgICAgIFVJa2l0LmNvbXBvbmVudCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIHZhciBpZCA9IGh5cGhlbmF0ZShuYW1lKTtcblxuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKGlkKTtcblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChjb21wb25lbnRzW25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzW25hbWVdID0gVUlraXQuZXh0ZW5kKGNvbXBvbmVudHNbbmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRzW25hbWVdO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFVJa2l0W25hbWVdID0gZnVuY3Rpb24gKGVsZW1lbnQsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3NBcnJheSA9IEFycmF5KGkpO1xuICAgICAgICAgICAgICAgIHdoaWxlICggaS0tICkgYXJnc0FycmF5W2ldID0gYXJndW1lbnRzW2ldO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gVUlraXQuY29tcG9uZW50KG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgY29tcG9uZW50KHtkYXRhOiBpc1BsYWluT2JqZWN0KGVsZW1lbnQpID8gZWxlbWVudCA6IFtdLmNvbmNhdCggYXJnc0FycmF5ICl9KVxuICAgICAgICAgICAgICAgICAgICA6ICFlbGVtZW50ID8gaW5pdChlbGVtZW50KSA6ICQkKGVsZW1lbnQpLm1hcChpbml0KVswXTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQoZWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IFVJa2l0LmdldENvbXBvbmVudChlbGVtZW50LCBuYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHtlbDogZWxlbWVudCwgZGF0YTogZGF0YX0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgb3B0ID0gaXNQbGFpbk9iamVjdChvcHRpb25zKSA/IGFzc2lnbih7fSwgb3B0aW9ucykgOiBvcHRpb25zLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIG9wdC5uYW1lID0gbmFtZTtcblxuICAgICAgICAgICAgaWYgKG9wdC5pbnN0YWxsKSB7XG4gICAgICAgICAgICAgICAgb3B0Lmluc3RhbGwoVUlraXQsIG9wdCwgbmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChVSWtpdC5faW5pdGlhbGl6ZWQgJiYgIW9wdC5mdW5jdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgZmFzdGRvbS5yZWFkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFVJa2l0W25hbWVdKChcIlt1ay1cIiArIGlkICsgXCJdLFtkYXRhLXVrLVwiICsgaWQgKyBcIl1cIikpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMpID8gb3B0IDogb3B0aW9ucztcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5nZXRDb21wb25lbnRzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudFtEQVRBXSB8fCB7fTsgfTtcbiAgICAgICAgVUlraXQuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIG5hbWUpIHsgcmV0dXJuIFVJa2l0LmdldENvbXBvbmVudHMoZWxlbWVudClbbmFtZV07IH07XG5cbiAgICAgICAgVUlraXQuY29ubmVjdCA9IGZ1bmN0aW9uIChub2RlKSB7XG5cbiAgICAgICAgICAgIGlmIChub2RlW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVbREFUQV1bbmFtZV0uX2NhbGxDb25uZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmFtZSQxID0gZ2V0Q29tcG9uZW50TmFtZShub2RlLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmFtZSQxICYmIG5hbWUkMSBpbiBjb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIFVJa2l0W25hbWUkMV0obm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZVtEQVRBXSkge1xuICAgICAgICAgICAgICAgIG5vZGVbREFUQV1bbmFtZV0uX2NhbGxEaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiBzdGFydHNXaXRoKGF0dHJpYnV0ZSwgJ3VrLScpIHx8IHN0YXJ0c1dpdGgoYXR0cmlidXRlLCAnZGF0YS11ay0nKVxuICAgICAgICAgICAgPyBjYW1lbGl6ZShhdHRyaWJ1dGUucmVwbGFjZSgnZGF0YS11ay0nLCAnJykucmVwbGFjZSgndWstJywgJycpKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgVUlraXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBVSWtpdC51dGlsID0gdXRpbDtcbiAgICBVSWtpdC5kYXRhID0gJ19fdWlraXRfXyc7XG4gICAgVUlraXQucHJlZml4ID0gJ3VrLSc7XG4gICAgVUlraXQub3B0aW9ucyA9IHt9O1xuICAgIFVJa2l0LnZlcnNpb24gPSAnMy41LjgnO1xuXG4gICAgZ2xvYmFsQVBJKFVJa2l0KTtcbiAgICBob29rc0FQSShVSWtpdCk7XG4gICAgc3RhdGVBUEkoVUlraXQpO1xuICAgIGNvbXBvbmVudEFQSShVSWtpdCk7XG4gICAgaW5zdGFuY2VBUEkoVUlraXQpO1xuXG4gICAgZnVuY3Rpb24gQ29yZSAoVUlraXQpIHtcblxuICAgICAgICBpbkJyb3dzZXIgJiYgcmVhZHkoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBVSWtpdC51cGRhdGUoKTtcbiAgICAgICAgICAgIG9uKHdpbmRvdywgJ2xvYWQgcmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gVUlraXQudXBkYXRlKG51bGwsICdyZXNpemUnKTsgfSk7XG4gICAgICAgICAgICBvbihkb2N1bWVudCwgJ2xvYWRlZG1ldGFkYXRhIGxvYWQnLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gVUlraXQudXBkYXRlKHRhcmdldCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIHRocm90dGxlIGBzY3JvbGxgIGV2ZW50IChTYWZhcmkgdHJpZ2dlcnMgbXVsdGlwbGUgYHNjcm9sbGAgZXZlbnRzIHBlciBmcmFtZSlcbiAgICAgICAgICAgIHZhciBwZW5kaW5nO1xuICAgICAgICAgICAgb24od2luZG93LCAnc2Nyb2xsJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZmFzdGRvbS53cml0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBwZW5kaW5nID0gZmFsc2U7IH0pO1xuXG4gICAgICAgICAgICAgICAgVUlraXQudXBkYXRlKG51bGwsIGUudHlwZSk7XG5cbiAgICAgICAgICAgIH0sIHtwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlfSk7XG5cbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gMDtcbiAgICAgICAgICAgIG9uKGRvY3VtZW50LCAnYW5pbWF0aW9uc3RhcnQnLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoKGNzcyh0YXJnZXQsICdhbmltYXRpb25OYW1lJykgfHwgJycpLm1hdGNoKC9edWstLioobGVmdHxyaWdodCkvKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgY3NzKGRvY3VtZW50LmJvZHksICdvdmVyZmxvd1gnLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93WCcsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdG9Ncyhjc3ModGFyZ2V0LCAnYW5pbWF0aW9uRHVyYXRpb24nKSkgKyAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICB2YXIgb2ZmO1xuICAgICAgICAgICAgb24oZG9jdW1lbnQsIHBvaW50ZXJEb3duLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgb2ZmICYmIG9mZigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgU3dpcGUgR2VzdHVyZVxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBnZXRFdmVudFBvcyhlKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJ3RhZ05hbWUnIGluIGUudGFyZ2V0ID8gZS50YXJnZXQgOiBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIG9mZiA9IG9uY2UoZG9jdW1lbnQsIChwb2ludGVyVXAgKyBcIiBcIiArIHBvaW50ZXJDYW5jZWwpLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBnZXRFdmVudFBvcyhlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSByZWYueDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSByZWYueTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzd2lwZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHggJiYgTWF0aC5hYnMocG9zLnggLSB4KSA+IDEwMCB8fCB5ICYmIE1hdGguYWJzKHBvcy55IC0geSkgPiAxMDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsICdzd2lwZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCAoXCJzd2lwZVwiICsgKHN3aXBlRGlyZWN0aW9uKHBvcy54LCBwb3MueSwgeCwgeSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSwge3Bhc3NpdmU6IHRydWV9KTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN3aXBlRGlyZWN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyh4MSAtIHgyKSA+PSBNYXRoLmFicyh5MSAtIHkyKVxuICAgICAgICAgICAgPyB4MSAtIHgyID4gMFxuICAgICAgICAgICAgICAgID8gJ0xlZnQnXG4gICAgICAgICAgICAgICAgOiAnUmlnaHQnXG4gICAgICAgICAgICA6IHkxIC0geTIgPiAwXG4gICAgICAgICAgICAgICAgPyAnVXAnXG4gICAgICAgICAgICAgICAgOiAnRG93bic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYm9vdCAoVUlraXQpIHtcblxuICAgICAgICB2YXIgY29ubmVjdCA9IFVJa2l0LmNvbm5lY3Q7XG4gICAgICAgIHZhciBkaXNjb25uZWN0ID0gVUlraXQuZGlzY29ubmVjdDtcblxuICAgICAgICBpZiAoIWluQnJvd3NlciB8fCAhd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZhc3Rkb20ucmVhZChpbml0KTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgICAgIGFwcGx5KGRvY3VtZW50LmJvZHksIGNvbm5lY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAobmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVzID0gW107XG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7IHJldHVybiBhcHBseU11dGF0aW9uKG11dGF0aW9uLCB1cGRhdGVzKTsgfSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gVUlraXQudXBkYXRlKGVsKTsgfSk7XG4gICAgICAgICAgICB9KSkub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFVJa2l0Ll9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcHBseU11dGF0aW9uKG11dGF0aW9uLCB1cGRhdGVzKSB7XG5cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBtdXRhdGlvbi50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IG11dGF0aW9uLnR5cGU7XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSB0eXBlICE9PSAnYXR0cmlidXRlcydcbiAgICAgICAgICAgICAgICA/IGFwcGx5Q2hpbGRMaXN0KG11dGF0aW9uKVxuICAgICAgICAgICAgICAgIDogYXBwbHlBdHRyaWJ1dGUobXV0YXRpb24pO1xuXG4gICAgICAgICAgICBpZiAodXBkYXRlICYmICF1cGRhdGVzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuY29udGFpbnModGFyZ2V0KTsgfSkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLnB1c2godGFyZ2V0LmNvbnRhaW5zID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGUpOyAvLyBJRSAxMSB0ZXh0IG5vZGUgZG9lcyBub3QgaW1wbGVtZW50IGNvbnRhaW5zXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5QXR0cmlidXRlKHJlZikge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHJlZi5hdHRyaWJ1dGVOYW1lO1xuXG5cbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSAnaHJlZicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGF0dHJpYnV0ZU5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgIShuYW1lIGluIFVJa2l0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0F0dHIodGFyZ2V0LCBhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIFVJa2l0W25hbWVdKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBVSWtpdC5nZXRDb21wb25lbnQodGFyZ2V0LCBuYW1lKTtcblxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcHBseUNoaWxkTGlzdChyZWYpIHtcbiAgICAgICAgICAgIHZhciBhZGRlZE5vZGVzID0gcmVmLmFkZGVkTm9kZXM7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzID0gcmVmLnJlbW92ZWROb2RlcztcblxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcHBseShhZGRlZE5vZGVzW2ldLCBjb25uZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICBhcHBseShyZW1vdmVkTm9kZXNbaSQxXSwgZGlzY29ubmVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YXIgQ2xhc3MgPSB7XG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICFoYXNDbGFzcyh0aGlzLiRlbCwgdGhpcy4kbmFtZSkgJiYgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuJG5hbWUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIFRvZ2dsYWJsZSA9IHtcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xzOiBCb29sZWFuLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnbGlzdCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogTnVtYmVyLFxuICAgICAgICAgICAgb3JpZ2luOiBTdHJpbmcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjbHM6IGZhbHNlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBbZmFsc2VdLFxuICAgICAgICAgICAgZHVyYXRpb246IDIwMCxcbiAgICAgICAgICAgIG9yaWdpbjogZmFsc2UsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnbGluZWFyJyxcblxuICAgICAgICAgICAgaW5pdFByb3BzOiB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICcnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogJycsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogJycsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcnXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBoYXNBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSByZWYuYW5pbWF0aW9uO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhYW5pbWF0aW9uWzBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFzVHJhbnNpdGlvbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHJlZi5hbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNBbmltYXRpb24gJiYgYW5pbWF0aW9uWzBdID09PSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICB0b2dnbGVFbGVtZW50OiBmdW5jdGlvbih0YXJnZXRzLCBzaG93LCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodG9Ob2Rlcyh0YXJnZXRzKS5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gdGhpcyQxLl90b2dnbGVFbGVtZW50KGVsLCBzaG93LCBhbmltYXRlKS50aGVuKHJlc29sdmUsIG5vb3ApOyB9XG4gICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzVG9nZ2xlZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSB0b05vZGVzKGVsIHx8IHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jbHNcbiAgICAgICAgICAgICAgICAgICAgPyBoYXNDbGFzcyhub2RlcywgdGhpcy5jbHMuc3BsaXQoJyAnKVswXSlcbiAgICAgICAgICAgICAgICAgICAgOiAhaGFzQXR0cihub2RlcywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlQXJpYTogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIoZWwsICdhcmlhLWhpZGRlbicsICF0aGlzLmlzVG9nZ2xlZChlbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF90b2dnbGVFbGVtZW50OiBmdW5jdGlvbihlbCwgc2hvdywgYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBzaG93ID0gaXNCb29sZWFuKHNob3cpXG4gICAgICAgICAgICAgICAgICAgID8gc2hvd1xuICAgICAgICAgICAgICAgICAgICA6IEFuaW1hdGlvbi5pblByb2dyZXNzKGVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBoYXNDbGFzcyhlbCwgJ3VrLWFuaW1hdGlvbi1sZWF2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFRyYW5zaXRpb24uaW5Qcm9ncmVzcyhlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVsLnN0eWxlLmhlaWdodCA9PT0gJzBweCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICF0aGlzLmlzVG9nZ2xlZChlbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyaWdnZXIoZWwsIChcImJlZm9yZVwiICsgKHNob3cgPyAnc2hvdycgOiAnaGlkZScpKSwgW3RoaXNdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IChcbiAgICAgICAgICAgICAgICAgICAgaXNGdW5jdGlvbihhbmltYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBhbmltYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFuaW1hdGUgPT09IGZhbHNlIHx8ICF0aGlzLmhhc0FuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5fdG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhhc1RyYW5zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0b2dnbGVIZWlnaHQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0b2dnbGVBbmltYXRpb24odGhpcylcbiAgICAgICAgICAgICAgICApKGVsLCBzaG93KTtcblxuICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIHNob3cgPyAnc2hvdycgOiAnaGlkZScsIFt0aGlzXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIHNob3cgPyAnc2hvd24nIDogJ2hpZGRlbicsIFt0aGlzJDFdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUoZWwpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHByb21pc2UgfHwgUHJvbWlzZS5yZXNvbHZlKCkpLnRoZW4oZmluYWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3RvZ2dsZTogZnVuY3Rpb24oZWwsIHRvZ2dsZWQpIHtcblxuICAgICAgICAgICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvZ2dsZWQgPSBCb29sZWFuKHRvZ2dsZWQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBpbmNsdWRlcyh0aGlzLmNscywgJyAnKSB8fCB0b2dnbGVkICE9PSBoYXNDbGFzcyhlbCwgdGhpcy5jbHMpO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkICYmIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLmNscywgaW5jbHVkZXModGhpcy5jbHMsICcgJykgPyB1bmRlZmluZWQgOiB0b2dnbGVkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdG9nZ2xlZCA9PT0gZWwuaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkICYmIChlbC5oaWRkZW4gPSAhdG9nZ2xlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJCQoJ1thdXRvZm9jdXNdJywgZWwpLnNvbWUoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBpc1Zpc2libGUoZWwpID8gZWwuZm9jdXMoKSB8fCB0cnVlIDogZWwuYmx1cigpOyB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXJpYShlbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKGVsLCAndG9nZ2xlZCcsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZShlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVIZWlnaHQocmVmKSB7XG4gICAgICAgIHZhciBpc1RvZ2dsZWQgPSByZWYuaXNUb2dnbGVkO1xuICAgICAgICB2YXIgZHVyYXRpb24gPSByZWYuZHVyYXRpb247XG4gICAgICAgIHZhciBpbml0UHJvcHMgPSByZWYuaW5pdFByb3BzO1xuICAgICAgICB2YXIgaGlkZVByb3BzID0gcmVmLmhpZGVQcm9wcztcbiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSByZWYudHJhbnNpdGlvbjtcbiAgICAgICAgdmFyIF90b2dnbGUgPSByZWYuX3RvZ2dsZTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsLCBzaG93KSB7XG5cbiAgICAgICAgICAgIHZhciBpblByb2dyZXNzID0gVHJhbnNpdGlvbi5pblByb2dyZXNzKGVsKTtcbiAgICAgICAgICAgIHZhciBpbm5lciA9IGVsLmhhc0NoaWxkTm9kZXMgPyB0b0Zsb2F0KGNzcyhlbC5maXJzdEVsZW1lbnRDaGlsZCwgJ21hcmdpblRvcCcpKSArIHRvRmxvYXQoY3NzKGVsLmxhc3RFbGVtZW50Q2hpbGQsICdtYXJnaW5Cb3R0b20nKSkgOiAwO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBpc1Zpc2libGUoZWwpID8gaGVpZ2h0KGVsKSArIChpblByb2dyZXNzID8gMCA6IGlubmVyKSA6IDA7XG5cbiAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKGVsKTtcblxuICAgICAgICAgICAgaWYgKCFpc1RvZ2dsZWQoZWwpKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZShlbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhlaWdodChlbCwgJycpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2hpbGQgY29tcG9uZW50cyBmaXJzdFxuICAgICAgICAgICAgZmFzdGRvbS5mbHVzaCgpO1xuXG4gICAgICAgICAgICB2YXIgZW5kSGVpZ2h0ID0gaGVpZ2h0KGVsKSArIChpblByb2dyZXNzID8gMCA6IGlubmVyKTtcbiAgICAgICAgICAgIGhlaWdodChlbCwgY3VycmVudEhlaWdodCk7XG5cbiAgICAgICAgICAgIHJldHVybiAoc2hvd1xuICAgICAgICAgICAgICAgID8gVHJhbnNpdGlvbi5zdGFydChlbCwgYXNzaWduKHt9LCBpbml0UHJvcHMsIHtvdmVyZmxvdzogJ2hpZGRlbicsIGhlaWdodDogZW5kSGVpZ2h0fSksIE1hdGgucm91bmQoZHVyYXRpb24gKiAoMSAtIGN1cnJlbnRIZWlnaHQgLyBlbmRIZWlnaHQpKSwgdHJhbnNpdGlvbilcbiAgICAgICAgICAgICAgICA6IFRyYW5zaXRpb24uc3RhcnQoZWwsIGhpZGVQcm9wcywgTWF0aC5yb3VuZChkdXJhdGlvbiAqIChjdXJyZW50SGVpZ2h0IC8gZW5kSGVpZ2h0KSksIHRyYW5zaXRpb24pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RvZ2dsZShlbCwgZmFsc2UpOyB9KVxuICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNzcyhlbCwgaW5pdFByb3BzKTsgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVBbmltYXRpb24oY21wKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWwsIHNob3cpIHtcblxuICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbChlbCk7XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBjbXAuYW5pbWF0aW9uO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gY21wLmR1cmF0aW9uO1xuICAgICAgICAgICAgdmFyIF90b2dnbGUgPSBjbXAuX3RvZ2dsZTtcblxuICAgICAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlKGVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5pbWF0aW9uLmluKGVsLCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbi5vdXQoZWwsIGFuaW1hdGlvblsxXSB8fCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90b2dnbGUoZWwsIGZhbHNlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEFjY29yZGlvbiA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVG9nZ2xhYmxlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0czogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBudWxsLFxuICAgICAgICAgICAgY29sbGFwc2libGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgY29udGVudDogU3RyaW5nLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXRzOiAnPiAqJyxcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IFt0cnVlXSxcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgY2xzT3BlbjogJ3VrLW9wZW4nLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAudWstYWNjb3JkaW9uLXRpdGxlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc+IC51ay1hY2NvcmRpb24tY29udGVudCcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnZWFzZScsXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpdGVtczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IHJlZi50YXJnZXRzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXRzLCAkZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oaXRlbXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGlkZSgkKHRoaXMkMS5jb250ZW50LCBlbCksICFoYXNDbGFzcyhlbCwgdGhpcyQxLmNsc09wZW4pKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgfHwgaGFzQ2xhc3MoaXRlbXMsIHRoaXMuY2xzT3BlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmFjdGl2ZSAhPT0gZmFsc2UgJiYgaXRlbXNbTnVtYmVyKHRoaXMuYWN0aXZlKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIHx8ICF0aGlzLmNvbGxhcHNpYmxlICYmIGl0ZW1zWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGFjdGl2ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnRhcmdldHMpICsgXCIgXCIgKyAodGhpcy4kcHJvcHMudG9nZ2xlKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZShpbmRleCgkJCgoKHRoaXMudGFyZ2V0cykgKyBcIiBcIiArICh0aGlzLiRwcm9wcy50b2dnbGUpKSwgdGhpcy4kZWwpLCBlLmN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihpdGVtLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFt0aGlzLml0ZW1zW2dldEluZGV4KGl0ZW0sIHRoaXMuaXRlbXMpXV07XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUl0ZW1zID0gZmlsdGVyKHRoaXMuaXRlbXMsIChcIi5cIiArICh0aGlzLmNsc09wZW4pKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUgJiYgIWluY2x1ZGVzKGFjdGl2ZUl0ZW1zLCBpdGVtc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoYWN0aXZlSXRlbXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzaWJsZSAmJiBhY3RpdmVJdGVtcy5sZW5ndGggPCAyICYmICFmaWx0ZXIoaXRlbXMsIChcIjpub3QoLlwiICsgKHRoaXMuY2xzT3BlbikgKyBcIilcIikpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRoaXMkMS50b2dnbGVFbGVtZW50KGVsLCAhaGFzQ2xhc3MoZWwsIHRoaXMkMS5jbHNPcGVuKSwgZnVuY3Rpb24gKGVsLCBzaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5jbHNPcGVuLCBzaG93KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9ICQoKFwiXCIgKyAoZWwuX3dyYXBwZXIgPyAnPiAqICcgOiAnJykgKyAodGhpcyQxLmNvbnRlbnQpKSwgZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRlID09PSBmYWxzZSB8fCAhdGhpcyQxLmhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoY29udGVudCwgIXNob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5fd3JhcHBlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX3dyYXBwZXIgPSB3cmFwQWxsKGNvbnRlbnQsIChcIjxkaXZcIiArIChzaG93ID8gJyBoaWRkZW4nIDogJycpICsgXCI+XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGhpZGUoY29udGVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9nZ2xlSGVpZ2h0KHRoaXMkMSkoZWwuX3dyYXBwZXIsIHNob3cpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZShjb250ZW50LCAhc2hvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZWwuX3dyYXBwZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bndyYXAoY29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9ICQodGhpcyQxLiRwcm9wcy50b2dnbGUsIGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5WaWV3KHRvZ2dsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcodG9nZ2xlLCB7b2Zmc2V0OiB0aGlzJDEub2Zmc2V0fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGhpZGUoZWwsIGhpZGUpIHtcbiAgICAgICAgZWwgJiYgKGVsLmhpZGRlbiA9IGhpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbGVydCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAnYW5pbWF0aW9uJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xvc2U6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogW3RydWVdLFxuICAgICAgICAgICAgc2VsQ2xvc2U6ICcudWstYWxlcnQtY2xvc2UnLFxuICAgICAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgICAgIGhpZGVQcm9wczogYXNzaWduKHtvcGFjaXR5OiAwfSwgVG9nZ2xhYmxlLmRhdGEuaGlkZVByb3BzKVxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxDbG9zZTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS4kZGVzdHJveSh0cnVlKTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBWaWRlbyA9IHtcblxuICAgICAgICBhcmdzOiAnYXV0b3BsYXknLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhdXRvbXV0ZTogQm9vbGVhbixcbiAgICAgICAgICAgIGF1dG9wbGF5OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYXV0b211dGU6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpblZpZXc6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhdXRvcGxheSA9IHJlZi5hdXRvcGxheTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBhdXRvcGxheSA9PT0gJ2ludmlldyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pblZpZXcgJiYgIWhhc0F0dHIodGhpcy4kZWwsICdwcmVsb2FkJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5wcmVsb2FkID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvbXV0ZSkge1xuICAgICAgICAgICAgICAgIG11dGUodGhpcy4kZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGlzVmlzaWJsZSh0aGlzLiRlbCkgJiYgY3NzKHRoaXMuJGVsLCAndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgaW5WaWV3OiB0aGlzLmluVmlldyAmJiBpc0luVmlldyh0aGlzLiRlbClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlID0gcmVmLnZpc2libGU7XG4gICAgICAgICAgICAgICAgdmFyIGluVmlldyA9IHJlZi5pblZpZXc7XG5cblxuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZSB8fCB0aGlzLmluVmlldyAmJiAhaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdXNlKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXV0b3BsYXkgPT09IHRydWUgfHwgdGhpcy5pblZpZXcgJiYgaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXkodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZScsICdzY3JvbGwnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgY292ZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIFZpZGVvXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgICAgIGhlaWdodDogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYXV0b211dGU6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzLiRlbDtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gZ2V0UG9zaXRpb25lZFBhcmVudChlbCkgfHwgZWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWYub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGRpbSA9IERpbWVuc2lvbnMuY292ZXIoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoIHx8IGVsLm5hdHVyYWxXaWR0aCB8fCBlbC52aWRlb1dpZHRoIHx8IGVsLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCB8fCBlbC5uYXR1cmFsSGVpZ2h0IHx8IGVsLnZpZGVvSGVpZ2h0IHx8IGVsLmNsaWVudEhlaWdodFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyAod2lkdGggJSAyID8gMSA6IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoaGVpZ2h0ICUgMiA/IDEgOiAwKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghZGltLndpZHRoIHx8ICFkaW0uaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGltO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge2hlaWdodDogaGVpZ2h0LCB3aWR0aDogd2lkdGh9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQb3NpdGlvbmVkUGFyZW50KGVsKSB7XG4gICAgICAgIHdoaWxlICgoZWwgPSBwYXJlbnQoZWwpKSkge1xuICAgICAgICAgICAgaWYgKGNzcyhlbCwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFBvc2l0aW9uID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBwb3M6IFN0cmluZyxcbiAgICAgICAgICAgIG9mZnNldDogbnVsbCxcbiAgICAgICAgICAgIGZsaXA6IEJvb2xlYW4sXG4gICAgICAgICAgICBjbHNQb3M6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBvczogKFwiYm90dG9tLVwiICsgKCFpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCcpKSxcbiAgICAgICAgICAgIGZsaXA6IHRydWUsXG4gICAgICAgICAgICBvZmZzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgY2xzUG9zOiAnJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHBvczogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IHJlZi5wb3M7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHBvcyArICghaW5jbHVkZXMocG9zLCAnLScpID8gJy1jZW50ZXInIDogJycpKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZGlyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NbMF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhbGlnbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBwb3NpdGlvbkF0OiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQsIGJvdW5kYXJ5KSB7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKGVsZW1lbnQsICgodGhpcy5jbHNQb3MpICsgXCItKHRvcHxib3R0b218bGVmdHxyaWdodCkoLVthLXpdKyk/XCIpKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQkMSA9IHJlZi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGF4aXMgPSB0aGlzLmdldEF4aXMoKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNOdW1lcmljKG9mZnNldCQxKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gJChvZmZzZXQkMSk7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCQxID0gbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvZmZzZXQobm9kZSlbYXhpcyA9PT0gJ3gnID8gJ2xlZnQnIDogJ3RvcCddIC0gb2Zmc2V0KHRhcmdldClbYXhpcyA9PT0gJ3gnID8gJ3JpZ2h0JyA6ICdib3R0b20nXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHBvc2l0aW9uQXQoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgYXhpcyA9PT0gJ3gnID8gKChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSArIFwiIFwiICsgKHRoaXMuYWxpZ24pKSA6ICgodGhpcy5hbGlnbikgKyBcIiBcIiArIChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/ICgodGhpcy5kaXIpICsgXCIgXCIgKyAodGhpcy5hbGlnbikpIDogKCh0aGlzLmFsaWduKSArIFwiIFwiICsgKHRoaXMuZGlyKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/IChcIlwiICsgKHRoaXMuZGlyID09PSAnbGVmdCcgPyAtb2Zmc2V0JDEgOiBvZmZzZXQkMSkpIDogKFwiIFwiICsgKHRoaXMuZGlyID09PSAndG9wJyA/IC1vZmZzZXQkMSA6IG9mZnNldCQxKSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcCxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlcbiAgICAgICAgICAgICAgICApLnRhcmdldDtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHJlZiQxLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSByZWYkMS55O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSBheGlzID09PSAneCcgPyB4IDogeTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWduID0gYXhpcyA9PT0gJ3gnID8geSA6IHg7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCAoKHRoaXMuY2xzUG9zKSArIFwiLVwiICsgKHRoaXMuZGlyKSArIFwiLVwiICsgKHRoaXMuYWxpZ24pKSwgdGhpcy5vZmZzZXQgPT09IGZhbHNlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0QXhpczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyID09PSAndG9wJyB8fCB0aGlzLmRpciA9PT0gJ2JvdHRvbScgPyAneScgOiAneCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBhY3RpdmU7XG5cbiAgICB2YXIgZHJvcCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtQb3NpdGlvbiwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAncG9zJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgdG9nZ2xlOiBCb29sZWFuLFxuICAgICAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVsYXlTaG93OiBOdW1iZXIsXG4gICAgICAgICAgICBkZWxheUhpZGU6IE51bWJlcixcbiAgICAgICAgICAgIGNsc0Ryb3A6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1vZGU6IFsnY2xpY2snLCAnaG92ZXInXSxcbiAgICAgICAgICAgIHRvZ2dsZTogJy0gKicsXG4gICAgICAgICAgICBib3VuZGFyeTogaW5Ccm93c2VyICYmIHdpbmRvdyxcbiAgICAgICAgICAgIGJvdW5kYXJ5QWxpZ246IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiA4MDAsXG4gICAgICAgICAgICBjbHNEcm9wOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tZmFkZSddLFxuICAgICAgICAgICAgY2xzOiAndWstb3BlbidcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBib3VuZGFyeTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSByZWYuYm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkoYm91bmRhcnksICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNEcm9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzRHJvcCA9IHJlZi5jbHNEcm9wO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsc0Ryb3AgfHwgKFwidWstXCIgKyAodGhpcy4kb3B0aW9ucy5uYW1lKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNQb3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc0Ryb3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tlciA9IG5ldyBNb3VzZVRyYWNrZXIoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcm9wKTtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJHByb3BzO1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZSAmJiB0aGlzLiRjcmVhdGUoJ3RvZ2dsZScsIHF1ZXJ5KHRvZ2dsZSwgdGhpcy4kZWwpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLiRlbCxcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLm1vZGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAhdGhpcy50b2dnbGUgJiYgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIi5cIiArICh0aGlzLmNsc0Ryb3ApICsgXCItY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IHJlZi5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgIXdpdGhpbihoYXNoLCB0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVzY3JvbGwnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG9nZ2xlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiBwb2ludGVyRW50ZXIsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogcG9pbnRlckxlYXZlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpICYmIGUucmVsYXRlZFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVkJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCBwb2ludGVyRG93biwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF3aXRoaW4odGFyZ2V0LCB0aGlzJDEuJGVsKSAmJiBvbmNlKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsICsgXCIgc2Nyb2xsXCIpLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSByZWYuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUYXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIHR5cGUgPT09IHBvaW50ZXJVcCAmJiB0YXJnZXQgPT09IG5ld1RhcmdldCAmJiAhKHRoaXMkMS50b2dnbGUgJiYgd2l0aGluKHRhcmdldCwgdGhpcyQxLnRvZ2dsZS4kZWwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKSwge3NlbGY6IHRydWV9KTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3JlaGlkZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRlbCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUgPT09IG51bGwgJiYgd2l0aGluKHRhcmdldCwgdGhpcy4kZWwpICYmIHRoaXMuaXNUb2dnbGVkKCkgPyB0aGlzIDogYWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gdGhpcy5pc0FjdGl2ZSgpID8gbnVsbCA6IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZWFyaWEnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUsIHRvZ2dsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEodGhpcy4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgfHwgdGhpcy50b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoKHRvZ2dsZSB8fCB0aGlzLnRvZ2dsZSkuJGVsLCAnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNUb2dnbGVkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy50b2dnbGUuJGVsLCB0aGlzLmNscywgdGhpcy5pc1RvZ2dsZWQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkgJiYgIUFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24odG9nZ2xlLCBkZWxheSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggdG9nZ2xlID09PSB2b2lkIDAgKSB0b2dnbGUgPSB0aGlzLnRvZ2dsZTtcbiAgICAgICAgICAgICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IHRydWU7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpICYmIHRvZ2dsZSAmJiB0aGlzLnRvZ2dsZSAmJiB0b2dnbGUuJGVsICE9PSB0aGlzLnRvZ2dsZS4kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkgJiYgYWN0aXZlLmlzRGVsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dCh0aGlzLnNob3csIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYWN0aXZlICYmIHByZXYgIT09IGFjdGl2ZSAmJiAhd2l0aGluKHRoaXMuJGVsLCBhY3RpdmUuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuICF0aGlzJDEuaXNUb2dnbGVkKCkgJiYgdGhpcyQxLnRvZ2dsZUVsZW1lbnQodGhpcyQxLiRlbCwgdHJ1ZSk7IH0sIGRlbGF5ICYmIHRoaXMuZGVsYXlTaG93IHx8IDApO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbihkZWxheSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggZGVsYXkgPT09IHZvaWQgMCApIGRlbGF5ID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGhpZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudCh0aGlzJDEuJGVsLCBmYWxzZSwgZmFsc2UpOyB9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVycygpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc0RlbGF5aW5nID0gZ2V0UG9zaXRpb25lZEVsZW1lbnRzKHRoaXMuJGVsKS5zb21lKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gdGhpcyQxLnRyYWNrZXIubW92ZXNUbyhlbCk7IH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5ICYmIHRoaXMuaXNEZWxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVUaW1lciA9IHNldFRpbWVvdXQodGhpcy5oaWRlLCA1MCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZWxheSAmJiB0aGlzLmRlbGF5SGlkZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVUaW1lciA9IHNldFRpbWVvdXQoaGlkZSwgdGhpcy5kZWxheUhpZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbGVhclRpbWVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVyKTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oaWRlVGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0RlbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0FjdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZSA9PT0gdGhpcztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAoKHRoaXMuY2xzRHJvcCkgKyBcIi1zdGFja1wiKSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsICgodGhpcy5jbHNEcm9wKSArIFwiLWJvdW5kYXJ5XCIpLCB0aGlzLmJvdW5kYXJ5QWxpZ24pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJ5ID0gb2Zmc2V0KHRoaXMuYm91bmRhcnkpO1xuICAgICAgICAgICAgICAgIHZhciBhbGlnblRvID0gdGhpcy5ib3VuZGFyeUFsaWduID8gYm91bmRhcnkgOiBvZmZzZXQodGhpcy50b2dnbGUuJGVsKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsaWduID09PSAnanVzdGlmeScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSB0aGlzLmdldEF4aXMoKSA9PT0gJ3knID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHByb3AsIGFsaWduVG9bcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy4kZWwub2Zmc2V0V2lkdGggPiBNYXRoLm1heChib3VuZGFyeS5yaWdodCAtIGFsaWduVG8ubGVmdCwgYWxpZ25Uby5yaWdodCAtIGJvdW5kYXJ5LmxlZnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAoKHRoaXMuY2xzRHJvcCkgKyBcIi1zdGFja1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkF0KHRoaXMuJGVsLCB0aGlzLmJvdW5kYXJ5QWxpZ24gPyB0aGlzLmJvdW5kYXJ5IDogdGhpcy50b2dnbGUuJGVsLCB0aGlzLmJvdW5kYXJ5KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQb3NpdGlvbmVkRWxlbWVudHMoZWwpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBhcHBseShlbCwgZnVuY3Rpb24gKGVsKSB7IHJldHVybiBjc3MoZWwsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJyAmJiByZXN1bHQucHVzaChlbCk7IH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBmb3JtQ3VzdG9tID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJChzZWxJbnB1dCwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0ICYmICh0YXJnZXQgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5pbnB1dC5wYXJlbnROb2RlID09PSAkZWxcbiAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5pbnB1dC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgfHwgcXVlcnkodGFyZ2V0LCAkZWwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSByZWYuaW5wdXQ7XG5cbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3B0aW9uO1xuICAgICAgICAgICAgdmFyIHByb3AgPSBpc0lucHV0KHRhcmdldCkgPyAndmFsdWUnIDogJ3RleHRDb250ZW50JztcbiAgICAgICAgICAgIHZhciBwcmV2ID0gdGFyZ2V0W3Byb3BdO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5wdXQuZmlsZXMgJiYgaW5wdXQuZmlsZXNbMF1cbiAgICAgICAgICAgICAgICA/IGlucHV0LmZpbGVzWzBdLm5hbWVcbiAgICAgICAgICAgICAgICA6IG1hdGNoZXMoaW5wdXQsICdzZWxlY3QnKSAmJiAob3B0aW9uID0gJCQoJ29wdGlvbicsIGlucHV0KS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5zZWxlY3RlZDsgfSlbMF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dENvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgOiBpbnB1dC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKHByZXYgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdjaGFuZ2UnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncmVzZXQnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VzdCh0aGlzLiRlbCwgJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdXG5cbiAgICB9O1xuXG4gICAgLy8gRGVwcmVjYXRlZFxuICAgIHZhciBnaWYgPSB7XG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbnZpZXcgPSBpc0luVmlldyh0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWludmlldyB8fCBkYXRhLmlzSW5WaWV3ID09PSBpbnZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRhdGEuaXNJblZpZXcgPSBpbnZpZXc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWwuc3JjID0gJycgKyB0aGlzLiRlbC5zcmM7IC8vIGZvcmNlIHNlbGYtYXNzaWduXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsnc2Nyb2xsJywgJ3Jlc2l6ZSddXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgTWFyZ2luID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtYXJnaW46IFN0cmluZyxcbiAgICAgICAgICAgIGZpcnN0Q29sdW1uOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWFyZ2luOiAndWstbWFyZ2luLXNtYWxsLXRvcCcsXG4gICAgICAgICAgICBmaXJzdENvbHVtbjogJ3VrLWZpcnN0LWNvbHVtbidcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IGdldFJvd3ModGhpcy4kZWwuY2hpbGRyZW4pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uczogZ2V0Q29sdW1ucyhyb3dzKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSByZWYuY29sdW1ucztcbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlZi5yb3dzO1xuXG4gICAgICAgICAgICAgICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3csIGkpIHsgcmV0dXJuIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5tYXJnaW4sIGkgIT09IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5maXJzdENvbHVtbiwgaW5jbHVkZXMoY29sdW1uc1swXSwgZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFJvd3MoaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRCeSQxKGl0ZW1zLCAndG9wJywgJ2JvdHRvbScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbHVtbnMocm93cykge1xuXG4gICAgICAgIHZhciBjb2x1bW5zID0gW1tdXTtcblxuICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykgeyByZXR1cm4gc29ydEJ5JDEocm93LCAnbGVmdCcsICdyaWdodCcpLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaSkgeyByZXR1cm4gY29sdW1uc1tpXSA9ICFjb2x1bW5zW2ldID8gY29sdW1uIDogY29sdW1uc1tpXS5jb25jYXQoY29sdW1uKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBpc1J0bFxuICAgICAgICAgICAgPyBjb2x1bW5zLnJldmVyc2UoKVxuICAgICAgICAgICAgOiBjb2x1bW5zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeSQxKGl0ZW1zLCBzdGFydFByb3AsIGVuZFByb3ApIHtcblxuICAgICAgICB2YXIgc29ydGVkID0gW1tdXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBlbCA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmlzaWJsZShlbCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRpbSA9IGdldE9mZnNldChlbCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzb3J0ZWQubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc29ydGVkW2pdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzdGFydERpbSA9ICh2b2lkIDApO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50WzBdLm9mZnNldFBhcmVudCA9PT0gZWwub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IGdldE9mZnNldChlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bc3RhcnRQcm9wXSA+PSBzdGFydERpbVtlbmRQcm9wXSAtIDEgJiYgZGltW3N0YXJ0UHJvcF0gIT09IHN0YXJ0RGltW3N0YXJ0UHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkLnB1c2goW2VsXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bZW5kUHJvcF0gLSAxID4gc3RhcnREaW1bc3RhcnRQcm9wXSB8fCBkaW1bc3RhcnRQcm9wXSA9PT0gc3RhcnREaW1bc3RhcnRQcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnB1c2goZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWQudW5zaGlmdChbZWxdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3J0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsZW1lbnQsIG9mZnNldCkge1xuICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgIGlmICggb2Zmc2V0ID09PSB2b2lkIDAgKSBvZmZzZXQgPSBmYWxzZTtcblxuICAgICAgICB2YXIgb2Zmc2V0VG9wID0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgKGFzc2lnbiA9IG9mZnNldFBvc2l0aW9uKGVsZW1lbnQpLCBvZmZzZXRUb3AgPSBhc3NpZ25bMF0sIG9mZnNldExlZnQgPSBhc3NpZ25bMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogb2Zmc2V0VG9wLFxuICAgICAgICAgICAgbGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogb2Zmc2V0VG9wICsgb2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IG9mZnNldExlZnQgKyBvZmZzZXRXaWR0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBncmlkID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IE1hcmdpbixcblxuICAgICAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICAgICAgbmFtZTogJ2dyaWQnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtYXNvbnJ5OiBCb29sZWFuLFxuICAgICAgICAgICAgcGFyYWxsYXg6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1hcmdpbjogJ3VrLWdyaWQtbWFyZ2luJyxcbiAgICAgICAgICAgIGNsc1N0YWNrOiAndWstZ3JpZC1zdGFjaycsXG4gICAgICAgICAgICBtYXNvbnJ5OiBmYWxzZSxcbiAgICAgICAgICAgIHBhcmFsbGF4OiAwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFzb25yeSAmJiBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLWZsZXgtdG9wIHVrLWZsZXgtd3JhcC10b3AnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IHJlZi5jb2x1bW5zO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc1N0YWNrLCBjb2x1bW5zLmxlbmd0aCA8IDIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gcmVmLmNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVmLnJvd3M7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBjaGlsZHJlbih0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2Rlcy5sZW5ndGggfHwgIXRoaXMubWFzb25yeSAmJiAhdGhpcy5wYXJhbGxheCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25JblByb2dyZXNzID0gbm9kZXMuc29tZShUcmFuc2l0aW9uLmluUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlcyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5IZWlnaHRzID0gZ2V0Q29sdW1uSGVpZ2h0cyhjb2x1bW5zKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmdpbiA9IGdldE1hcmdpblRvcChub2RlcywgdGhpcy5tYXJnaW4pICogKHJvd3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNvbHVtbkhlaWdodHMpICsgbWFyZ2luO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hc29ucnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiBzb3J0QnkoY29sdW1uLCAnb2Zmc2V0VG9wJyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlcyA9IGdldFRyYW5zbGF0ZXMocm93cywgY29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IE1hdGguYWJzKHRoaXMucGFyYWxsYXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFkZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyA9IGNvbHVtbkhlaWdodHMucmVkdWNlKGZ1bmN0aW9uIChuZXdQYWRkaW5nLCBoZ3QsIGkpIHsgcmV0dXJuIE1hdGgubWF4KG5ld1BhZGRpbmcsIGhndCArIG1hcmdpbiArIChpICUgMiA/IHBhZGRpbmcgOiBwYWRkaW5nIC8gOCkgLSBlbEhlaWdodCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwYWRkaW5nOiBwYWRkaW5nLCBjb2x1bW5zOiBjb2x1bW5zLCB0cmFuc2xhdGVzOiB0cmFuc2xhdGVzLCBoZWlnaHQ6IHRyYW5zaXRpb25JblByb2dyZXNzID8gZmFsc2UgOiB0aGlzLm1hc29ucnkgPyBlbEhlaWdodCA6ICcnfTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHJlZi5wYWRkaW5nO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAncGFkZGluZ0JvdHRvbScsIHBhZGRpbmcgfHwgJycpO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgIT09IGZhbHNlICYmIGNzcyh0aGlzLiRlbCwgJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0JDEgPSByZWYuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxlZDogdGhpcy5wYXJhbGxheFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2Nyb2xsZWRPdmVyKHRoaXMuJGVsLCBoZWlnaHQkMSA/IGhlaWdodCQxIC0gaGVpZ2h0KHRoaXMuJGVsKSA6IDApICogTWF0aC5hYnModGhpcy5wYXJhbGxheClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSByZWYuY29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGVkID0gcmVmLnNjcm9sbGVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlcyA9IHJlZi50cmFuc2xhdGVzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVkID09PSBmYWxzZSAmJiAhdHJhbnNsYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGkpIHsgcmV0dXJuIGNvbHVtbi5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaikgeyByZXR1cm4gY3NzKGVsLCAndHJhbnNmb3JtJywgIXNjcm9sbGVkICYmICF0cmFuc2xhdGVzID8gJycgOiAoXCJ0cmFuc2xhdGVZKFwiICsgKCh0cmFuc2xhdGVzICYmIC10cmFuc2xhdGVzW2ldW2pdKSArIChzY3JvbGxlZCA/IGkgJSAyID8gc2Nyb2xsZWQgOiBzY3JvbGxlZCAvIDggOiAwKSkgKyBcInB4KVwiKSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsnc2Nyb2xsJywgJ3Jlc2l6ZSddXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdXG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlcyhyb3dzLCBjb2x1bW5zKSB7XG5cbiAgICAgICAgdmFyIHJvd0hlaWdodHMgPSByb3dzLm1hcChmdW5jdGlvbiAocm93KSB7IHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCByb3cubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwub2Zmc2V0SGVpZ2h0OyB9KSk7IH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgcHJldiA9IDA7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50LCByb3cpIHsgcmV0dXJuIHByZXYgKz0gcm93XG4gICAgICAgICAgICAgICAgICAgID8gcm93SGVpZ2h0c1tyb3cgLSAxXSAtIGVsZW1lbnRzW3JvdyAtIDFdLm9mZnNldEhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IDA7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE1hcmdpblRvcChub2RlcywgY2xzKSB7XG5cbiAgICAgICAgdmFyIHJlZiA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGhhc0NsYXNzKGVsLCBjbHMpOyB9KTtcbiAgICAgICAgdmFyIG5vZGUgPSByZWZbMF07XG5cbiAgICAgICAgcmV0dXJuIHRvRmxvYXQobm9kZVxuICAgICAgICAgICAgPyBjc3Mobm9kZSwgJ21hcmdpblRvcCcpXG4gICAgICAgICAgICA6IGNzcyhub2Rlc1swXSwgJ3BhZGRpbmdMZWZ0JykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbHVtbkhlaWdodHMoY29sdW1ucykge1xuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikgeyByZXR1cm4gY29sdW1uLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBlbCkgeyByZXR1cm4gc3VtICsgZWwub2Zmc2V0SGVpZ2h0OyB9LCAwKTsgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIElFIDExIGZpeCAobWluLWhlaWdodCBvbiBhIGZsZXggY29udGFpbmVyIHdvbid0IGFwcGx5IHRvIGl0cyBmbGV4IGl0ZW1zKVxuICAgIHZhciBGbGV4QnVnID0gaXNJRSA/IHtcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VsTWluSGVpZ2h0OiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBzZWxNaW5IZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgZm9yY2VIZWlnaHQ6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgZWxlbWVudHM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbE1pbkhlaWdodCA9IHJlZi5zZWxNaW5IZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsTWluSGVpZ2h0ID8gJCQoc2VsTWluSGVpZ2h0LCAkZWwpIDogWyRlbF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLmVsZW1lbnRzLCAnaGVpZ2h0JywgJycpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBvcmRlcjogLTUsXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdG9GbG9hdChjc3MoZWwsICdtaW5IZWlnaHQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ICYmICh0aGlzJDEuZm9yY2VIZWlnaHQgfHwgTWF0aC5yb3VuZChoZWlnaHQgKyBib3hNb2RlbEFkanVzdChlbCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpKSA+PSBlbC5vZmZzZXRIZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG9yZGVyOiA1LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdXG5cbiAgICB9IDoge307XG5cbiAgICB2YXIgaGVpZ2h0TWF0Y2ggPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbRmxleEJ1Z10sXG5cbiAgICAgICAgYXJnczogJ3RhcmdldCcsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgcm93OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiAnPiAqJyxcbiAgICAgICAgICAgIHJvdzogdHJ1ZSxcbiAgICAgICAgICAgIGZvcmNlSGVpZ2h0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgZWxlbWVudHM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGFyZ2V0LCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJvd3M6ICh0aGlzLnJvdyA/IGdldFJvd3ModGhpcy5lbGVtZW50cykgOiBbdGhpcy5lbGVtZW50c10pLm1hcChtYXRjaClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVmLnJvd3M7XG5cbiAgICAgICAgICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodHMgPSByZWYuaGVpZ2h0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IHJlZi5lbGVtZW50cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBjc3MoZWwsICdtaW5IZWlnaHQnLCBoZWlnaHRzW2ldKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hdGNoKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBhc3NpZ247XG5cblxuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBbJyddLCBlbGVtZW50czogZWxlbWVudHN9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEhlaWdodHMoZWxlbWVudHMpO1xuICAgICAgICB2YXIgaGVpZ2h0cyA9IHJlZi5oZWlnaHRzO1xuICAgICAgICB2YXIgbWF4ID0gcmVmLm1heDtcbiAgICAgICAgdmFyIGhhc01pbkhlaWdodCA9IGVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5zdHlsZS5taW5IZWlnaHQ7IH0pO1xuICAgICAgICB2YXIgaGFzU2hydW5rID0gZWxlbWVudHMuc29tZShmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuICFlbC5zdHlsZS5taW5IZWlnaHQgJiYgaGVpZ2h0c1tpXSA8IG1heDsgfSk7XG5cbiAgICAgICAgaWYgKGhhc01pbkhlaWdodCAmJiBoYXNTaHJ1bmspIHtcbiAgICAgICAgICAgIGNzcyhlbGVtZW50cywgJ21pbkhlaWdodCcsICcnKTtcbiAgICAgICAgICAgICgoYXNzaWduID0gZ2V0SGVpZ2h0cyhlbGVtZW50cyksIGhlaWdodHMgPSBhc3NpZ24uaGVpZ2h0cywgbWF4ID0gYXNzaWduLm1heCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaGVpZ2h0cyA9IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGhlaWdodHNbaV0gPT09IG1heCAmJiB0b0Zsb2F0KGVsLnN0eWxlLm1pbkhlaWdodCkudG9GaXhlZCgyKSAhPT0gbWF4LnRvRml4ZWQoMikgPyAnJyA6IG1heDsgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7aGVpZ2h0czogaGVpZ2h0cywgZWxlbWVudHM6IGVsZW1lbnRzfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRIZWlnaHRzKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBoZWlnaHRzID0gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gb2Zmc2V0KGVsKS5oZWlnaHQgLSBib3hNb2RlbEFkanVzdChlbCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpOyB9KTtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuXG4gICAgICAgIHJldHVybiB7aGVpZ2h0czogaGVpZ2h0cywgbWF4OiBtYXh9O1xuICAgIH1cblxuICAgIHZhciBoZWlnaHRWaWV3cG9ydCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtGbGV4QnVnXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZXhwYW5kOiBCb29sZWFuLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBCb29sZWFuLFxuICAgICAgICAgICAgb2Zmc2V0Qm90dG9tOiBCb29sZWFuLFxuICAgICAgICAgICAgbWluSGVpZ2h0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBleHBhbmQ6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBmYWxzZSxcbiAgICAgICAgICAgIG9mZnNldEJvdHRvbTogZmFsc2UsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSByZWYubWluSGVpZ2h0O1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmlzaWJsZSh0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBtaW5IZWlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgYm94ID0gYm94TW9kZWxBZGp1c3QodGhpcy4kZWwsICdoZWlnaHQnLCAnY29udGVudC1ib3gnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4cGFuZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmRhdGFzZXQuaGVpZ2h0RXhwYW5kID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJ1tkYXRhLWhlaWdodC1leHBhbmRdJykgIT09IHRoaXMuJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgPSBoZWlnaHQod2luZG93KSAtIChvZmZzZXRIZWlnaHQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAtIG9mZnNldEhlaWdodCh0aGlzLiRlbCkpIC0gYm94IHx8ICcnO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBtb2JpbGUgZGV2aWNlcyAoaU9TIGFuZCBBbmRyb2lkKSB3aW5kb3cuaW5uZXJIZWlnaHQgIT09IDEwMHZoXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9ICdjYWxjKDEwMHZoJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXRUb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gb2Zmc2V0KHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZWYkMS50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgKz0gdG9wID4gMCAmJiB0b3AgPCBoZWlnaHQod2luZG93KSAvIDIgPyAoXCIgLSBcIiArIHRvcCArIFwicHhcIikgOiAnJztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0Qm90dG9tID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBcIiAtIFwiICsgKG9mZnNldEhlaWdodCh0aGlzLiRlbC5uZXh0RWxlbWVudFNpYmxpbmcpKSArIFwicHhcIjtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTnVtZXJpYyh0aGlzLm9mZnNldEJvdHRvbSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IFwiIC0gXCIgKyAodGhpcy5vZmZzZXRCb3R0b20pICsgXCJ2aFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vZmZzZXRCb3R0b20gJiYgZW5kc1dpdGgodGhpcy5vZmZzZXRCb3R0b20sICdweCcpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBcIiAtIFwiICsgKHRvRmxvYXQodGhpcy5vZmZzZXRCb3R0b20pKSArIFwicHhcIjtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHRoaXMub2Zmc2V0Qm90dG9tKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgKz0gXCIgLSBcIiArIChvZmZzZXRIZWlnaHQocXVlcnkodGhpcy5vZmZzZXRCb3R0b20sIHRoaXMuJGVsKSkpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgKz0gKGJveCA/IChcIiAtIFwiICsgYm94ICsgXCJweFwiKSA6ICcnKSArIFwiKVwiO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHttaW5IZWlnaHQ6IG1pbkhlaWdodCwgcHJldjogcHJldn07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9IHJlZi5taW5IZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSByZWYucHJldjtcblxuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7bWluSGVpZ2h0OiBtaW5IZWlnaHR9KTtcblxuICAgICAgICAgICAgICAgIGlmIChtaW5IZWlnaHQgIT09IHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKHRoaXMuJGVsLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWluSGVpZ2h0ICYmIHRvRmxvYXQoY3NzKHRoaXMuJGVsLCAnbWluSGVpZ2h0JykpIDwgdGhpcy5taW5IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnbWluSGVpZ2h0JywgdGhpcy5taW5IZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEhlaWdodChlbCkge1xuICAgICAgICByZXR1cm4gZWwgJiYgb2Zmc2V0KGVsKS5oZWlnaHQgfHwgMDtcbiAgICB9XG5cbiAgICB2YXIgU1ZHID0ge1xuXG4gICAgICAgIGFyZ3M6ICdzcmMnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBpZDogQm9vbGVhbixcbiAgICAgICAgICAgIGljb246IFN0cmluZyxcbiAgICAgICAgICAgIHNyYzogU3RyaW5nLFxuICAgICAgICAgICAgc3R5bGU6IFN0cmluZyxcbiAgICAgICAgICAgIHdpZHRoOiBOdW1iZXIsXG4gICAgICAgICAgICBoZWlnaHQ6IE51bWJlcixcbiAgICAgICAgICAgIHJhdGlvOiBOdW1iZXIsXG4gICAgICAgICAgICBjbGFzczogU3RyaW5nLFxuICAgICAgICAgICAgc3Ryb2tlQW5pbWF0aW9uOiBCb29sZWFuLFxuICAgICAgICAgICAgZm9jdXNhYmxlOiBCb29sZWFuLCAvLyBJRSAxMVxuICAgICAgICAgICAgYXR0cmlidXRlczogJ2xpc3QnXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcmF0aW86IDEsXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3N0eWxlJywgJ2NsYXNzJywgJ2ZvY3VzYWJsZSddLFxuICAgICAgICAgICAgY2xhc3M6ICcnLFxuICAgICAgICAgICAgc3Ryb2tlQW5pbWF0aW9uOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZUNvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jbGFzcyArPSAnIHVrLXN2Zyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGFzc2lnbjtcblxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaWNvbiAmJiBpbmNsdWRlcyh0aGlzLnNyYywgJyMnKSkge1xuICAgICAgICAgICAgICAgIChhc3NpZ24gPSB0aGlzLnNyYy5zcGxpdCgnIycpLCB0aGlzLnNyYyA9IGFzc2lnblswXSwgdGhpcy5pY29uID0gYXNzaWduWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdmcgPSB0aGlzLmdldFN2ZygpLnRoZW4oZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcyQxLmFwcGx5QXR0cmlidXRlcyhlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMkMS5zdmdFbCA9IGluc2VydFNWRyhlbCwgdGhpcyQxLiRlbCk7XG4gICAgICAgICAgICB9LCBub29wKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICBpZiAoaXNWb2lkRWxlbWVudCh0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcudGhlbihmdW5jdGlvbiAoc3ZnKSB7IHJldHVybiAoIXRoaXMkMS5fY29ubmVjdGVkIHx8IHN2ZyAhPT0gdGhpcyQxLnN2Z0VsKSAmJiByZW1vdmUoc3ZnKTsgfSwgbm9vcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3ZnID0gdGhpcy5zdmdFbCA9IG51bGw7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuc3Ryb2tlQW5pbWF0aW9uICYmIHRoaXMuc3ZnRWwgJiYgaXNWaXNpYmxlKHRoaXMuc3ZnRWwpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhcHBseUFuaW1hdGlvbih0aGlzLnN2Z0VsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgZ2V0U3ZnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkU1ZHKHRoaXMuc3JjKS50aGVuKGZ1bmN0aW9uIChzdmcpIHsgcmV0dXJuIHBhcnNlU1ZHKHN2ZywgdGhpcyQxLmljb24pIHx8IFByb21pc2UucmVqZWN0KCdTVkcgbm90IGZvdW5kLicpOyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFwcGx5QXR0cmlidXRlczogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3Byb3BdICYmIGluY2x1ZGVzKHRoaXMuaW5jbHVkZSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoZWwsIHByb3AsIHRoaXNbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0uc3BsaXQoJzonLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AkMSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVmWzFdO1xuICAgICAgICAgICAgICAgICAgICBhdHRyKGVsLCBwcm9wJDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cihlbCwgJ2lkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gWyd3aWR0aCcsICdoZWlnaHQnXTtcbiAgICAgICAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGF0dHIoZWwsIHByb3ApOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdmlld0JveCA9IGF0dHIoZWwsICd2aWV3Qm94Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdCb3ggJiYgIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB2aWV3Qm94LnNwbGl0KCcgJykuc2xpY2UoMik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gKHZhbCB8IDApICogdGhpcyQxLnJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB2YWwgJiYgYXR0cihlbCwgcHJvcHNbaV0sIHZhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAmJiAhZGltZW5zaW9uc1tpIF4gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWwsIHByb3BzW2kgXiAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGF0dHIoZWwsICdkYXRhLXN2ZycsIHRoaXMuaWNvbiB8fCB0aGlzLnNyYyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHN2Z3MgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGxvYWRTVkcoc3JjKSB7XG5cbiAgICAgICAgaWYgKHN2Z3Nbc3JjXSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Z3Nbc3JjXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdmdzW3NyY10gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIGlmICghc3JjKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnRzV2l0aChzcmMsICdkYXRhOicpKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkZWNvZGVVUklDb21wb25lbnQoc3JjLnNwbGl0KCcsJylbMV0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBhamF4KHNyYykudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHhocikgeyByZXR1cm4gcmVzb2x2ZSh4aHIucmVzcG9uc2UpOyB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoJ1NWRyBub3QgZm91bmQuJyk7IH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTVkcoc3ZnLCBpY29uKSB7XG5cbiAgICAgICAgaWYgKGljb24gJiYgaW5jbHVkZXMoc3ZnLCAnPHN5bWJvbCcpKSB7XG4gICAgICAgICAgICBzdmcgPSBwYXJzZVN5bWJvbHMoc3ZnLCBpY29uKSB8fCBzdmc7XG4gICAgICAgIH1cblxuICAgICAgICBzdmcgPSAkKHN2Zy5zdWJzdHIoc3ZnLmluZGV4T2YoJzxzdmcnKSkpO1xuICAgICAgICByZXR1cm4gc3ZnICYmIHN2Zy5oYXNDaGlsZE5vZGVzKCkgJiYgc3ZnO1xuICAgIH1cblxuICAgIHZhciBzeW1ib2xSZSA9IC88c3ltYm9sKFteXSo/aWQ9KFsnXCJdKSguKz8pXFwyW15dKj88XFwvKXN5bWJvbD4vZztcbiAgICB2YXIgc3ltYm9scyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VTeW1ib2xzKHN2ZywgaWNvbikge1xuXG4gICAgICAgIGlmICghc3ltYm9sc1tzdmddKSB7XG5cbiAgICAgICAgICAgIHN5bWJvbHNbc3ZnXSA9IHt9O1xuXG4gICAgICAgICAgICBzeW1ib2xSZS5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc3ltYm9sUmUuZXhlYyhzdmcpKSkge1xuICAgICAgICAgICAgICAgIHN5bWJvbHNbc3ZnXVttYXRjaFszXV0gPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlwiICsgKG1hdGNoWzFdKSArIFwic3ZnPlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3ltYm9sc1tzdmddW2ljb25dO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uKGVsKSB7XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGdldE1heFBhdGhMZW5ndGgoZWwpO1xuXG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXVrLWFuaW1hdGlvbi1zdHJva2UnLCBsZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhQYXRoTGVuZ3RoKGVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5tYXguYXBwbHkoTWF0aCwgWyAwIF0uY29uY2F0KCAkJCgnW3N0cm9rZV0nLCBlbCkubWFwKGZ1bmN0aW9uIChzdHJva2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSApKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0U1ZHKGVsLCByb290KSB7XG5cbiAgICAgICAgaWYgKGlzVm9pZEVsZW1lbnQocm9vdCkgfHwgcm9vdC50YWdOYW1lID09PSAnQ0FOVkFTJykge1xuXG4gICAgICAgICAgICByb290LmhpZGRlbiA9IHRydWU7XG5cbiAgICAgICAgICAgIHZhciBuZXh0ID0gcm9vdC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzKGVsLCBuZXh0KVxuICAgICAgICAgICAgICAgID8gbmV4dFxuICAgICAgICAgICAgICAgIDogYWZ0ZXIocm9vdCwgZWwpO1xuXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFzdCA9IHJvb3QubGFzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgcmV0dXJuIGVxdWFscyhlbCwgbGFzdClcbiAgICAgICAgICAgID8gbGFzdFxuICAgICAgICAgICAgOiBhcHBlbmQocm9vdCwgZWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVxdWFscyhlbCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGF0dHIoZWwsICdkYXRhLXN2ZycpID09PSBhdHRyKG90aGVyLCAnZGF0YS1zdmcnKTtcbiAgICB9XG5cbiAgICB2YXIgY2xvc2VJY29uID0gXCI8c3ZnIHdpZHRoPVxcXCIxNFxcXCIgaGVpZ2h0PVxcXCIxNFxcXCIgdmlld0JveD1cXFwiMCAwIDE0IDE0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIHgxPVxcXCIxXFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjEzXFxcIiB5Mj1cXFwiMTNcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiB4MT1cXFwiMTNcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMVxcXCIgeTI9XFxcIjEzXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgY2xvc2VMYXJnZSA9IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiB4MT1cXFwiMVxcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxOVxcXCIgeTI9XFxcIjE5XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuNFxcXCIgeDE9XFxcIjE5XFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjFcXFwiIHkyPVxcXCIxOVxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIG1hcmtlciA9IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI5XFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIxMVxcXCIvPjxyZWN0IHg9XFxcIjRcXFwiIHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIxMVxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgbmF2YmFyVG9nZ2xlSWNvbiA9IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB5PVxcXCI5XFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMlxcXCIvPjxyZWN0IHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeT1cXFwiMTVcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgb3ZlcmxheUljb24gPSBcIjxzdmcgd2lkdGg9XFxcIjQwXFxcIiBoZWlnaHQ9XFxcIjQwXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDAgNDBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeD1cXFwiMTlcXFwiIHk9XFxcIjBcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjQwXFxcIi8+PHJlY3QgeD1cXFwiMFxcXCIgeT1cXFwiMTlcXFwiIHdpZHRoPVxcXCI0MFxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgcGFnaW5hdGlvbk5leHQgPSBcIjxzdmcgd2lkdGg9XFxcIjdcXFwiIGhlaWdodD1cXFwiMTJcXFwiIHZpZXdCb3g9XFxcIjAgMCA3IDEyXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4yXFxcIiBwb2ludHM9XFxcIjEgMSA2IDYgMSAxMVxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHBhZ2luYXRpb25QcmV2aW91cyA9IFwiPHN2ZyB3aWR0aD1cXFwiN1xcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgdmlld0JveD1cXFwiMCAwIDcgMTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIHBvaW50cz1cXFwiNiAxIDEgNiA2IDExXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2VhcmNoSWNvbiA9IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCI5XFxcIiBjeT1cXFwiOVxcXCIgcj1cXFwiN1xcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0xNCwxNCBMMTgsMTggTDE0LDE0IFpcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzZWFyY2hMYXJnZSA9IFwiPHN2ZyB3aWR0aD1cXFwiNDBcXFwiIGhlaWdodD1cXFwiNDBcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MCA0MFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjhcXFwiIGN4PVxcXCIxNy41XFxcIiBjeT1cXFwiMTcuNVxcXCIgcj1cXFwiMTYuNVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjhcXFwiIHgxPVxcXCIzOFxcXCIgeTE9XFxcIjM5XFxcIiB4Mj1cXFwiMjlcXFwiIHkyPVxcXCIzMFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNlYXJjaE5hdmJhciA9IFwiPHN2ZyB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCIxMC41XFxcIiBjeT1cXFwiMTAuNVxcXCIgcj1cXFwiOS41XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgeDE9XFxcIjIzXFxcIiB5MT1cXFwiMjNcXFwiIHgyPVxcXCIxN1xcXCIgeTI9XFxcIjE3XFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2xpZGVuYXZOZXh0ID0gXCI8c3ZnIHdpZHRoPVxcXCIxNHB4XFxcIiBoZWlnaHQ9XFxcIjI0cHhcXFwiIHZpZXdCb3g9XFxcIjAgMCAxNCAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuNFxcXCIgcG9pbnRzPVxcXCIxLjIyNSwyMyAxMi43NzUsMTIgMS4yMjUsMSBcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzbGlkZW5hdk5leHRMYXJnZSA9IFwiPHN2ZyB3aWR0aD1cXFwiMjVweFxcXCIgaGVpZ2h0PVxcXCI0MHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjUgNDBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIiBwb2ludHM9XFxcIjQuMDAyLDM4LjU0NyAyMi41MjcsMjAuMDI0IDQsMS41IFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNsaWRlbmF2UHJldmlvdXMgPSBcIjxzdmcgd2lkdGg9XFxcIjE0cHhcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDE0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiBwb2ludHM9XFxcIjEyLjc3NSwxIDEuMjI1LDEyIDEyLjc3NSwyMyBcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzbGlkZW5hdlByZXZpb3VzTGFyZ2UgPSBcIjxzdmcgd2lkdGg9XFxcIjI1cHhcXFwiIGhlaWdodD1cXFwiNDBweFxcXCIgdmlld0JveD1cXFwiMCAwIDI1IDQwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMlxcXCIgcG9pbnRzPVxcXCIyMC41MjcsMS41IDIsMjAuMDI0IDIwLjUyNSwzOC41NDcgXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc3Bpbm5lciA9IFwiPHN2ZyB3aWR0aD1cXFwiMzBcXFwiIGhlaWdodD1cXFwiMzBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMCAzMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgY3g9XFxcIjE1XFxcIiBjeT1cXFwiMTVcXFwiIHI9XFxcIjE0XFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgdG90b3AgPSBcIjxzdmcgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjEwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTggMTBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIHBvaW50cz1cXFwiMSA5IDkgMSAxNyA5IFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIGljb25zID0ge1xuICAgICAgICBzcGlubmVyOiBzcGlubmVyLFxuICAgICAgICB0b3RvcDogdG90b3AsXG4gICAgICAgIG1hcmtlcjogbWFya2VyLFxuICAgICAgICAnY2xvc2UtaWNvbic6IGNsb3NlSWNvbixcbiAgICAgICAgJ2Nsb3NlLWxhcmdlJzogY2xvc2VMYXJnZSxcbiAgICAgICAgJ25hdmJhci10b2dnbGUtaWNvbic6IG5hdmJhclRvZ2dsZUljb24sXG4gICAgICAgICdvdmVybGF5LWljb24nOiBvdmVybGF5SWNvbixcbiAgICAgICAgJ3BhZ2luYXRpb24tbmV4dCc6IHBhZ2luYXRpb25OZXh0LFxuICAgICAgICAncGFnaW5hdGlvbi1wcmV2aW91cyc6IHBhZ2luYXRpb25QcmV2aW91cyxcbiAgICAgICAgJ3NlYXJjaC1pY29uJzogc2VhcmNoSWNvbixcbiAgICAgICAgJ3NlYXJjaC1sYXJnZSc6IHNlYXJjaExhcmdlLFxuICAgICAgICAnc2VhcmNoLW5hdmJhcic6IHNlYXJjaE5hdmJhcixcbiAgICAgICAgJ3NsaWRlbmF2LW5leHQnOiBzbGlkZW5hdk5leHQsXG4gICAgICAgICdzbGlkZW5hdi1uZXh0LWxhcmdlJzogc2xpZGVuYXZOZXh0TGFyZ2UsXG4gICAgICAgICdzbGlkZW5hdi1wcmV2aW91cyc6IHNsaWRlbmF2UHJldmlvdXMsXG4gICAgICAgICdzbGlkZW5hdi1wcmV2aW91cy1sYXJnZSc6IHNsaWRlbmF2UHJldmlvdXNMYXJnZVxuICAgIH07XG5cbiAgICB2YXIgSWNvbiA9IHtcblxuICAgICAgICBpbnN0YWxsOiBpbnN0YWxsLFxuXG4gICAgICAgIGV4dGVuZHM6IFNWRyxcblxuICAgICAgICBhcmdzOiAnaWNvbicsXG5cbiAgICAgICAgcHJvcHM6IFsnaWNvbiddLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGluY2x1ZGU6IFsnZm9jdXNhYmxlJ11cbiAgICAgICAgfSxcblxuICAgICAgICBpc0ljb246IHRydWUsXG5cbiAgICAgICAgYmVmb3JlQ29ubmVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLWljb24nKTtcbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGdldFN2ZzogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaWNvbiA9IGdldEljb24odGhpcy5pY29uKTtcblxuICAgICAgICAgICAgICAgIGlmICghaWNvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0ljb24gbm90IGZvdW5kLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaWNvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBJY29uQ29tcG9uZW50ID0ge1xuXG4gICAgICAgIGFyZ3M6IGZhbHNlLFxuXG4gICAgICAgIGV4dGVuZHM6IEljb24sXG5cbiAgICAgICAgZGF0YTogZnVuY3Rpb24gKHZtKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgaWNvbjogaHlwaGVuYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMubmFtZSlcbiAgICAgICAgfSk7IH0sXG5cbiAgICAgICAgYmVmb3JlQ29ubmVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy4kbmFtZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgU2xpZGVuYXYgPSB7XG5cbiAgICAgICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstc2xpZGVuYXYnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpY29uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gcmVmLmljb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzQ2xhc3MoJGVsLCAndWstc2xpZGVuYXYtbGFyZ2UnKVxuICAgICAgICAgICAgICAgICAgICA/IChpY29uICsgXCItbGFyZ2VcIilcbiAgICAgICAgICAgICAgICAgICAgOiBpY29uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgU2VhcmNoID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IEljb25Db21wb25lbnQsXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaWNvbjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWNvbiA9IHJlZi5pY29uO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKCRlbCwgJ3VrLXNlYXJjaC1pY29uJykgJiYgcGFyZW50cygkZWwsICcudWstc2VhcmNoLWxhcmdlJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8gJ3NlYXJjaC1sYXJnZSdcbiAgICAgICAgICAgICAgICAgICAgOiBwYXJlbnRzKCRlbCwgJy51ay1zZWFyY2gtbmF2YmFyJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdzZWFyY2gtbmF2YmFyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBpY29uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgQ2xvc2UgPSB7XG5cbiAgICAgICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpY29uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFwiY2xvc2UtXCIgKyAoaGFzQ2xhc3ModGhpcy4kZWwsICd1ay1jbG9zZS1sYXJnZScpID8gJ2xhcmdlJyA6ICdpY29uJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgU3Bpbm5lciA9IHtcblxuICAgICAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zdmcudGhlbihmdW5jdGlvbiAoc3ZnKSB7IHJldHVybiB0aGlzJDEucmF0aW8gIT09IDEgJiYgY3NzKCQoJ2NpcmNsZScsIHN2ZyksICdzdHJva2VXaWR0aCcsIDEgLyB0aGlzJDEucmF0aW8pOyB9LCBub29wKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBwYXJzZWQgPSB7fTtcbiAgICBmdW5jdGlvbiBpbnN0YWxsKFVJa2l0KSB7XG4gICAgICAgIFVJa2l0Lmljb24uYWRkID0gZnVuY3Rpb24gKG5hbWUsIHN2Zykge1xuICAgICAgICAgICAgdmFyIG9iajtcblxuXG4gICAgICAgICAgICB2YXIgYWRkZWQgPSBpc1N0cmluZyhuYW1lKSA/ICgoIG9iaiA9IHt9LCBvYmpbbmFtZV0gPSBzdmcsIG9iaiApKSA6IG5hbWU7XG4gICAgICAgICAgICBlYWNoKGFkZGVkLCBmdW5jdGlvbiAoc3ZnLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWNvbnNbbmFtZV0gPSBzdmc7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcnNlZFtuYW1lXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoVUlraXQuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlYWNoKFVJa2l0LmdldENvbXBvbmVudHMoZWwpLCBmdW5jdGlvbiAoY21wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbXAuJG9wdGlvbnMuaXNJY29uICYmIGNtcC5pY29uIGluIGFkZGVkICYmIGNtcC4kcmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEljb24oaWNvbikge1xuXG4gICAgICAgIGlmICghaWNvbnNbaWNvbl0pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJzZWRbaWNvbl0pIHtcbiAgICAgICAgICAgIHBhcnNlZFtpY29uXSA9ICQoKGljb25zW2FwcGx5UnRsKGljb24pXSB8fCBpY29uc1tpY29uXSkudHJpbSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZWRbaWNvbl0uY2xvbmVOb2RlKHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5UnRsKGljb24pIHtcbiAgICAgICAgcmV0dXJuIGlzUnRsID8gc3dhcChzd2FwKGljb24sICdsZWZ0JywgJ3JpZ2h0JyksICdwcmV2aW91cycsICduZXh0JykgOiBpY29uO1xuICAgIH1cblxuICAgIHZhciBpbWcgPSB7XG5cbiAgICAgICAgYXJnczogJ2RhdGFTcmMnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkYXRhU3JjOiBTdHJpbmcsXG4gICAgICAgICAgICBkYXRhU3Jjc2V0OiBCb29sZWFuLFxuICAgICAgICAgICAgc2l6ZXM6IFN0cmluZyxcbiAgICAgICAgICAgIHdpZHRoOiBOdW1iZXIsXG4gICAgICAgICAgICBoZWlnaHQ6IE51bWJlcixcbiAgICAgICAgICAgIG9mZnNldFRvcDogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogU3RyaW5nLFxuICAgICAgICAgICAgdGFyZ2V0OiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkYXRhU3JjOiAnJyxcbiAgICAgICAgICAgIGRhdGFTcmNzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgc2l6ZXM6IGZhbHNlLFxuICAgICAgICAgICAgd2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgaGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgIG9mZnNldFRvcDogJzUwdmgnLFxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogMCxcbiAgICAgICAgICAgIHRhcmdldDogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjYWNoZUtleTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFTcmMgPSByZWYuZGF0YVNyYztcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMuJG5hbWUpICsgXCIuXCIgKyBkYXRhU3JjKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdpZHRoOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWYud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFXaWR0aCA9IHJlZi5kYXRhV2lkdGg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGggfHwgZGF0YVdpZHRoO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YUhlaWdodCA9IHJlZi5kYXRhSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodCB8fCBkYXRhSGVpZ2h0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2l6ZXM6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IHJlZi5zaXplcztcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNpemVzID0gcmVmLmRhdGFTaXplcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBzaXplcyB8fCBkYXRhU2l6ZXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0ltZzogZnVuY3Rpb24oXywgJGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzSW1nKCRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXQ6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy4kZWwgXS5jb25jYXQoIHF1ZXJ5QWxsKHRhcmdldCwgdGhpcy4kZWwpKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9mZnNldFRvcDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldFRvcCA9IHJlZi5vZmZzZXRUb3A7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9QeChvZmZzZXRUb3AsICdoZWlnaHQnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9mZnNldExlZnQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gcmVmLm9mZnNldExlZnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9QeChvZmZzZXRMZWZ0LCAnd2lkdGgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGlmIChzdG9yYWdlW3RoaXMuY2FjaGVLZXldKSB7XG4gICAgICAgICAgICAgICAgc2V0U3JjQXR0cnModGhpcy4kZWwsIHN0b3JhZ2VbdGhpcy5jYWNoZUtleV0sIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJbWcgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHNldFNyY0F0dHJzKHRoaXMuJGVsLCBnZXRQbGFjZWhvbGRlckltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnNpemVzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIodGhpcy5sb2FkLCB7XG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogKCh0aGlzLm9mZnNldFRvcCkgKyBcInB4IFwiICsgKHRoaXMub2Zmc2V0TGVmdCkgKyBcInB4XCIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub2JzZXJ2ZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHJlZi5pbWFnZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbWFnZSAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW1nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWFnZSAmJiBpbWFnZS50aGVuKGZ1bmN0aW9uIChpbWcpIHsgcmV0dXJuIGltZyAmJiBpbWcuY3VycmVudFNyYyAhPT0gJycgJiYgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpKTsgfSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhU3Jjc2V0ICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnU2l6ZSA9IGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZ1NpemUubWF0Y2goL14oYXV0b1xccz8pKyQvKSB8fCB0b0Zsb2F0KGJnU2l6ZSkgPT09IGRhdGEuYmdTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJnU2l6ZSA9IGdldFNvdXJjZVNpemUodGhpcy5kYXRhU3Jjc2V0LCB0aGlzLnNpemVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJywgKChkYXRhLmJnU2l6ZSkgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oZW50cmllcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAvLyBPbGQgY2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgKFVDIEJyb3dzZXIpIGRpZCBub3QgaW1wbGVtZW50IGBpc0ludGVyc2VjdGluZ2BcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJpZXMuc29tZShmdW5jdGlvbiAoZW50cnkpIHsgcmV0dXJuIGlzVW5kZWZpbmVkKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB8fCBlbnRyeS5pc0ludGVyc2VjdGluZzsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuaW1hZ2UgPSBnZXRJbWFnZSh0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcykudGhlbihmdW5jdGlvbiAoaW1nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpLCBpbWcuc3Jjc2V0LCBpbWcuc2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlW3RoaXMkMS5jYWNoZUtleV0gPSBjdXJyZW50U3JjKGltZyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWc7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHJpZ2dlcih0aGlzJDEuJGVsLCBuZXcgZS5jb25zdHJ1Y3RvcihlLnR5cGUsIGUpKTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9ic2VydmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCAmJiAhdGhpcy5fZGF0YS5pbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gdGhpcyQxLm9ic2VydmVyLm9ic2VydmUoZWwpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNldFNyY0F0dHJzKGVsLCBzcmMsIHNyY3NldCwgc2l6ZXMpIHtcblxuICAgICAgICBpZiAoaXNJbWcoZWwpKSB7XG4gICAgICAgICAgICBzaXplcyAmJiAoZWwuc2l6ZXMgPSBzaXplcyk7XG4gICAgICAgICAgICBzcmNzZXQgJiYgKGVsLnNyY3NldCA9IHNyY3NldCk7XG4gICAgICAgICAgICBzcmMgJiYgKGVsLnNyYyA9IHNyYyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3JjKSB7XG5cbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSAhaW5jbHVkZXMoZWwuc3R5bGUuYmFja2dyb3VuZEltYWdlLCBzcmMpO1xuICAgICAgICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgIGNzcyhlbCwgJ2JhY2tncm91bmRJbWFnZScsIChcInVybChcIiArIChlc2NhcGUoc3JjKSkgKyBcIilcIikpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIGNyZWF0ZUV2ZW50KCdsb2FkJywgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlckltYWdlKHdpZHRoLCBoZWlnaHQsIHNpemVzKSB7XG4gICAgICAgIHZhciBhc3NpZ247XG5cblxuICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICgoYXNzaWduID0gRGltZW5zaW9ucy5yYXRpbyh7d2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodH0sICd3aWR0aCcsIHRvUHgoc2l6ZXNUb1BpeGVsKHNpemVzKSkpLCB3aWR0aCA9IGFzc2lnbi53aWR0aCwgaGVpZ2h0ID0gYXNzaWduLmhlaWdodCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcImRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LDxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiXCIgKyB3aWR0aCArIFwiXFxcIiBoZWlnaHQ9XFxcIlwiICsgaGVpZ2h0ICsgXCJcXFwiPjwvc3ZnPlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc2l6ZXNSZSA9IC9cXHMqKC4qPylcXHMqKFxcdyt8Y2FsY1xcKC4qP1xcKSlcXHMqKD86LHwkKS9nO1xuICAgIGZ1bmN0aW9uIHNpemVzVG9QaXhlbChzaXplcykge1xuICAgICAgICB2YXIgbWF0Y2hlcztcblxuICAgICAgICBzaXplc1JlLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKChtYXRjaGVzID0gc2l6ZXNSZS5leGVjKHNpemVzKSkpIHtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlc1sxXSB8fCB3aW5kb3cubWF0Y2hNZWRpYShtYXRjaGVzWzFdKS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGV2YWx1YXRlU2l6ZShtYXRjaGVzWzJdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaGVzIHx8ICcxMDB2dyc7XG4gICAgfVxuXG4gICAgdmFyIHNpemVSZSA9IC9cXGQrKD86XFx3K3wlKS9nO1xuICAgIHZhciBhZGRpdGlvblJlID0gL1srLV0/KFxcZCspL2c7XG4gICAgZnVuY3Rpb24gZXZhbHVhdGVTaXplKHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGgoc2l6ZSwgJ2NhbGMnKVxuICAgICAgICAgICAgPyBzaXplXG4gICAgICAgICAgICAgICAgLnN1YnN0cmluZyg1LCBzaXplLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2Uoc2l6ZVJlLCBmdW5jdGlvbiAoc2l6ZSkgeyByZXR1cm4gdG9QeChzaXplKTsgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAnJylcbiAgICAgICAgICAgICAgICAubWF0Y2goYWRkaXRpb25SZSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgK2I7IH0sIDApXG4gICAgICAgICAgICA6IHNpemU7XG4gICAgfVxuXG4gICAgdmFyIHNyY1NldFJlID0gL1xccytcXGQrd1xccyooPzosfCQpL2c7XG4gICAgZnVuY3Rpb24gZ2V0U291cmNlU2l6ZShzcmNzZXQsIHNpemVzKSB7XG4gICAgICAgIHZhciBzcmNTaXplID0gdG9QeChzaXplc1RvUGl4ZWwoc2l6ZXMpKTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3JzID0gKHNyY3NldC5tYXRjaChzcmNTZXRSZSkgfHwgW10pLm1hcCh0b0Zsb2F0KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIC0gYjsgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3JzLmZpbHRlcihmdW5jdGlvbiAoc2l6ZSkgeyByZXR1cm4gc2l6ZSA+PSBzcmNTaXplOyB9KVswXSB8fCBkZXNjcmlwdG9ycy5wb3AoKSB8fCAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0ltZyhlbCkge1xuICAgICAgICByZXR1cm4gZWwudGFnTmFtZSA9PT0gJ0lNRyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudFNyYyhlbCkge1xuICAgICAgICByZXR1cm4gZWwuY3VycmVudFNyYyB8fCBlbC5zcmM7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9ICdfX3Rlc3RfXyc7XG4gICAgdmFyIHN0b3JhZ2U7XG5cbiAgICAvLyB3b3JrYXJvdW5kIGZvciBTYWZhcmkncyBwcml2YXRlIGJyb3dzaW5nIG1vZGUgYW5kIGFjY2Vzc2luZyBzZXNzaW9uU3RvcmFnZSBpbiBCbGlua1xuICAgIHRyeSB7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgfHwge307XG4gICAgICAgIHN0b3JhZ2Vba2V5XSA9IDE7XG4gICAgICAgIGRlbGV0ZSBzdG9yYWdlW2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdG9yYWdlID0ge307XG4gICAgfVxuXG4gICAgdmFyIE1lZGlhID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtZWRpYTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1lZGlhOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBtZWRpYSA9IHRvTWVkaWEodGhpcy5tZWRpYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFtZWRpYSB8fCB3aW5kb3cubWF0Y2hNZWRpYShtZWRpYSkubWF0Y2hlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9NZWRpYSh2YWx1ZSkge1xuXG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZVswXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBcImJyZWFrcG9pbnQtXCIgKyAodmFsdWUuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvRmxvYXQoZ2V0Q3NzVmFyKG5hbWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlICYmICFpc05hTih2YWx1ZSkgPyAoXCIobWluLXdpZHRoOiBcIiArIHZhbHVlICsgXCJweClcIikgOiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGVhZGVyID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBNZWRpYV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGZpbGw6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbGw6ICcnLFxuICAgICAgICAgICAgY2xzV3JhcHBlcjogJ3VrLWxlYWRlci1maWxsJyxcbiAgICAgICAgICAgIGNsc0hpZGU6ICd1ay1sZWFkZXItaGlkZScsXG4gICAgICAgICAgICBhdHRyRmlsbDogJ2RhdGEtZmlsbCdcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBmaWxsOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsbCA9IHJlZi5maWxsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGwgfHwgZ2V0Q3NzVmFyKCdsZWFkZXItZmlsbC1jb250ZW50Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFzc2lnbjtcblxuICAgICAgICAgICAgKGFzc2lnbiA9IHdyYXBJbm5lcih0aGlzLiRlbCwgKFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgKHRoaXMuY2xzV3JhcHBlcikgKyBcIlxcXCI+XCIpKSwgdGhpcy53cmFwcGVyID0gYXNzaWduWzBdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdW53cmFwKHRoaXMud3JhcHBlci5jaGlsZE5vZGVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSByZWYuY2hhbmdlZDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWYud2lkdGg7XG5cblxuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGguZmxvb3IodGhpcy4kZWwub2Zmc2V0V2lkdGggLyAyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogdGhpcy5maWxsLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkOiBjaGFuZ2VkIHx8IHByZXYgIT09IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoaWRlOiAhdGhpcy5tYXRjaE1lZGlhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLndyYXBwZXIsIHRoaXMuY2xzSGlkZSwgZGF0YS5oaWRlKTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIodGhpcy53cmFwcGVyLCB0aGlzLmF0dHJGaWxsLCBuZXcgQXJyYXkoZGF0YS53aWR0aCkuam9pbihkYXRhLmZpbGwpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgQ29udGFpbmVyID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBjb250YWluZXI6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb250YWluZXI6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjb250YWluZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSByZWYuY29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciA9PT0gdHJ1ZSAmJiB0aGlzLiRjb250YWluZXIgfHwgY29udGFpbmVyICYmICQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGFjdGl2ZSQxID0gW107XG5cbiAgICB2YXIgTW9kYWwgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIENvbnRhaW5lciwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VsUGFuZWw6IFN0cmluZyxcbiAgICAgICAgICAgIHNlbENsb3NlOiBTdHJpbmcsXG4gICAgICAgICAgICBlc2NDbG9zZTogQm9vbGVhbixcbiAgICAgICAgICAgIGJnQ2xvc2U6IEJvb2xlYW4sXG4gICAgICAgICAgICBzdGFjazogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogJ3VrLW9wZW4nLFxuICAgICAgICAgICAgZXNjQ2xvc2U6IHRydWUsXG4gICAgICAgICAgICBiZ0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIHN0YWNrOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHBhbmVsOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxQYW5lbCA9IHJlZi5zZWxQYW5lbDtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbFBhbmVsLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYmdDbG9zZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJnQ2xvc2UgPSByZWYuYmdDbG9zZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBiZ0Nsb3NlICYmIHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVEaXNjb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxDbG9zZTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvZ2dsZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQoKSA9PT0gaW5jbHVkZXMoYWN0aXZlJDEsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2JlZm9yZXNob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZXMoYWN0aXZlJDEsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhY2sgJiYgYWN0aXZlJDEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChhY3RpdmUkMS5tYXAoZnVuY3Rpb24gKG1vZGFsKSB7IHJldHVybiBtb2RhbC5oaWRlKCk7IH0pKS50aGVuKHRoaXMuc2hvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUkMS5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnc2hvdycsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoKHdpbmRvdykgLSB3aWR0aChkb2N1bWVudCkgJiYgdGhpcy5vdmVybGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93WScsICdzY3JvbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICd6SW5kZXgnLCB0b0Zsb2F0KGNzcyh0aGlzLiRlbCwgJ3pJbmRleCcpKSArIGFjdGl2ZSQxLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzUGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYmdDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jZSh0aGlzLiRlbCwgJ2hpZGUnLCBvbihkb2N1bWVudCwgcG9pbnRlckRvd24sIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3QoYWN0aXZlJDEpICE9PSB0aGlzJDEgfHwgdGhpcyQxLm92ZXJsYXkgJiYgIXdpdGhpbih0YXJnZXQsIHRoaXMkMS4kZWwpIHx8IHdpdGhpbih0YXJnZXQsIHRoaXMkMS5wYW5lbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2UoZG9jdW1lbnQsIChwb2ludGVyVXAgKyBcIiBcIiArIHBvaW50ZXJDYW5jZWwgKyBcIiBzY3JvbGxcIiksIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSByZWYuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1RhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIHR5cGUgPT09IHBvaW50ZXJVcCAmJiB0YXJnZXQgPT09IG5ld1RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwge3NlbGY6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVzY0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcgJiYgbGFzdChhY3RpdmUkMSkgPT09IHRoaXMkMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRkZW4nLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSQxLnNwbGljZShhY3RpdmUkMS5pbmRleE9mKHRoaXMpLCAxKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSQxLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGRvY3VtZW50LmJvZHksICdvdmVyZmxvd1knLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICd6SW5kZXgnLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUkMS5zb21lKGZ1bmN0aW9uIChtb2RhbCkgeyByZXR1cm4gbW9kYWwuY2xzUGFnZSA9PT0gdGhpcyQxLmNsc1BhZ2U7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVG9nZ2xlZCgpID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluZXIgJiYgdGhpcy4kZWwucGFyZW50Tm9kZSAhPT0gdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kKHRoaXMuY29udGFpbmVyLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zaG93KCkudGhlbihyZXNvbHZlKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwsIHRydWUsIGFuaW1hdGUkMSh0aGlzKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsLCBmYWxzZSwgYW5pbWF0ZSQxKHRoaXMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSQxKHJlZikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkVsZW1lbnQgPSByZWYudHJhbnNpdGlvbkVsZW1lbnQ7XG4gICAgICAgIHZhciBfdG9nZ2xlID0gcmVmLl90b2dnbGU7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgc2hvdykgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gb25jZShlbCwgJ3Nob3cgaGlkZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuX3JlamVjdCAmJiBlbC5fcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLl9yZWplY3QgPSByZWplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZShlbCwgc2hvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZiA9IG9uY2UodHJhbnNpdGlvbkVsZW1lbnQsICd0cmFuc2l0aW9uc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNlKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbmVuZCB0cmFuc2l0aW9uY2FuY2VsJywgcmVzb2x2ZSwge3NlbGY6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdG9Ncyhjc3ModHJhbnNpdGlvbkVsZW1lbnQsICd0cmFuc2l0aW9uRHVyYXRpb24nKSkpO1xuXG4gICAgICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgICAgICk7IH07XG4gICAgfVxuXG4gICAgdmFyIG1vZGFsID0ge1xuXG4gICAgICAgIGluc3RhbGw6IGluc3RhbGwkMSxcblxuICAgICAgICBtaXhpbnM6IFtNb2RhbF0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2xzUGFnZTogJ3VrLW1vZGFsLXBhZ2UnLFxuICAgICAgICAgICAgc2VsUGFuZWw6ICcudWstbW9kYWwtZGlhbG9nJyxcbiAgICAgICAgICAgIHNlbENsb3NlOiAnLnVrLW1vZGFsLWNsb3NlLCAudWstbW9kYWwtY2xvc2UtZGVmYXVsdCwgLnVrLW1vZGFsLWNsb3NlLW91dHNpZGUsIC51ay1tb2RhbC1jbG9zZS1mdWxsJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0aGlzLnBhbmVsLCAndWstbWFyZ2luLWF1dG8tdmVydGljYWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1mbGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQodGhpcy4kZWwpOyAvLyBmb3JjZSByZWZsb3dcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsICd1ay1mbGV4Jyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluc3RhbGwkMShyZWYpIHtcbiAgICAgICAgdmFyIG1vZGFsID0gcmVmLm1vZGFsO1xuXG5cbiAgICAgICAgbW9kYWwuZGlhbG9nID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdmFyIGRpYWxvZyA9IG1vZGFsKFxuICAgICAgICAgICAgICAgIChcIjxkaXYgY2xhc3M9XFxcInVrLW1vZGFsXFxcIj4gPGRpdiBjbGFzcz1cXFwidWstbW9kYWwtZGlhbG9nXFxcIj5cIiArIGNvbnRlbnQgKyBcIjwvZGl2PiA8L2Rpdj5cIiksXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZGlhbG9nLnNob3coKTtcblxuICAgICAgICAgICAgb24oZGlhbG9nLiRlbCwgJ2hpZGRlbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlhbG9nLiRkZXN0cm95KHRydWUpOyB9XG4gICAgICAgICAgICAgICAgKTsgfSwge3NlbGY6IHRydWV9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGlhbG9nO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGFsLmFsZXJ0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcGVuRGlhbG9nKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9IHJlZi5sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWJvZHlcXFwiPlwiICsgKGlzU3RyaW5nKG1lc3NhZ2UpID8gbWVzc2FnZSA6IGh0bWwobWVzc2FnZSkpICsgXCI8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidWstbW9kYWwtZm9vdGVyIHVrLXRleHQtcmlnaHRcXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJ1ay1idXR0b24gdWstYnV0dG9uLXByaW1hcnkgdWstbW9kYWwtY2xvc2VcXFwiIGF1dG9mb2N1cz5cIiArIChsYWJlbHMub2spICsgXCI8L2J1dHRvbj4gPC9kaXY+XCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkZWZlcnJlZCkgeyByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZSgpOyB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGFsLmNvbmZpcm0gPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG9wZW5EaWFsb2coXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxzID0gcmVmLmxhYmVscztcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGZvcm0+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWJvZHlcXFwiPlwiICsgKGlzU3RyaW5nKG1lc3NhZ2UpID8gbWVzc2FnZSA6IGh0bWwobWVzc2FnZSkpICsgXCI8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidWstbW9kYWwtZm9vdGVyIHVrLXRleHQtcmlnaHRcXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJ1ay1idXR0b24gdWstYnV0dG9uLWRlZmF1bHQgdWstbW9kYWwtY2xvc2VcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCI+XCIgKyAobGFiZWxzLmNhbmNlbCkgKyBcIjwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPVxcXCJ1ay1idXR0b24gdWstYnV0dG9uLXByaW1hcnlcXFwiIGF1dG9mb2N1cz5cIiArIChsYWJlbHMub2spICsgXCI8L2J1dHRvbj4gPC9kaXY+IDwvZm9ybT5cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRlZmVycmVkKSB7IHJldHVybiBkZWZlcnJlZC5yZWplY3QoKTsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5wcm9tcHQgPSBmdW5jdGlvbiAobWVzc2FnZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcGVuRGlhbG9nKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9IHJlZi5sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxmb3JtIGNsYXNzPVxcXCJ1ay1mb3JtLXN0YWNrZWRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1ib2R5XFxcIj4gPGxhYmVsPlwiICsgKGlzU3RyaW5nKG1lc3NhZ2UpID8gbWVzc2FnZSA6IGh0bWwobWVzc2FnZSkpICsgXCI8L2xhYmVsPiA8aW5wdXQgY2xhc3M9XFxcInVrLWlucHV0XFxcIiB2YWx1ZT1cXFwiXCIgKyAodmFsdWUgfHwgJycpICsgXCJcXFwiIGF1dG9mb2N1cz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1kZWZhdWx0IHVrLW1vZGFsLWNsb3NlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPlwiICsgKGxhYmVscy5jYW5jZWwpICsgXCI8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5XFxcIj5cIiArIChsYWJlbHMub2spICsgXCI8L2J1dHRvbj4gPC9kaXY+IDwvZm9ybT5cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRlZmVycmVkKSB7IHJldHVybiBkZWZlcnJlZC5yZXNvbHZlKG51bGwpOyB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkaWFsb2cpIHsgcmV0dXJuICQoJ2lucHV0JywgZGlhbG9nLiRlbCkudmFsdWU7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbW9kYWwubGFiZWxzID0ge1xuICAgICAgICAgICAgb2s6ICdPaycsXG4gICAgICAgICAgICBjYW5jZWw6ICdDYW5jZWwnXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlbkRpYWxvZyh0bXBsLCBvcHRpb25zLCBoaWRlRm4sIHN1Ym1pdEZuKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBhc3NpZ24oe2JnQ2xvc2U6IGZhbHNlLCBlc2NDbG9zZTogdHJ1ZSwgbGFiZWxzOiBtb2RhbC5sYWJlbHN9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgdmFyIGRpYWxvZyA9IG1vZGFsLmRpYWxvZyh0bXBsKG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgb24oZGlhbG9nLiRlbCwgJ3N1Ym1pdCcsICdmb3JtJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShzdWJtaXRGbiAmJiBzdWJtaXRGbihkaWFsb2cpKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZGlhbG9nLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvbihkaWFsb2cuJGVsLCAnaGlkZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuICFyZXNvbHZlZCAmJiBoaWRlRm4oZGVmZXJyZWQpOyB9KTtcblxuICAgICAgICAgICAgZGVmZXJyZWQucHJvbWlzZS5kaWFsb2cgPSBkaWFsb2c7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YXIgbmF2ID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IEFjY29yZGlvbixcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXRzOiAnPiAudWstcGFyZW50JyxcbiAgICAgICAgICAgIHRvZ2dsZTogJz4gYScsXG4gICAgICAgICAgICBjb250ZW50OiAnPiB1bCdcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBuYXZiYXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIEZsZXhCdWddLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkcm9wZG93bjogU3RyaW5nLFxuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgYWxpZ246IFN0cmluZyxcbiAgICAgICAgICAgIG9mZnNldDogTnVtYmVyLFxuICAgICAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiBCb29sZWFuLFxuICAgICAgICAgICAgY2xzRHJvcDogU3RyaW5nLFxuICAgICAgICAgICAgZGVsYXlTaG93OiBOdW1iZXIsXG4gICAgICAgICAgICBkZWxheUhpZGU6IE51bWJlcixcbiAgICAgICAgICAgIGRyb3BiYXI6IEJvb2xlYW4sXG4gICAgICAgICAgICBkcm9wYmFyTW9kZTogU3RyaW5nLFxuICAgICAgICAgICAgZHJvcGJhckFuY2hvcjogQm9vbGVhbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkcm9wZG93bjogJy51ay1uYXZiYXItbmF2ID4gbGknLFxuICAgICAgICAgICAgYWxpZ246ICFpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICAgICAgICBjbHNEcm9wOiAndWstbmF2YmFyLWRyb3Bkb3duJyxcbiAgICAgICAgICAgIG1vZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9mZnNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVsYXlTaG93OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZWxheUhpZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvdW5kYXJ5QWxpZ246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZsaXA6ICd4JyxcbiAgICAgICAgICAgIGJvdW5kYXJ5OiB0cnVlLFxuICAgICAgICAgICAgZHJvcGJhcjogZmFsc2UsXG4gICAgICAgICAgICBkcm9wYmFyTW9kZTogJ3NsaWRlJyxcbiAgICAgICAgICAgIGRyb3BiYXJBbmNob3I6IGZhbHNlLFxuICAgICAgICAgICAgZHVyYXRpb246IDIwMCxcbiAgICAgICAgICAgIGZvcmNlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgc2VsTWluSGVpZ2h0OiAnLnVrLW5hdmJhci1uYXYgPiBsaSA+IGEsIC51ay1uYXZiYXItaXRlbSwgLnVrLW5hdmJhci10b2dnbGUnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgYm91bmRhcnk6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJ5ID0gcmVmLmJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeUFsaWduID0gcmVmLmJvdW5kYXJ5QWxpZ247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGJvdW5kYXJ5ID09PSB0cnVlIHx8IGJvdW5kYXJ5QWxpZ24pID8gJGVsIDogYm91bmRhcnk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wYmFyQW5jaG9yOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBkcm9wYmFyQW5jaG9yID0gcmVmLmRyb3BiYXJBbmNob3I7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkoZHJvcGJhckFuY2hvciwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBvczogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWduID0gcmVmLmFsaWduO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcImJvdHRvbS1cIiArIGFsaWduKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRyb3BiYXI6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcm9wYmFyID0gcmVmLmRyb3BiYXI7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRyb3BiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZHJvcGJhciA9IHRoaXMuX2Ryb3BiYXIgfHwgcXVlcnkoZHJvcGJhciwgdGhpcy4kZWwpIHx8ICQoJysgLnVrLW5hdmJhci1kcm9wYmFyJywgdGhpcy4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkcm9wYmFyID8gZHJvcGJhciA6ICh0aGlzLl9kcm9wYmFyID0gJCgnPGRpdj48L2Rpdj4nKSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGRyb3BiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZHJvcGJhciwgJ3VrLW5hdmJhci1kcm9wYmFyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wZG93bnM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyb3Bkb3duID0gcmVmLmRyb3Bkb3duO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xzRHJvcCA9IHJlZi5jbHNEcm9wO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCgoZHJvcGRvd24gKyBcIiAuXCIgKyBjbHNEcm9wKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGRyb3Bkb3ducykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZHJvcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bnMuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIXRoaXMkMS5nZXREcm9wZG93bihlbCk7IH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduKHt9LCB0aGlzLiRwcm9wcywge2JvdW5kYXJ5OiB0aGlzLmJvdW5kYXJ5LCBwb3M6IHRoaXMucG9zLCBvZmZzZXQ6IHRoaXMuZHJvcGJhciB8fCB0aGlzLm9mZnNldH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kcm9wYmFyICYmIHJlbW92ZSh0aGlzLmRyb3BiYXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2Ryb3BiYXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbW91c2VvdmVyJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGRvd247XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHJlZi5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmIGFjdGl2ZS50b2dnbGUgJiYgIXdpdGhpbihhY3RpdmUudG9nZ2xlLiRlbCwgY3VycmVudCkgJiYgIWFjdGl2ZS50cmFja2VyLm1vdmVzVG8oYWN0aXZlLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdtb3VzZWxlYXZlJyxcblxuICAgICAgICAgICAgICAgIGVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgJiYgIXRoaXMuZHJvcGRvd25zLnNvbWUoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBtYXRjaGVzKGVsLCAnOmhvdmVyJyk7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVzaG93JyxcblxuICAgICAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wYmFyO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJvcGJhci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlcih0aGlzLmRyb3BiYXJBbmNob3IgfHwgdGhpcy4kZWwsIHRoaXMuZHJvcGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnc2hvdycsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wYmFyO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihfLCByZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9IHJlZi4kZWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSByZWYuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzQ2xhc3MoJGVsLCB0aGlzLmNsc0Ryb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wYmFyTW9kZSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5kcm9wYmFyLCAndWstbmF2YmFyLWRyb3BiYXItc2xpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xzRHJvcCAmJiBhZGRDbGFzcygkZWwsICgodGhpcy5jbHNEcm9wKSArIFwiLWRyb3BiYXJcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXIgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25UbygkZWwub2Zmc2V0SGVpZ2h0ICsgdG9GbG9hdChjc3MoJGVsLCAnbWFyZ2luVG9wJykpICsgdG9GbG9hdChjc3MoJGVsLCAnbWFyZ2luQm90dG9tJykpLCAkZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVoaWRlJyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUsIHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKHRoaXMuZHJvcGJhciwgJzpob3ZlcicpICYmIGFjdGl2ZSAmJiBhY3RpdmUuJGVsID09PSAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZScsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wYmFyO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihfLCByZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9IHJlZi4kZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNDbGFzcygkZWwsIHRoaXMuY2xzRHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlIHx8IGFjdGl2ZSAmJiBhY3RpdmUuJGVsID09PSAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBnZXRBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLmRyb3Bkb3ducy5tYXAodGhpcy5nZXREcm9wZG93bikuZmlsdGVyKGZ1bmN0aW9uIChkcm9wKSB7IHJldHVybiBkcm9wICYmIGRyb3AuaXNBY3RpdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlICYmIGluY2x1ZGVzKGFjdGl2ZS5tb2RlLCAnaG92ZXInKSAmJiB3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIHRoaXMuJGVsKSAmJiBhY3RpdmU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uKG5ld0hlaWdodCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRyb3BiYXIgPSByZWYuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB2YXIgb2xkSGVpZ2h0ID0gaXNWaXNpYmxlKGRyb3BiYXIpID8gaGVpZ2h0KGRyb3BiYXIpIDogMDtcblxuICAgICAgICAgICAgICAgIGVsID0gb2xkSGVpZ2h0IDwgbmV3SGVpZ2h0ICYmIGVsO1xuXG4gICAgICAgICAgICAgICAgY3NzKGVsLCAnY2xpcCcsIChcInJlY3QoMCxcIiArIChlbC5vZmZzZXRXaWR0aCkgKyBcInB4LFwiICsgb2xkSGVpZ2h0ICsgXCJweCwwKVwiKSk7XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQoZHJvcGJhciwgb2xkSGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKFtlbCwgZHJvcGJhcl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZHJvcGJhciwge2hlaWdodDogbmV3SGVpZ2h0fSwgdGhpcy5kdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZWwsIHtjbGlwOiAoXCJyZWN0KDAsXCIgKyAoZWwub2Zmc2V0V2lkdGgpICsgXCJweCxcIiArIG5ld0hlaWdodCArIFwicHgsMClcIil9LCB0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChub29wKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsIHtjbGlwOiAnJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUoZHJvcGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RHJvcGRvd246IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGdldENvbXBvbmVudChlbCwgJ2Ryb3AnKSB8fCB0aGlzLiRnZXRDb21wb25lbnQoZWwsICdkcm9wZG93bicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgb2ZmY2FudmFzID0ge1xuXG4gICAgICAgIG1peGluczogW01vZGFsXSxcblxuICAgICAgICBhcmdzOiAnbW9kZScsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1vZGU6IFN0cmluZyxcbiAgICAgICAgICAgIGZsaXA6IEJvb2xlYW4sXG4gICAgICAgICAgICBvdmVybGF5OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbW9kZTogJ3NsaWRlJyxcbiAgICAgICAgICAgIGZsaXA6IGZhbHNlLFxuICAgICAgICAgICAgb3ZlcmxheTogZmFsc2UsXG4gICAgICAgICAgICBjbHNQYWdlOiAndWstb2ZmY2FudmFzLXBhZ2UnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstb2ZmY2FudmFzLWNvbnRhaW5lcicsXG4gICAgICAgICAgICBzZWxQYW5lbDogJy51ay1vZmZjYW52YXMtYmFyJyxcbiAgICAgICAgICAgIGNsc0ZsaXA6ICd1ay1vZmZjYW52YXMtZmxpcCcsXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246ICd1ay1vZmZjYW52YXMtY29udGFpbmVyLWFuaW1hdGlvbicsXG4gICAgICAgICAgICBjbHNTaWRlYmFyQW5pbWF0aW9uOiAndWstb2ZmY2FudmFzLWJhci1hbmltYXRpb24nLFxuICAgICAgICAgICAgY2xzTW9kZTogJ3VrLW9mZmNhbnZhcycsXG4gICAgICAgICAgICBjbHNPdmVybGF5OiAndWstb2ZmY2FudmFzLW92ZXJsYXknLFxuICAgICAgICAgICAgc2VsQ2xvc2U6ICcudWstb2ZmY2FudmFzLWNsb3NlJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjbHNGbGlwOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpcCA9IHJlZi5mbGlwO1xuICAgICAgICAgICAgICAgIHZhciBjbHNGbGlwID0gcmVmLmNsc0ZsaXA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmxpcCA/IGNsc0ZsaXAgOiAnJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc092ZXJsYXk6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBvdmVybGF5ID0gcmVmLm92ZXJsYXk7XG4gICAgICAgICAgICAgICAgdmFyIGNsc092ZXJsYXkgPSByZWYuY2xzT3ZlcmxheTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBvdmVybGF5ID8gY2xzT3ZlcmxheSA6ICcnO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xzTW9kZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xzTW9kZSA9IHJlZi5jbHNNb2RlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjbHNNb2RlICsgXCItXCIgKyBtb2RlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc1NpZGViYXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1NpZGViYXJBbmltYXRpb24gPSByZWYuY2xzU2lkZWJhckFuaW1hdGlvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3JldmVhbCcgPyAnJyA6IGNsc1NpZGViYXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc0NvbnRhaW5lckFuaW1hdGlvbiA9IHJlZi5jbHNDb250YWluZXJBbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZSAhPT0gJ3B1c2gnICYmIG1vZGUgIT09ICdyZXZlYWwnID8gJycgOiBjbHNDb250YWluZXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAncmV2ZWFsJyA/IHRoaXMucGFuZWwucGFyZW50Tm9kZSA6IHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gcmVmLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgJChoYXNoLCBkb2N1bWVudC5ib2R5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndG91Y2hzdGFydCcsXG5cbiAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gcmVmLnRhcmdldFRvdWNoZXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50WSA9IHRhcmdldFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3ZlcmxheTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0b3VjaG1vdmUnLFxuXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIC0gdGhpcy5jbGllbnRZO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHJlZi5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSByZWYuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gcmVmLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpZW50SGVpZ2h0ID49IHNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Nyb2xsVG9wID09PSAwICYmIGNsaWVudFkgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgPD0gY2xpZW50SGVpZ2h0ICYmIGNsaWVudFkgPCAwXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdyZXZlYWwnICYmICFoYXNDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBBbGwodGhpcy5wYW5lbCwgJzxkaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnb3ZlcmZsb3dZJywgdGhpcy5vdmVybGF5ID8gJ2hpZGRlbicgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICdwYW4teSBwaW5jaC16b29tJyk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5tb2RlICE9PSAncmV2ZWFsJyA/IHRoaXMuY2xzTW9kZSA6ICcnKTtcblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQoZG9jdW1lbnQuYm9keSk7IC8vIGZvcmNlIHJlZmxvd1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCB0aGlzLmNsc0NvbnRhaW5lckFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgc3VwcHJlc3NVc2VyU2NhbGUoKTtcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgcmVzdW1lVXNlclNjYWxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gJ3JldmVhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVud3JhcCh0aGlzLnBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5jbHNNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdvdmVyZmxvd1knLCAnJyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlTGVmdCBzd2lwZVJpZ2h0JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQoKSAmJiBlbmRzV2l0aChlLnR5cGUsICdMZWZ0JykgXiB0aGlzLmZsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIC8vIENocm9tZSBpbiByZXNwb25zaXZlIG1vZGUgem9vbXMgcGFnZSB1cG9uIG9wZW5pbmcgb2ZmY2FudmFzXG4gICAgZnVuY3Rpb24gc3VwcHJlc3NVc2VyU2NhbGUoKSB7XG4gICAgICAgIGdldFZpZXdwb3J0JDEoKS5jb250ZW50ICs9ICcsdXNlci1zY2FsYWJsZT0wJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWVVc2VyU2NhbGUoKSB7XG4gICAgICAgIHZhciB2aWV3cG9ydCA9IGdldFZpZXdwb3J0JDEoKTtcbiAgICAgICAgdmlld3BvcnQuY29udGVudCA9IHZpZXdwb3J0LmNvbnRlbnQucmVwbGFjZSgvLHVzZXItc2NhbGFibGU9MCQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Vmlld3BvcnQkMSgpIHtcbiAgICAgICAgcmV0dXJuICQoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJywgZG9jdW1lbnQuaGVhZCkgfHwgYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIj4nKTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmZsb3dBdXRvID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VsQ29udGFpbmVyOiBTdHJpbmcsXG4gICAgICAgICAgICBzZWxDb250ZW50OiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBzZWxDb250YWluZXI6ICcudWstbW9kYWwnLFxuICAgICAgICAgICAgc2VsQ29udGVudDogJy51ay1tb2RhbC1kaWFsb2cnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgY29udGFpbmVyOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxDb250YWluZXIgPSByZWYuc2VsQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250YWluZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGVudDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsQ29udGVudCA9IHJlZi5zZWxDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCAxNTApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50IHx8ICF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdG9GbG9hdChjc3ModGhpcy4kZWwsICdtYXhIZWlnaHQnKSksXG4gICAgICAgICAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTUwLCBoZWlnaHQodGhpcy5jb250YWluZXIpIC0gKG9mZnNldCh0aGlzLmNvbnRlbnQpLmhlaWdodCAtIGhlaWdodCh0aGlzLiRlbCkpKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmVmLm1heDtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ21heEhlaWdodCcsIG1heCk7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucm91bmQoY3VycmVudCkgIT09IE1hdGgucm91bmQobWF4KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciByZXNwb25zaXZlID0ge1xuXG4gICAgICAgIHByb3BzOiBbJ3dpZHRoJywgJ2hlaWdodCddLFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLXJlc3BvbnNpdmUtd2lkdGgnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZSh0aGlzLiRlbCkgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICA/IHt3aWR0aDogd2lkdGgodGhpcy4kZWwucGFyZW50Tm9kZSksIGhlaWdodDogdGhpcy5oZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oZGltKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsLCBEaW1lbnNpb25zLmNvbnRhaW4oe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aFxuICAgICAgICAgICAgICAgIH0sIGRpbSkuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2Nyb2xsID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGVsID0gZWwgJiYgJChlbCkgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyKHRoaXMuJGVsLCAnYmVmb3Jlc2Nyb2xsJywgW3RoaXMsIGVsXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcoZWwsIHtvZmZzZXQ6IHRoaXMub2Zmc2V0fSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmlnZ2VyKHRoaXMkMS4kZWwsICdzY3JvbGxlZCcsIFt0aGlzJDEsIGVsXSk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czoge1xuXG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8oZXNjYXBlKGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLiRlbC5oYXNoKSkuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHN0YXRlS2V5JDEgPSAnX3VrU2Nyb2xsc3B5JztcbiAgICB2YXIgc2Nyb2xsc3B5ID0ge1xuXG4gICAgICAgIGFyZ3M6ICdjbHMnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBjbHM6IFN0cmluZyxcbiAgICAgICAgICAgIHRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgaGlkZGVuOiBCb29sZWFuLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBOdW1iZXIsXG4gICAgICAgICAgICBvZmZzZXRMZWZ0OiBOdW1iZXIsXG4gICAgICAgICAgICByZXBlYXQ6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWxheTogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YTogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgIGNsczogZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXQ6IGZhbHNlLFxuICAgICAgICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiAwLFxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogMCxcbiAgICAgICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIGluVmlld0NsYXNzOiAndWstc2Nyb2xsc3B5LWludmlldydcbiAgICAgICAgfSk7IH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgZWxlbWVudHM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCA/ICQkKHRhcmdldCwgJGVsKSA6IFskZWxdO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZmlsdGVyKGVsZW1lbnRzLCAoXCI6bm90KC5cIiArICh0aGlzLmluVmlld0NsYXNzKSArIFwiKVwiKSksICd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gcmVmLnVwZGF0ZTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZWxbc3RhdGVLZXkkMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbFtzdGF0ZUtleSQxXSA9IHtjbHM6IGRhdGEoZWwsICd1ay1zY3JvbGxzcHktY2xhc3MnKSB8fCB0aGlzJDEuY2xzfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZWxbc3RhdGVLZXkkMV0uc2hvdyA9IGlzSW5WaWV3KGVsLCB0aGlzJDEub2Zmc2V0VG9wLCB0aGlzJDEub2Zmc2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgY2hpbGQgY29tcG9uZW50cyBiZSBhcHBsaWVkIGF0IGxlYXN0IG9uY2UgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEudXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZWxbc3RhdGVLZXkkMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGludmlldykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAndmlzaWJpbGl0eScsICFpbnZpZXcgJiYgdGhpcyQxLmhpZGRlbiA/ICdoaWRkZW4nIDogJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5pblZpZXdDbGFzcywgaW52aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc3RhdGUuY2xzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIGludmlldyA/ICdpbnZpZXcnIDogJ291dHZpZXcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmludmlldyA9IGludmlldztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kdXBkYXRlKGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNob3cgJiYgIXN0YXRlLmludmlldyAmJiAhc3RhdGUucXVldWVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9taXNlID0gKGRhdGEucHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzJDEuZGVsYXkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucXVldWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJGVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuc2hvdyAmJiBzdGF0ZS5pbnZpZXcgJiYgIXN0YXRlLnF1ZXVlZCAmJiB0aGlzJDEucmVwZWF0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIHZhciBzY3JvbGxzcHlOYXYgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsczogU3RyaW5nLFxuICAgICAgICAgICAgY2xvc2VzdDogU3RyaW5nLFxuICAgICAgICAgICAgc2Nyb2xsOiBCb29sZWFuLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbG9zZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIHNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGxpbmtzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoJ2FbaHJlZl49XCIjXCJdJywgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5oYXNoOyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCdzY3JvbGwnLCBsaW5rcywge29mZnNldDogdGhpcy5vZmZzZXQgfHwgMH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5saW5rcy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlc2NhcGUoZWwuaGFzaCkuc3Vic3RyKDEpOyB9KS5qb2luKCcsJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZWxlbWVudHM6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJlZi5jbG9zZXN0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QodGhpcy5saW5rcywgc2VsZWN0b3IgfHwgJyonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy50YXJnZXRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmVmLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxlbmd0aCB8fCAhaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBsYXN0KHNjcm9sbFBhcmVudHModGhpcy50YXJnZXRzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IHNjcm9sbEhlaWdodCAtIG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMuZXZlcnkoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uKGVsLCB2aWV3cG9ydCkudG9wIC0gdGhpcyQxLm9mZnNldCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLm92ZXJmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7YWN0aXZlOiBhY3RpdmV9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuYmx1cigpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cywgdGhpcy5jbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWN0aXZlJywgW2FjdGl2ZSwgYWRkQ2xhc3ModGhpcy5lbGVtZW50c1thY3RpdmVdLCB0aGlzLmNscyldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICB2YXIgc3RpY2t5ID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBNZWRpYV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICAgIGJvdHRvbTogQm9vbGVhbixcbiAgICAgICAgICAgIG9mZnNldDogU3RyaW5nLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNBY3RpdmU6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNGaXhlZDogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmVsb3c6IFN0cmluZyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGhFbGVtZW50OiBCb29sZWFuLFxuICAgICAgICAgICAgc2hvd09uVXA6IEJvb2xlYW4sXG4gICAgICAgICAgICB0YXJnZXRPZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBhbmltYXRpb246ICcnLFxuICAgICAgICAgICAgY2xzQWN0aXZlOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiAnJyxcbiAgICAgICAgICAgIGNsc0ZpeGVkOiAndWstc3RpY2t5LWZpeGVkJyxcbiAgICAgICAgICAgIGNsc0JlbG93OiAndWstc3RpY2t5LWJlbG93JyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogJycsXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd09uVXA6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG9mZnNldDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9QeChvZmZzZXQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VsVGFyZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxUYXJnZXQgPSByZWYuc2VsVGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbFRhcmdldCAmJiAkKHNlbFRhcmdldCwgJGVsKSB8fCAkZWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoRWxlbWVudCA9IHJlZi53aWR0aEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkod2lkdGhFbGVtZW50LCAkZWwpIHx8IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0FjdGl2ZToge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ2xhc3ModGhpcy5zZWxUYXJnZXQsIHRoaXMuY2xzSW5hY3RpdmUsIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgIWhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSwgdGhpcy5jbHNJbmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSAkKCcrIC51ay1zdGlja3ktcGxhY2Vob2xkZXInLCB0aGlzLiRlbCkgfHwgJCgnPGRpdiBjbGFzcz1cInVrLXN0aWNreS1wbGFjZWhvbGRlclwiPjwvZGl2PicpO1xuICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLndpZHRoRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdsb2FkIGhhc2hjaGFuZ2UgcG9wc3RhdGUnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiB3aW5kb3csXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnRhcmdldE9mZnNldCAhPT0gZmFsc2UgJiYgbG9jYXRpb24uaGFzaCAmJiB3aW5kb3cucGFnZVlPZmZzZXQgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQobG9jYXRpb24uaGFzaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS5yZWFkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxUb3AgPSBvZmZzZXQodGhpcyQxLiRlbCkudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IHRoaXMkMS4kZWwub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5pc0ZpeGVkICYmIGVsVG9wICsgZWxIZWlnaHQgPj0gdG9wICYmIGVsVG9wIDw9IHRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHdpbmRvdywgdG9wIC0gZWxIZWlnaHQgLSAoaXNOdW1lcmljKHRoaXMkMS50YXJnZXRPZmZzZXQpID8gdGhpcyQxLnRhcmdldE9mZnNldCA6IDApIC0gdGhpcyQxLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZSA9ICF0aGlzLm1hdGNoTWVkaWEgfHwgIWlzVmlzaWJsZSh0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmIHR5cGUgIT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuJGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gIXRoaXMuaXNBY3RpdmUgPyB0aGlzLiRlbC5vZmZzZXRIZWlnaHQgOiBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BPZmZzZXQgPSBvZmZzZXQodGhpcy5pc0ZpeGVkID8gdGhpcy5wbGFjZWhvbGRlciA6IHRoaXMuJGVsKS50b3A7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm90dG9tT2Zmc2V0ID0gdGhpcy50b3BPZmZzZXQgKyBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdHRvbSA9IHBhcnNlUHJvcCgnYm90dG9tJywgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3AgPSBNYXRoLm1heCh0b0Zsb2F0KHBhcnNlUHJvcCgndG9wJywgdGhpcykpLCB0aGlzLnRvcE9mZnNldCkgLSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3R0b20gPSBib3R0b20gJiYgYm90dG9tIC0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gb2Zmc2V0KGlzVmlzaWJsZSh0aGlzLndpZHRoRWxlbWVudCkgPyB0aGlzLndpZHRoRWxlbWVudCA6IHRoaXMuJGVsKS53aWR0aDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldFBvc2l0aW9uKHRoaXMucGxhY2Vob2xkZXIpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luczogY3NzKHRoaXMuJGVsLCBbJ21hcmdpblRvcCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2lucyA9IHJlZi5tYXJnaW5zO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gcmVmJDEucGxhY2Vob2xkZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHBsYWNlaG9sZGVyLCBhc3NpZ24oe2hlaWdodDogaGVpZ2h0fSwgbWFyZ2lucykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2l0aGluKHBsYWNlaG9sZGVyLCBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyKHRoaXMuJGVsLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZSA9ICEhdGhpcy5pc0FjdGl2ZTsgLy8gZm9yY2Ugc2VsZi1hc3NpZ25cblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGwgPSByZWYuc2Nyb2xsOyBpZiAoIHNjcm9sbCA9PT0gdm9pZCAwICkgc2Nyb2xsID0gMDtcblxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHNjcm9sbCA8PSB0aGlzLnNjcm9sbCA/ICdkb3duJyA6ICd1cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IHRoaXMuc2Nyb2xsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbml0VGltZXN0YW1wID0gZGF0YS5pbml0VGltZXN0YW1wOyBpZiAoIGluaXRUaW1lc3RhbXAgPT09IHZvaWQgMCApIGluaXRUaW1lc3RhbXAgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gZGF0YS5kaXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0RGlyID0gZGF0YS5sYXN0RGlyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFNjcm9sbCA9IGRhdGEubGFzdFNjcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbCA9IGRhdGEuc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gZGF0YS50b3A7XG5cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0U2Nyb2xsID0gc2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGwgPCAwIHx8IHNjcm9sbCA9PT0gbGFzdFNjcm9sbCAmJiB0eXBlID09PSAnc2Nyb2xsJyB8fCB0aGlzLnNob3dPblVwICYmIHR5cGUgIT09ICdzY3JvbGwnICYmICF0aGlzLmlzRml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3cgLSBpbml0VGltZXN0YW1wID4gMzAwIHx8IGRpciAhPT0gbGFzdERpcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbml0U2Nyb2xsID0gc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbml0VGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0RGlyID0gZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3dPblVwICYmICF0aGlzLmlzRml4ZWQgJiYgTWF0aC5hYnMoZGF0YS5pbml0U2Nyb2xsIC0gc2Nyb2xsKSA8PSAzMCAmJiBNYXRoLmFicyhsYXN0U2Nyb2xsIC0gc2Nyb2xsKSA8PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5hY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNjcm9sbCA8IHRoaXMudG9wXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLnNob3dPblVwICYmIChzY3JvbGwgPD0gdGhpcy50b3AgfHwgZGlyID09PSAnZG93bicgJiYgdHlwZSA9PT0gJ3Njcm9sbCcgfHwgZGlyID09PSAndXAnICYmICF0aGlzLmlzRml4ZWQgJiYgc2Nyb2xsIDw9IHRoaXMuYm90dG9tT2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRml4ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBbmltYXRpb24uaW5Qcm9ncmVzcyh0aGlzLiRlbCkgJiYgdG9wID4gc2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGaXhlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb24gJiYgc2Nyb2xsID4gdGhpcy50b3BPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24ub3V0KHRoaXMuJGVsLCB0aGlzLmFuaW1hdGlvbikudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuaGlkZSgpOyB9LCBub29wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRml4ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uaW4odGhpcy4kZWwsIHRoaXMuYW5pbWF0aW9uKS5jYXRjaChub29wKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJywgJ3Njcm9sbCddXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlzRml4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5oaWRkZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRml4ZWQsIHRoaXMuY2xzQmVsb3cpO1xuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge3Bvc2l0aW9uOiAnJywgdG9wOiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5oaWRkZW4gPSB0cnVlO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMudG9wICE9PSAwIHx8IHRoaXMuc2Nyb2xsID4gdGhpcy50b3A7XG4gICAgICAgICAgICAgICAgdmFyIHRvcCA9IE1hdGgubWF4KDAsIHRoaXMub2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc051bWVyaWModGhpcy5ib3R0b20pICYmIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b20gLSB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSB0aGlzLmJvdHRvbSAtIHRoaXMuc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAodG9wICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzQmVsb3csIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b21PZmZzZXQpO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0ZpeGVkKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZVByb3AocHJvcCwgcmVmKSB7XG4gICAgICAgIHZhciAkcHJvcHMgPSByZWYuJHByb3BzO1xuICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcbiAgICAgICAgdmFyIHByb3BPZmZzZXQgPSByZWZbKHByb3AgKyBcIk9mZnNldFwiKV07XG5cblxuICAgICAgICB2YXIgdmFsdWUgPSAkcHJvcHNbcHJvcF07XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5tYXRjaCgvXi0/XFxkLykpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByb3BPZmZzZXQgKyB0b1B4KHZhbHVlKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0KHZhbHVlID09PSB0cnVlID8gJGVsLnBhcmVudE5vZGUgOiBxdWVyeSh2YWx1ZSwgJGVsKSkuYm90dG9tO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3dpdGNoZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAnY29ubmVjdCcsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IFN0cmluZyxcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBOdW1iZXIsXG4gICAgICAgICAgICBzd2lwaW5nOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29ubmVjdDogJ34udWstc3dpdGNoZXInLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAqID4gOmZpcnN0LWNoaWxkJyxcbiAgICAgICAgICAgIGFjdGl2ZTogMCxcbiAgICAgICAgICAgIHN3aXBpbmc6IHRydWUsXG4gICAgICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstc3dpdGNoZXInLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zd2l0Y2hlci1pdGVtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNvbm5lY3RzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25uZWN0ID0gcmVmLmNvbm5lY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5QWxsKGNvbm5lY3QsICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihjb25uZWN0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIHRoaXMkMS51cGRhdGVBcmlhKGxpc3QuY2hpbGRyZW4pOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zd2lwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoY29ubmVjdHMsICd0b3VjaC1hY3Rpb24nLCAncGFuLXkgcGluY2gtem9vbScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvZ2dsZXM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKHRvZ2dsZSwgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhbWF0Y2hlcyhlbCwgJy51ay1kaXNhYmxlZCAqLCAudWstZGlzYWJsZWQsIFtkaXNhYmxlZF0nKTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbih0b2dnbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh+YWN0aXZlICYmIGFjdGl2ZSB8fCB0b2dnbGVzW3RoaXMuYWN0aXZlXSB8fCB0b2dnbGVzWzBdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLiRlbCkuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZXMuc29tZShmdW5jdGlvbiAodG9nZ2xlKSB7IHJldHVybiB3aXRoaW4odG9nZ2xlLCBjaGlsZCk7IH0pOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGU7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlcyh0aGlzLnRvZ2dsZXMsIGUuY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RzO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJbXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl0sW2RhdGEtXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl1cIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coZGF0YShlLmN1cnJlbnQsIHRoaXMuYXR0ckl0ZW0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlUmlnaHQgc3dpcGVMZWZ0JyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN3aXBpbmc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdHM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlbmRzV2l0aCh0eXBlLCAnTGVmdCcpID8gJ25leHQnIDogJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBpbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZEluZGV4KHRoaXMuY2hpbGRyZW4sIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGFzQ2xhc3MoZWwsIHRoaXMkMS5jbHMpOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBnZXRJbmRleChpdGVtLCB0aGlzLnRvZ2dsZXMsIHByZXYpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByZXYgPT09IG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGQsIHRoaXMkMS5jbHMsIG5leHQgPT09IGkpO1xuICAgICAgICAgICAgICAgICAgICBhdHRyKHRoaXMkMS50b2dnbGVzW2ldLCAnYXJpYS1leHBhbmRlZCcsIG5leHQgPT09IGkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMkMS50b2dnbGVFbGVtZW50KHRvTm9kZXMoY2hpbGRyZW4pLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQsIGkpIHsgcmV0dXJuIGkgIT09IG5leHQgJiYgdGhpcyQxLmlzVG9nZ2xlZChjaGlsZCk7IH1cbiAgICAgICAgICAgICAgICAgICAgKSwgZmFsc2UsIHByZXYgPj0gMCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudChjaGlsZHJlbltuZXh0XSwgdHJ1ZSwgcHJldiA+PSAwKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgdGFiID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzXSxcblxuICAgICAgICBleHRlbmRzOiBTd2l0Y2hlcixcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbWVkaWE6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBtZWRpYTogOTYwLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay10YWItaXRlbSdcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgY2xzID0gaGFzQ2xhc3ModGhpcy4kZWwsICd1ay10YWItbGVmdCcpXG4gICAgICAgICAgICAgICAgPyAndWstdGFiLWxlZnQnXG4gICAgICAgICAgICAgICAgOiBoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLXRhYi1yaWdodCcpXG4gICAgICAgICAgICAgICAgICAgID8gJ3VrLXRhYi1yaWdodCdcbiAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGNscykge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNyZWF0ZSgndG9nZ2xlJywgdGhpcy4kZWwsIHtjbHM6IGNscywgbW9kZTogJ21lZGlhJywgbWVkaWE6IHRoaXMubWVkaWF9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciB0b2dnbGUgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbTWVkaWEsIFRvZ2dsYWJsZV0sXG5cbiAgICAgICAgYXJnczogJ3RhcmdldCcsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGhyZWY6IFN0cmluZyxcbiAgICAgICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgICAgIG1vZGU6ICdsaXN0JyxcbiAgICAgICAgICAgIHF1ZXVlZDogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGhyZWY6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcbiAgICAgICAgICAgIG1vZGU6ICdjbGljaycsXG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICB0YXJnZXQ6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgPSByZWYuaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcXVlcnlBbGwodGFyZ2V0IHx8IGhyZWYsICRlbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQubGVuZ3RoICYmIHRhcmdldCB8fCBbJGVsXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMudGFyZ2V0LCAndXBkYXRlYXJpYScsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogKHBvaW50ZXJFbnRlciArIFwiIFwiICsgcG9pbnRlckxlYXZlKSxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyh0aGlzLm1vZGUsICdob3ZlcicpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKFwidG9nZ2xlXCIgKyAoZS50eXBlID09PSBwb2ludGVyRW50ZXIgPyAnc2hvdycgOiAnaGlkZScpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnY2xpY2snKSB8fCBoYXNUb3VjaCAmJiBpbmNsdWRlcyh0aGlzLm1vZGUsICdob3ZlcicpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBiZXR0ZXIgaXNUb2dnbGVkIGhhbmRsaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZj1cIiNcIl0sIGFbaHJlZj1cIlwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAobGluayA9IGNsb3Nlc3QoZS50YXJnZXQsICdhW2hyZWZdJykpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNscyAmJiAhaGFzQ2xhc3ModGhpcy50YXJnZXQsIHRoaXMuY2xzLnNwbGl0KCcgJylbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgIWlzVmlzaWJsZSh0aGlzLnRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBsaW5rLmhhc2ggJiYgbWF0Y2hlcyh0aGlzLnRhcmdldCwgbGluay5oYXNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ21lZGlhJykgJiYgdGhpcy5tZWRpYVxuICAgICAgICAgICAgICAgICAgICA/IHttYXRjaDogdGhpcy5tYXRjaE1lZGlhfVxuICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJlZi5tYXRjaDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHRvZ2dsZWQgPSB0aGlzLmlzVG9nZ2xlZCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoID8gIXRvZ2dsZWQgOiB0b2dnbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGlmICghdHJpZ2dlcih0aGlzLnRhcmdldCwgdHlwZSB8fCAndG9nZ2xlJywgW3RoaXNdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVldWVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZWQgPSB0aGlzLnRhcmdldC5maWx0ZXIodGhpcy5pc1RvZ2dsZWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodG9nZ2xlZCwgZmFsc2UpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZUVsZW1lbnQodGhpcyQxLnRhcmdldC5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhaW5jbHVkZXModG9nZ2xlZCwgZWwpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICApLCB0cnVlKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBjb21wb25lbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgICAgICBfX3Byb3RvX186IG51bGwsXG4gICAgICAgIEFjY29yZGlvbjogQWNjb3JkaW9uLFxuICAgICAgICBBbGVydDogYWxlcnQsXG4gICAgICAgIENvdmVyOiBjb3ZlcixcbiAgICAgICAgRHJvcDogZHJvcCxcbiAgICAgICAgRHJvcGRvd246IGRyb3AsXG4gICAgICAgIEZvcm1DdXN0b206IGZvcm1DdXN0b20sXG4gICAgICAgIEdpZjogZ2lmLFxuICAgICAgICBHcmlkOiBncmlkLFxuICAgICAgICBIZWlnaHRNYXRjaDogaGVpZ2h0TWF0Y2gsXG4gICAgICAgIEhlaWdodFZpZXdwb3J0OiBoZWlnaHRWaWV3cG9ydCxcbiAgICAgICAgSWNvbjogSWNvbixcbiAgICAgICAgSW1nOiBpbWcsXG4gICAgICAgIExlYWRlcjogbGVhZGVyLFxuICAgICAgICBNYXJnaW46IE1hcmdpbixcbiAgICAgICAgTW9kYWw6IG1vZGFsLFxuICAgICAgICBOYXY6IG5hdixcbiAgICAgICAgTmF2YmFyOiBuYXZiYXIsXG4gICAgICAgIE9mZmNhbnZhczogb2ZmY2FudmFzLFxuICAgICAgICBPdmVyZmxvd0F1dG86IG92ZXJmbG93QXV0byxcbiAgICAgICAgUmVzcG9uc2l2ZTogcmVzcG9uc2l2ZSxcbiAgICAgICAgU2Nyb2xsOiBzY3JvbGwsXG4gICAgICAgIFNjcm9sbHNweTogc2Nyb2xsc3B5LFxuICAgICAgICBTY3JvbGxzcHlOYXY6IHNjcm9sbHNweU5hdixcbiAgICAgICAgU3RpY2t5OiBzdGlja3ksXG4gICAgICAgIFN2ZzogU1ZHLFxuICAgICAgICBTd2l0Y2hlcjogU3dpdGNoZXIsXG4gICAgICAgIFRhYjogdGFiLFxuICAgICAgICBUb2dnbGU6IHRvZ2dsZSxcbiAgICAgICAgVmlkZW86IFZpZGVvLFxuICAgICAgICBDbG9zZTogQ2xvc2UsXG4gICAgICAgIFNwaW5uZXI6IFNwaW5uZXIsXG4gICAgICAgIFNsaWRlbmF2TmV4dDogU2xpZGVuYXYsXG4gICAgICAgIFNsaWRlbmF2UHJldmlvdXM6IFNsaWRlbmF2LFxuICAgICAgICBTZWFyY2hJY29uOiBTZWFyY2gsXG4gICAgICAgIE1hcmtlcjogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgTmF2YmFyVG9nZ2xlSWNvbjogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgT3ZlcmxheUljb246IEljb25Db21wb25lbnQsXG4gICAgICAgIFBhZ2luYXRpb25OZXh0OiBJY29uQ29tcG9uZW50LFxuICAgICAgICBQYWdpbmF0aW9uUHJldmlvdXM6IEljb25Db21wb25lbnQsXG4gICAgICAgIFRvdG9wOiBJY29uQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICAvLyByZWdpc3RlciBjb21wb25lbnRzXG4gICAgZWFjaChjb21wb25lbnRzLCBmdW5jdGlvbiAoY29tcG9uZW50LCBuYW1lKSB7IHJldHVybiBVSWtpdC5jb21wb25lbnQobmFtZSwgY29tcG9uZW50KTsgfVxuICAgICk7XG5cbiAgICAvLyBjb3JlIGZ1bmN0aW9uYWxpdHlcbiAgICBVSWtpdC51c2UoQ29yZSk7XG5cbiAgICBib290KFVJa2l0KTtcblxuICAgIHZhciBjb3VudGRvd24gPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3NdLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkYXRlOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNXcmFwcGVyOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkYXRlOiAnJyxcbiAgICAgICAgICAgIGNsc1dyYXBwZXI6ICcudWstY291bnRkb3duLSV1bml0JSdcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBkYXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IHJlZi5kYXRlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGUucGFyc2UoZGF0ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkYXlzOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBjbHNXcmFwcGVyID0gcmVmLmNsc1dyYXBwZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJChjbHNXcmFwcGVyLnJlcGxhY2UoJyV1bml0JScsICdkYXlzJyksICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBob3VyczogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzV3JhcHBlciA9IHJlZi5jbHNXcmFwcGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnaG91cnMnKSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1pbnV0ZXM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1dyYXBwZXIgPSByZWYuY2xzV3JhcHBlcjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKGNsc1dyYXBwZXIucmVwbGFjZSgnJXVuaXQlJywgJ21pbnV0ZXMnKSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlY29uZHM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1dyYXBwZXIgPSByZWYuY2xzV3JhcHBlcjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKGNsc1dyYXBwZXIucmVwbGFjZSgnJXVuaXQlJywgJ3NlY29uZHMnKSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVuaXRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2RheXMnLCAnaG91cnMnLCAnbWludXRlcycsICdzZWNvbmRzJ10uZmlsdGVyKGZ1bmN0aW9uICh1bml0KSB7IHJldHVybiB0aGlzJDFbdW5pdF07IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy51bml0cy5mb3JFYWNoKGZ1bmN0aW9uICh1bml0KSB7IHJldHVybiBlbXB0eSh0aGlzJDFbdW5pdF0pOyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Zpc2liaWxpdHljaGFuZ2UnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiBkb2N1bWVudCxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVzcGFuID0gZ2V0VGltZVNwYW4odGhpcy5kYXRlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aW1lc3Bhbi50b3RhbCA8PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGltZXNwYW4uZGF5c1xuICAgICAgICAgICAgICAgICAgICAgICAgPSB0aW1lc3Bhbi5ob3Vyc1xuICAgICAgICAgICAgICAgICAgICAgICAgPSB0aW1lc3Bhbi5taW51dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHRpbWVzcGFuLnNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgICAgID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVuaXRzLmZvckVhY2goZnVuY3Rpb24gKHVuaXQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzID0gU3RyaW5nKE1hdGguZmxvb3IodGltZXNwYW5bdW5pdF0pKTtcblxuICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkaWdpdHMubGVuZ3RoIDwgMiA/IChcIjBcIiArIGRpZ2l0cykgOiBkaWdpdHM7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gdGhpcyQxW3VuaXRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IGRpZ2l0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gZGlnaXRzLnNwbGl0KCcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZ2l0cy5sZW5ndGggIT09IGVsLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwoZWwsIGRpZ2l0cy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gJzxzcGFuPjwvc3Bhbj4nOyB9KS5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0cy5mb3JFYWNoKGZ1bmN0aW9uIChkaWdpdCwgaSkgeyByZXR1cm4gZWwuY2hpbGRyZW5baV0udGV4dENvbnRlbnQgPSBkaWdpdDsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZSAmJiB0aGlzLnVuaXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMuJHVwZGF0ZSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRUaW1lU3BhbihkYXRlKSB7XG5cbiAgICAgICAgdmFyIHRvdGFsID0gZGF0ZSAtIERhdGUubm93KCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvdGFsOiB0b3RhbCxcbiAgICAgICAgICAgIHNlY29uZHM6IHRvdGFsIC8gMTAwMCAlIDYwLFxuICAgICAgICAgICAgbWludXRlczogdG90YWwgLyAxMDAwIC8gNjAgJSA2MCxcbiAgICAgICAgICAgIGhvdXJzOiB0b3RhbCAvIDEwMDAgLyA2MCAvIDYwICUgMjQsXG4gICAgICAgICAgICBkYXlzOiB0b3RhbCAvIDEwMDAgLyA2MCAvIDYwIC8gMjRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0Q2xhc3MgPSAndWstYW5pbWF0aW9uLXRhcmdldCc7XG5cbiAgICB2YXIgQW5pbWF0ZSA9IHtcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IDE1MFxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oYWN0aW9uLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoIHRhcmdldCA9PT0gdm9pZCAwICkgdGFyZ2V0ID0gdGhpcy4kZWw7XG5cblxuICAgICAgICAgICAgICAgIGFkZFN0eWxlKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4kMSA9IGNoaWxkcmVuKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzRnJvbSA9IGNoaWxkcmVuJDEubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZ2V0UHJvcHMoZWwsIHRydWUpOyB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBvbGRIZWlnaHQgPSBoZWlnaHQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkU2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgICAgIGFjdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiQxLmZvckVhY2goVHJhbnNpdGlvbi5jYW5jZWwpO1xuXG4gICAgICAgICAgICAgICAgcmVzZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGFyZ2V0LCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgZmFzdGRvbS5mbHVzaCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IGhlaWdodCh0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMSA9IGNoaWxkcmVuJDEuY29uY2F0KGNoaWxkcmVuKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWluY2x1ZGVzKGNoaWxkcmVuJDEsIGVsKTsgfSkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzVG8gPSBjaGlsZHJlbiQxLm1hcChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGVsLnBhcmVudE5vZGUgJiYgaSBpbiBwcm9wc0Zyb21cbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHtvcGFjaXR5OiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7b3BhY2l0eTogaXNWaXNpYmxlKGVsKSA/IDEgOiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTsgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBwcm9wc0Zyb20gPSBwcm9wc1RvLm1hcChmdW5jdGlvbiAocHJvcHMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBjaGlsZHJlbiQxW2ldLnBhcmVudE5vZGUgPT09IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm9wc0Zyb21baV0gfHwgZ2V0UHJvcHMoY2hpbGRyZW4kMVtpXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZnJvbS5vcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKCdvcGFjaXR5JyBpbiBwcm9wcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3BhY2l0eSA9IGZyb20ub3BhY2l0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGFjaXR5ICUgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5vcGFjaXR5ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZnJvbS5vcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcm9tO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGFyZ2V0LCB0YXJnZXRDbGFzcyk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gcHJvcHNGcm9tW2ldICYmIGNzcyhlbCwgcHJvcHNGcm9tW2ldKTsgfSk7XG4gICAgICAgICAgICAgICAgY3NzKHRhcmdldCwge2hlaWdodDogb2xkSGVpZ2h0LCBkaXNwbGF5OiAnYmxvY2snfSk7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHdpbmRvdywgb2xkU2Nyb2xsWSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuJDEubWFwKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gWyd0b3AnLCAnbGVmdCcsICdoZWlnaHQnLCAnd2lkdGgnXS5zb21lKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiBwcm9wc0Zyb21baV1bcHJvcF0gIT09IHByb3BzVG9baV1bcHJvcF07IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICkgJiYgVHJhbnNpdGlvbi5zdGFydChlbCwgcHJvcHNUb1tpXSwgdGhpcyQxLmFuaW1hdGlvbiwgJ2Vhc2UnKTsgfVxuICAgICAgICAgICAgICAgICAgICApLmNvbmNhdChvbGRIZWlnaHQgIT09IG5ld0hlaWdodCAmJiBUcmFuc2l0aW9uLnN0YXJ0KHRhcmdldCwge2hlaWdodDogbmV3SGVpZ2h0fSwgdGhpcy5hbmltYXRpb24sICdlYXNlJykpXG4gICAgICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gY3NzKGVsLCB7ZGlzcGxheTogcHJvcHNUb1tpXS5vcGFjaXR5ID09PSAwID8gJ25vbmUnIDogJycsIHpJbmRleDogJyd9KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kdXBkYXRlKHRhcmdldCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7IC8vIG5lZWRlZCBmb3IgSUUxMVxuICAgICAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJvcHMoZWwsIG9wYWNpdHkpIHtcblxuICAgICAgICB2YXIgekluZGV4ID0gY3NzKGVsLCAnekluZGV4Jyk7XG5cbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgID8gYXNzaWduKHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5ID8gY3NzKGVsLCAnb3BhY2l0eScpIDogJzAnLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleCA9PT0gJ2F1dG8nID8gaW5kZXgoZWwpIDogekluZGV4XG4gICAgICAgICAgICB9LCBnZXRQb3NpdGlvbldpdGhNYXJnaW4oZWwpKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldChlbCkge1xuICAgICAgICBjc3MoZWwuY2hpbGRyZW4sIHtcbiAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgICAgIG9wYWNpdHk6ICcnLFxuICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJycsXG4gICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgd2lkdGg6ICcnXG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVDbGFzcyhlbCwgdGFyZ2V0Q2xhc3MpO1xuICAgICAgICBjc3MoZWwsIHtoZWlnaHQ6ICcnLCBkaXNwbGF5OiAnJ30pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbCkge1xuICAgICAgICB2YXIgcmVmID0gb2Zmc2V0KGVsKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgdmFyIHJlZiQxID0gcG9zaXRpb24oZWwpO1xuICAgICAgICB2YXIgdG9wID0gcmVmJDEudG9wO1xuICAgICAgICB2YXIgbGVmdCA9IHJlZiQxLmxlZnQ7XG5cbiAgICAgICAgcmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdCwgaGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH07XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlO1xuXG4gICAgZnVuY3Rpb24gYWRkU3R5bGUoKSB7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlID0gYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8c3R5bGU+Jykuc2hlZXQ7XG4gICAgICAgIHN0eWxlLmluc2VydFJ1bGUoXG4gICAgICAgICAgICAoXCIuXCIgKyB0YXJnZXRDbGFzcyArIFwiID4gKiB7XFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAgICAgfVwiKSwgMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmaWx0ZXIkMSA9IHtcblxuICAgICAgICBtaXhpbnM6IFtBbmltYXRlXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBCb29sZWFuLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGF0dHJJdGVtOiAndWstZmlsdGVyLWNvbnRyb2wnLFxuICAgICAgICAgICAgY2xzOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogMjUwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdG9nZ2xlczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ckl0ZW0gPSByZWYuYXR0ckl0ZW07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxBY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlcyA9ICQkKHRoaXMuc2VsQWN0aXZlLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzLCBpbmNsdWRlcyhhY3RpdmVzLCBlbCkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoKHRhcmdldCArIFwiID4gKlwiKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpc3QsIG9sZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMaXN0KGxpc3QsIG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiW1wiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdLFtkYXRhLVwiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdXCIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5KGUuY3VycmVudCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShtZXJnZVN0YXRlKGVsLCB0aGlzLmF0dHJJdGVtLCB0aGlzLmdldFN0YXRlKCkpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaGFzQ2xhc3MoaXRlbSwgdGhpcyQxLmNscyk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBlbCkgeyByZXR1cm4gbWVyZ2VTdGF0ZShlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSk7IH0sIHtmaWx0ZXI6IHsnJzogJyd9LCBzb3J0OiBbXX0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0U3RhdGU6IGZ1bmN0aW9uKHN0YXRlLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBhbmltYXRlID09PSB2b2lkIDAgKSBhbmltYXRlID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBhc3NpZ24oe2ZpbHRlcjogeycnOiAnJ30sIHNvcnQ6IFtdfSwgc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2JlZm9yZUZpbHRlcicsIFt0aGlzLCBzdGF0ZV0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0b2dnbGVDbGFzcyhlbCwgdGhpcyQxLmNscywgISFtYXRjaEZpbHRlcihlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSkpOyB9KTtcblxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKCQkKHRoaXMudGFyZ2V0LCB0aGlzLiRlbCkubWFwKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuJDEgPSBjaGlsZHJlbih0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzJDEuYW5pbWF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBhcHBseVN0YXRlKHN0YXRlLCB0YXJnZXQsIGNoaWxkcmVuJDEpOyB9LCB0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFwcGx5U3RhdGUoc3RhdGUsIHRhcmdldCwgY2hpbGRyZW4kMSk7XG4gICAgICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcih0aGlzJDEuJGVsLCAnYWZ0ZXJGaWx0ZXInLCBbdGhpcyQxXSk7IH0pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRTdGF0ZSh0aGlzJDEuZ2V0U3RhdGUoKSwgZmFsc2UpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0RmlsdGVyKGVsLCBhdHRyKSB7XG4gICAgICAgIHJldHVybiBwYXJzZU9wdGlvbnMoZGF0YShlbCwgYXR0ciksIFsnZmlsdGVyJ10pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5U3RhdGUoc3RhdGUsIHRhcmdldCwgY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3Ioc3RhdGUpO1xuXG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBjc3MoZWwsICdkaXNwbGF5Jywgc2VsZWN0b3IgJiYgIW1hdGNoZXMoZWwsIHNlbGVjdG9yKSA/ICdub25lJyA6ICcnKTsgfSk7XG5cbiAgICAgICAgdmFyIHJlZiA9IHN0YXRlLnNvcnQ7XG4gICAgICAgIHZhciBzb3J0ID0gcmVmWzBdO1xuICAgICAgICB2YXIgb3JkZXIgPSByZWZbMV07XG5cbiAgICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgICAgIHZhciBzb3J0ZWQgPSBzb3J0SXRlbXMoY2hpbGRyZW4sIHNvcnQsIG9yZGVyKTtcbiAgICAgICAgICAgIGlmICghaXNFcXVhbChzb3J0ZWQsIGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGFwcGVuZCh0YXJnZXQsIHNvcnRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZVN0YXRlKGVsLCBhdHRyLCBzdGF0ZSkge1xuXG4gICAgICAgIHZhciBmaWx0ZXJCeSA9IGdldEZpbHRlcihlbCwgYXR0cik7XG4gICAgICAgIHZhciBmaWx0ZXIgPSBmaWx0ZXJCeS5maWx0ZXI7XG4gICAgICAgIHZhciBncm91cCA9IGZpbHRlckJ5Lmdyb3VwO1xuICAgICAgICB2YXIgc29ydCA9IGZpbHRlckJ5LnNvcnQ7XG4gICAgICAgIHZhciBvcmRlciA9IGZpbHRlckJ5Lm9yZGVyOyBpZiAoIG9yZGVyID09PSB2b2lkIDAgKSBvcmRlciA9ICdhc2MnO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgfHwgaXNVbmRlZmluZWQoc29ydCkpIHtcblxuICAgICAgICAgICAgaWYgKGdyb3VwKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5maWx0ZXJbJyddO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5maWx0ZXJbZ3JvdXBdID0gZmlsdGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5maWx0ZXJbZ3JvdXBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KHN0YXRlLmZpbHRlcikgfHwgJycgaW4gc3RhdGUuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5maWx0ZXIgPSB7Jyc6IGZpbHRlciB8fCAnJ307XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5maWx0ZXIgPSB7Jyc6IGZpbHRlciB8fCAnJ307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoc29ydCkpIHtcbiAgICAgICAgICAgIHN0YXRlLnNvcnQgPSBbc29ydCwgb3JkZXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRmlsdGVyKGVsLCBhdHRyLCByZWYpIHtcbiAgICAgICAgdmFyIHN0YXRlRmlsdGVyID0gcmVmLmZpbHRlcjsgaWYgKCBzdGF0ZUZpbHRlciA9PT0gdm9pZCAwICkgc3RhdGVGaWx0ZXIgPSB7Jyc6ICcnfTtcbiAgICAgICAgdmFyIHJlZl9zb3J0ID0gcmVmLnNvcnQ7XG4gICAgICAgIHZhciBzdGF0ZVNvcnQgPSByZWZfc29ydFswXTtcbiAgICAgICAgdmFyIHN0YXRlT3JkZXIgPSByZWZfc29ydFsxXTtcblxuXG4gICAgICAgIHZhciByZWYkMSA9IGdldEZpbHRlcihlbCwgYXR0cik7XG4gICAgICAgIHZhciBmaWx0ZXIgPSByZWYkMS5maWx0ZXI7IGlmICggZmlsdGVyID09PSB2b2lkIDAgKSBmaWx0ZXIgPSAnJztcbiAgICAgICAgdmFyIGdyb3VwID0gcmVmJDEuZ3JvdXA7IGlmICggZ3JvdXAgPT09IHZvaWQgMCApIGdyb3VwID0gJyc7XG4gICAgICAgIHZhciBzb3J0ID0gcmVmJDEuc29ydDtcbiAgICAgICAgdmFyIG9yZGVyID0gcmVmJDEub3JkZXI7IGlmICggb3JkZXIgPT09IHZvaWQgMCApIG9yZGVyID0gJ2FzYyc7XG5cbiAgICAgICAgcmV0dXJuIGlzVW5kZWZpbmVkKHNvcnQpXG4gICAgICAgICAgICA/IGdyb3VwIGluIHN0YXRlRmlsdGVyICYmIGZpbHRlciA9PT0gc3RhdGVGaWx0ZXJbZ3JvdXBdXG4gICAgICAgICAgICAgICAgfHwgIWZpbHRlciAmJiBncm91cCAmJiAhKGdyb3VwIGluIHN0YXRlRmlsdGVyKSAmJiAhc3RhdGVGaWx0ZXJbJyddXG4gICAgICAgICAgICA6IHN0YXRlU29ydCA9PT0gc29ydCAmJiBzdGF0ZU9yZGVyID09PSBvcmRlcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VxdWFsTGlzdChsaXN0QSwgbGlzdEIpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBLmxlbmd0aCA9PT0gbGlzdEIubGVuZ3RoXG4gICAgICAgICAgICAmJiBsaXN0QS5ldmVyeShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIH5saXN0Qi5pbmRleE9mKGVsKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3IocmVmKSB7XG4gICAgICAgIHZhciBmaWx0ZXIgPSByZWYuZmlsdGVyO1xuXG4gICAgICAgIHZhciBzZWxlY3RvciA9ICcnO1xuICAgICAgICBlYWNoKGZpbHRlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBzZWxlY3RvciArPSB2YWx1ZSB8fCAnJzsgfSk7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzb3J0SXRlbXMobm9kZXMsIHNvcnQsIG9yZGVyKSB7XG4gICAgICAgIHJldHVybiBhc3NpZ24oW10sIG5vZGVzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBkYXRhKGEsIHNvcnQpLmxvY2FsZUNvbXBhcmUoZGF0YShiLCBzb3J0KSwgdW5kZWZpbmVkLCB7bnVtZXJpYzogdHJ1ZX0pICogKG9yZGVyID09PSAnYXNjJyB8fCAtMSk7IH0pO1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zID0ge1xuXG4gICAgICAgIHNsaWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZShkaXIgKiAtMTAwKX0sXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwZXJjZW50OiBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZShkaXIgKiAtMTAwICogcGVyY2VudCl9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogMTAwICogKDEgLSBwZXJjZW50KSl9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlZChlbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3NzKGVsLCAndHJhbnNmb3JtJykuc3BsaXQoJywnKVs0XSAvIGVsLm9mZnNldFdpZHRoKSB8fCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh2YWx1ZSwgdW5pdCkge1xuICAgICAgICBpZiAoIHZhbHVlID09PSB2b2lkIDAgKSB2YWx1ZSA9IDA7XG4gICAgICAgIGlmICggdW5pdCA9PT0gdm9pZCAwICkgdW5pdCA9ICclJztcblxuICAgICAgICB2YWx1ZSArPSB2YWx1ZSA/IHVuaXQgOiAnJztcbiAgICAgICAgcmV0dXJuIGlzSUUgPyAoXCJ0cmFuc2xhdGVYKFwiICsgdmFsdWUgKyBcIilcIikgOiAoXCJ0cmFuc2xhdGUzZChcIiArIHZhbHVlICsgXCIsIDAsIDApXCIpOyAvLyBjdXJyZW50bHkgbm90IHRyYW5zbGF0ZTNkIGluIElFLCB0cmFuc2xhdGUzZCB3aXRoaW4gdHJhbnNsYXRlM2QgZG9lcyBub3Qgd29yayB3aGlsZSB0cmFuc2l0aW9uaW5nXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUzZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKFwic2NhbGUzZChcIiArIHZhbHVlICsgXCIsIFwiICsgdmFsdWUgKyBcIiwgMSlcIik7XG4gICAgfVxuXG4gICAgdmFyIEFuaW1hdGlvbnMkMSA9IGFzc2lnbih7fSwgQW5pbWF0aW9ucywge1xuXG4gICAgICAgIGZhZGU6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnR9LFxuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogcGVyY2VudH1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2NhbGU6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDAsIHRyYW5zZm9ybTogc2NhbGUzZCgxIC0gLjIpfSxcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDEsIHRyYW5zZm9ybTogc2NhbGUzZCgxKX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHRyYW5zZm9ybTogc2NhbGUzZCgxIC0gLjIgKiBwZXJjZW50KX0sXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiBwZXJjZW50LCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yICsgLjIgKiBwZXJjZW50KX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gVHJhbnNpdGlvbmVyKHByZXYsIG5leHQsIGRpciwgcmVmKSB7XG4gICAgICAgIHZhciBhbmltYXRpb24gPSByZWYuYW5pbWF0aW9uO1xuICAgICAgICB2YXIgZWFzaW5nID0gcmVmLmVhc2luZztcblxuXG4gICAgICAgIHZhciBwZXJjZW50ID0gYW5pbWF0aW9uLnBlcmNlbnQ7XG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSBhbmltYXRpb24udHJhbnNsYXRlO1xuICAgICAgICB2YXIgc2hvdyA9IGFuaW1hdGlvbi5zaG93OyBpZiAoIHNob3cgPT09IHZvaWQgMCApIHNob3cgPSBub29wO1xuICAgICAgICB2YXIgcHJvcHMgPSBzaG93KGRpcik7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgIGRpcjogZGlyLFxuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCwgbGluZWFyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBwZXJjZW50ID09PSB2b2lkIDAgKSBwZXJjZW50ID0gMDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IGxpbmVhciA/ICdsaW5lYXInIDogZWFzaW5nO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uIC09IE1hdGgucm91bmQoZHVyYXRpb24gKiBjbGFtcChwZXJjZW50LCAtMSwgMSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUocGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKG5leHQsICdpdGVtaW4nLCB7cGVyY2VudDogcGVyY2VudCwgZHVyYXRpb246IGR1cmF0aW9uLCB0aW1pbmc6IHRpbWluZywgZGlyOiBkaXJ9KTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKHByZXYsICdpdGVtb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkdXJhdGlvbjogZHVyYXRpb24sIHRpbWluZzogdGltaW5nLCBkaXI6IGRpcn0pO1xuXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KG5leHQsIHByb3BzWzFdLCBkdXJhdGlvbiwgdGltaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydChwcmV2LCBwcm9wc1swXSwgZHVyYXRpb24sIHRpbWluZylcbiAgICAgICAgICAgICAgICBdKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBub29wKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb24uc3RvcChbbmV4dCwgcHJldl0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChbbmV4dCwgcHJldl0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKFtuZXh0LCBwcmV2XSwgcHJvcCwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZvcndhcmQ6IGZ1bmN0aW9uKGR1cmF0aW9uLCBwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwZXJjZW50ID09PSB2b2lkIDAgKSBwZXJjZW50ID0gdGhpcy5wZXJjZW50KCk7XG5cbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChbbmV4dCwgcHJldl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3coZHVyYXRpb24sIHBlcmNlbnQsIHRydWUpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHRyYW5zbGF0ZShwZXJjZW50LCBkaXIpO1xuICAgICAgICAgICAgICAgIGNzcyhuZXh0LCBwcm9wc1sxXSk7XG4gICAgICAgICAgICAgICAgY3NzKHByZXYsIHByb3BzWzBdKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKG5leHQsICdpdGVtdHJhbnNsYXRlaW4nLCB7cGVyY2VudDogcGVyY2VudCwgZGlyOiBkaXJ9KTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKHByZXYsICdpdGVtdHJhbnNsYXRlb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkaXI6IGRpcn0pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwZXJjZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGVyY2VudChwcmV2IHx8IG5leHQsIG5leHQsIGRpcik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgJiYgcHJldi5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlclVwZGF0ZShlbCwgdHlwZSwgZGF0YSkge1xuICAgICAgICB0cmlnZ2VyKGVsLCBjcmVhdGVFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRhdGEpKTtcbiAgICB9XG5cbiAgICB2YXIgU2xpZGVyQXV0b3BsYXkgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGF1dG9wbGF5OiBCb29sZWFuLFxuICAgICAgICAgICAgYXV0b3BsYXlJbnRlcnZhbDogTnVtYmVyLFxuICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3BsYXlJbnRlcnZhbDogNzAwMCxcbiAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9wbGF5ICYmIHRoaXMuc3RhcnRBdXRvcGxheSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BBdXRvcGxheSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhdHRyKHRoaXMuc2xpZGVzLCAndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Zpc2liaWxpdHljaGFuZ2UnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiBkb2N1bWVudCxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dG9wbGF5O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBdXRvcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHN0YXJ0QXV0b3BsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BBdXRvcGxheSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAoIXRoaXMkMS5kcmFnZ2FibGUgfHwgISQoJzpmb2N1cycsIHRoaXMkMS4kZWwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCF0aGlzJDEucGF1c2VPbkhvdmVyIHx8ICFtYXRjaGVzKHRoaXMkMS4kZWwsICc6aG92ZXInKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICF0aGlzJDEuc3RhY2subGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiB0aGlzJDEuc2hvdygnbmV4dCcpOyB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dG9wbGF5SW50ZXJ2YWxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdG9wQXV0b3BsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlckRyYWcgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRyYWdnYWJsZTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogMTBcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIFsnc3RhcnQnLCAnbW92ZScsICdlbmQnXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBmbiA9IHRoaXMkMVtrZXldO1xuICAgICAgICAgICAgICAgIHRoaXMkMVtrZXldID0gZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gZ2V0RXZlbnRQb3MoZSkueCAqIChpc1J0bCA/IC0xIDogMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnByZXZQb3MgPSBwb3MgIT09IHRoaXMkMS5wb3MgPyB0aGlzJDEucG9zIDogdGhpcyQxLnByZXZQb3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wb3MgPSBwb3M7XG5cbiAgICAgICAgICAgICAgICAgICAgZm4oZSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogcG9pbnRlckRvd24sXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbFNsaWRlcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8ICFpc1RvdWNoKGUpICYmIGhhc1RleHROb2Rlc09ubHkoZS50YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBjbG9zZXN0KGUudGFyZ2V0LCBzZWxJbnB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGUuYnV0dG9uID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5sZW5ndGggPCAyXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydChlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZHJhZ3N0YXJ0JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnID0gdGhpcy5wb3M7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNpdGlvbmVyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gdGhpcy5fdHJhbnNpdGlvbmVyLnBlcmNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnICs9IHRoaXMuX3RyYW5zaXRpb25lci5nZXREaXN0YW5jZSgpICogdGhpcy5wZXJjZW50ICogdGhpcy5kaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIudHJhbnNsYXRlKHRoaXMucGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNlZSBhYm92ZSB3b3JrYXJvdW5kIG5vdGljZVxuICAgICAgICAgICAgICAgIG9uKGRvY3VtZW50LCBwb2ludGVyTW92ZSwgdGhpcy5tb3ZlLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICAgICAgICAgICAgICBvbihkb2N1bWVudCwgKHBvaW50ZXJVcCArIFwiIFwiICsgcG9pbnRlckNhbmNlbCksIHRoaXMuZW5kLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsICd1c2VyU2VsZWN0JywgJ25vbmUnKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbW92ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLnBvcyAtIHRoaXMuZHJhZztcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA9PT0gMCB8fCB0aGlzLnByZXZQb3MgPT09IHRoaXMucG9zIHx8ICF0aGlzLmRyYWdnaW5nICYmIE1hdGguYWJzKGRpc3RhbmNlKSA8IHRoaXMudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5saXN0LCAncG9pbnRlckV2ZW50cycsICdub25lJyk7XG5cbiAgICAgICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSAoZGlzdGFuY2UgPCAwID8gMSA6IC0xKTtcblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZXMgPSByZWYuc2xpZGVzO1xuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZJbmRleCA9IHJlZiQxLnByZXZJbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgZGlzID0gTWF0aC5hYnMoZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSB0aGlzLmdldEluZGV4KHByZXZJbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuX2dldERpc3RhbmNlKHByZXZJbmRleCwgbmV4dEluZGV4KSB8fCBzbGlkZXNbcHJldkluZGV4XS5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0SW5kZXggIT09IHByZXZJbmRleCAmJiBkaXMgPiB3aWR0aCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZyAtPSB3aWR0aCAqIHRoaXMuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIHByZXZJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgZGlzIC09IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSB0aGlzLmdldEluZGV4KHByZXZJbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuX2dldERpc3RhbmNlKHByZXZJbmRleCwgbmV4dEluZGV4KSB8fCBzbGlkZXNbcHJldkluZGV4XS5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IGRpcyAvIHdpZHRoO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSBzbGlkZXNbcHJldkluZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHNsaWRlc1tuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gdGhpcy5pbmRleCAhPT0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgIHZhciBlZGdlID0gcHJldkluZGV4ID09PSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbVNob3duO1xuXG4gICAgICAgICAgICAgICAgW3RoaXMuaW5kZXgsIHRoaXMucHJldkluZGV4XS5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuICFpbmNsdWRlcyhbbmV4dEluZGV4LCBwcmV2SW5kZXhdLCBpKTsgfSkuZm9yRWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHNsaWRlc1tpXSwgJ2l0ZW1oaWRkZW4nLCBbdGhpcyQxXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TaG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEucHJldkluZGV4ID0gcHJldkluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBwcmV2SW5kZXggJiYgdGhpcy5wcmV2SW5kZXggIT09IHByZXZJbmRleCB8fCBpdGVtU2hvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihzbGlkZXNbdGhpcy5pbmRleF0sICdpdGVtc2hvd24nLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gcHJldkluZGV4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gbmV4dEluZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgICFlZGdlICYmIHRyaWdnZXIocHJldiwgJ2JlZm9yZWl0ZW1oaWRlJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnYmVmb3JlaXRlbXNob3cnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lciA9IHRoaXMuX3RyYW5zbGF0ZShNYXRoLmFicyh0aGlzLnBlcmNlbnQpLCBwcmV2LCAhZWRnZSAmJiBuZXh0KTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICFlZGdlICYmIHRyaWdnZXIocHJldiwgJ2l0ZW1oaWRlJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnaXRlbXNob3cnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSwge3Bhc3NpdmU6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgb2ZmKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsKSwgdGhpcy5lbmQsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy5wcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IDEgLSB0aGlzLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpciAqPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3coZmFsc2UsIHRoaXMuaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpckNoYW5nZSA9IChpc1J0bCA/IHRoaXMuZGlyICogKGlzUnRsID8gMSA6IC0xKSA6IHRoaXMuZGlyKSA8IDAgPT09IHRoaXMucHJldlBvcyA+IHRoaXMucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IGRpckNoYW5nZSA/IHRoaXMuaW5kZXggOiB0aGlzLnByZXZJbmRleDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpckNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IDEgLSB0aGlzLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLmRpciA+IDAgJiYgIWRpckNoYW5nZSB8fCB0aGlzLmRpciA8IDAgJiYgZGlyQ2hhbmdlID8gJ25leHQnIDogJ3ByZXZpb3VzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsIHt1c2VyU2VsZWN0OiAnJywgcG9pbnRlckV2ZW50czogJyd9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1xuICAgICAgICAgICAgICAgICAgICA9IHRoaXMucGVyY2VudFxuICAgICAgICAgICAgICAgICAgICA9IG51bGw7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaGFzVGV4dE5vZGVzT25seShlbCkge1xuICAgICAgICByZXR1cm4gIWVsLmNoaWxkcmVuLmxlbmd0aCAmJiBlbC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgU2xpZGVyTmF2ID0ge1xuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbE5hdjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBuYXY6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbE5hdiA9IHJlZi5zZWxOYXY7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJChzZWxOYXYsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZWxOYXZJdGVtOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0ckl0ZW0gPSByZWYuYXR0ckl0ZW07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFwiW1wiICsgYXR0ckl0ZW0gKyBcIl0sW2RhdGEtXCIgKyBhdHRySXRlbSArIFwiXVwiKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG5hdkl0ZW1zOiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5zZWxOYXZJdGVtLCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmF2ICYmIHRoaXMubGVuZ3RoICE9PSB0aGlzLm5hdi5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCh0aGlzLm5hdiwgdGhpcy5zbGlkZXMubWFwKGZ1bmN0aW9uIChfLCBpKSB7IHJldHVybiAoXCI8bGkgXCIgKyAodGhpcyQxLmF0dHJJdGVtKSArIFwiPVxcXCJcIiArIGkgKyBcIlxcXCI+PGEgaHJlZj48L2E+PC9saT5cIik7IH0pLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcygkJCh0aGlzLnNlbE5hdkl0ZW0sIHRoaXMuJGVsKS5jb25jYXQodGhpcy5uYXYpLCAndWstaGlkZGVuJywgIXRoaXMubWF4SW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOYXYoKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsTmF2SXRlbTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhkYXRhKGUuY3VycmVudCwgdGhpcy5hdHRySXRlbSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93JyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAndXBkYXRlTmF2J1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHVwZGF0ZU5hdjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5nZXRWYWxpZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbWQgPSBkYXRhKGVsLCB0aGlzJDEuYXR0ckl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzQWN0aXZlLCB0b051bWJlcihjbWQpID09PSBpKTtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsICd1ay1pbnZpc2libGUnLCB0aGlzJDEuZmluaXRlICYmIChjbWQgPT09ICdwcmV2aW91cycgJiYgaSA9PT0gMCB8fCBjbWQgPT09ICduZXh0JyAmJiBpID49IHRoaXMkMS5tYXhJbmRleCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTbGlkZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbU2xpZGVyQXV0b3BsYXksIFNsaWRlckRyYWcsIFNsaWRlck5hdl0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsc0FjdGl2YXRlZDogQm9vbGVhbixcbiAgICAgICAgICAgIGVhc2luZzogU3RyaW5nLFxuICAgICAgICAgICAgaW5kZXg6IE51bWJlcixcbiAgICAgICAgICAgIGZpbml0ZTogQm9vbGVhbixcbiAgICAgICAgICAgIHZlbG9jaXR5OiBOdW1iZXIsXG4gICAgICAgICAgICBzZWxTbGlkZXM6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBlYXNpbmc6ICdlYXNlJyxcbiAgICAgICAgICAgIGZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICB2ZWxvY2l0eTogMSxcbiAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgcHJldkluZGV4OiAtMSxcbiAgICAgICAgICAgIHN0YWNrOiBbXSxcbiAgICAgICAgICAgIHBlcmNlbnQ6IDAsXG4gICAgICAgICAgICBjbHNBY3RpdmU6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzQWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIFRyYW5zaXRpb25lcjogZmFsc2UsXG4gICAgICAgICAgICB0cmFuc2l0aW9uT3B0aW9uczoge31cbiAgICAgICAgfSk7IH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5nZXRWYWxpZEluZGV4KHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNsaWRlcywgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciB2ZWxvY2l0eSA9IHJlZi52ZWxvY2l0eTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzcGVlZFVwKCRlbC5vZmZzZXRXaWR0aCAvIHZlbG9jaXR5KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGxpc3Q6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbExpc3QgPSByZWYuc2VsTGlzdDtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbExpc3QsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYXhJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlbFNsaWRlczogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbExpc3QgPSByZWYuc2VsTGlzdDtcbiAgICAgICAgICAgICAgICB2YXIgc2VsU2xpZGVzID0gcmVmLnNlbFNsaWRlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiAoc2VsTGlzdCArIFwiIFwiICsgKHNlbFNsaWRlcyB8fCAnPiAqJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2xpZGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5zZWxTbGlkZXMsIHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZXNldCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbGVuZ3RoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiB7XG5cbiAgICAgICAgICAgIGl0ZW1zaG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKHRoaXMubGlzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGluZGV4LCBmb3JjZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggZm9yY2UgPT09IHZvaWQgMCApIGZvcmNlID0gZmFsc2U7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnaW5nIHx8ICF0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWNrID0gcmVmLnN0YWNrO1xuICAgICAgICAgICAgICAgIHZhciBxdWV1ZUluZGV4ID0gZm9yY2UgPyAwIDogc3RhY2subGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2suc3BsaWNlKHF1ZXVlSW5kZXgsIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5zaG93KHN0YWNrLnNoaWZ0KCksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHN0YWNrW2ZvcmNlID8gJ3Vuc2hpZnQnIDogJ3B1c2gnXShpbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlICYmIHN0YWNrLmxlbmd0aCA+IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIuZm9yd2FyZChNYXRoLm1pbih0aGlzLmR1cmF0aW9uLCAyMDApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldkluZGV4ID0gdGhpcy5nZXRJbmRleCh0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IGhhc0NsYXNzKHRoaXMuc2xpZGVzLCB0aGlzLmNsc0FjdGl2ZSkgJiYgdGhpcy5zbGlkZXNbcHJldkluZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSB0aGlzLnNsaWRlc1tuZXh0SW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByZXYgPT09IG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGlyID0gZ2V0RGlyZWN0aW9uKGluZGV4LCBwcmV2SW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gcHJldkluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldiAmJiAhdHJpZ2dlcihwcmV2LCAnYmVmb3JlaXRlbWhpZGUnLCBbdGhpc10pXG4gICAgICAgICAgICAgICAgICAgIHx8ICF0cmlnZ2VyKG5leHQsICdiZWZvcmVpdGVtc2hvdycsIFt0aGlzLCBwcmV2XSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMucHJldkluZGV4O1xuICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl9zaG93KHByZXYsIG5leHQsIGZvcmNlKS50aGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBwcmV2ICYmIHRyaWdnZXIocHJldiwgJ2l0ZW1oaWRkZW4nLCBbdGhpcyQxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIobmV4dCwgJ2l0ZW1zaG93bicsIFt0aGlzJDFdKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhc3Rkb20ud3JpdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuc2hvdyhzdGFjay5zaGlmdCgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuX3RyYW5zaXRpb25lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcHJldiAmJiB0cmlnZ2VyKHByZXYsICdpdGVtaGlkZScsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnaXRlbXNob3cnLCBbdGhpc10pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldEluZGV4OiBmdW5jdGlvbihpbmRleCwgcHJldikge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXYgPT09IHZvaWQgMCApIHByZXYgPSB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYW1wKGdldEluZGV4KGluZGV4LCB0aGlzLnNsaWRlcywgcHJldiwgdGhpcy5maW5pdGUpLCAwLCB0aGlzLm1heEluZGV4KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFZhbGlkSW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2SW5kZXggPT09IHZvaWQgMCApIHByZXZJbmRleCA9IHRoaXMucHJldkluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5kZXgoaW5kZXgsIHByZXZJbmRleCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfc2hvdzogZnVuY3Rpb24ocHJldiwgbmV4dCwgZm9yY2UpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lciA9IHRoaXMuX2dldFRyYW5zaXRpb25lcihcbiAgICAgICAgICAgICAgICAgICAgcHJldixcbiAgICAgICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXIsXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IGZvcmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXh0Lm9mZnNldFdpZHRoIDwgNjAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2N1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KScgLyogZWFzZU91dFF1YWQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKScgLyogZWFzZU91dFF1YXJ0ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVhc2luZ1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnRyYW5zaXRpb25PcHRpb25zKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlICYmICFwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLnN0YWNrO1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSByZWYubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc2l0aW9uZXJbbGVuZ3RoID4gMSA/ICdmb3J3YXJkJyA6ICdzaG93J10obGVuZ3RoID4gMSA/IE1hdGgubWluKHRoaXMuZHVyYXRpb24sIDc1ICsgNzUgLyAobGVuZ3RoIC0gMSkpIDogdGhpcy5kdXJhdGlvbiwgdGhpcy5wZXJjZW50KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2dldERpc3RhbmNlOiBmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zaXRpb25lcihwcmV2LCBwcmV2ICE9PSBuZXh0ICYmIG5leHQpLmdldERpc3RhbmNlKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50LCBwcmV2LCBuZXh0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2ID09PSB2b2lkIDAgKSBwcmV2ID0gdGhpcy5wcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBuZXh0ID09PSB2b2lkIDAgKSBuZXh0ID0gdGhpcy5pbmRleDtcblxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uZXIgPSB0aGlzLl9nZXRUcmFuc2l0aW9uZXIocHJldiAhPT0gbmV4dCA/IHByZXYgOiBmYWxzZSwgbmV4dCk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbmVyLnRyYW5zbGF0ZShwZXJjZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbmVyO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2dldFRyYW5zaXRpb25lcjogZnVuY3Rpb24ocHJldiwgbmV4dCwgZGlyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2ID09PSB2b2lkIDAgKSBwcmV2ID0gdGhpcy5wcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBuZXh0ID09PSB2b2lkIDAgKSBuZXh0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIGRpciA9PT0gdm9pZCAwICkgZGlyID0gdGhpcy5kaXIgfHwgMTtcbiAgICAgICAgICAgICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB0aGlzLnRyYW5zaXRpb25PcHRpb25zO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlRyYW5zaXRpb25lcihcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIocHJldikgPyB0aGlzLnNsaWRlc1twcmV2XSA6IHByZXYsXG4gICAgICAgICAgICAgICAgICAgIGlzTnVtYmVyKG5leHQpID8gdGhpcy5zbGlkZXNbbmV4dF0gOiBuZXh0LFxuICAgICAgICAgICAgICAgICAgICBkaXIgKiAoaXNSdGwgPyAtMSA6IDEpLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKGluZGV4LCBwcmV2SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAnbmV4dCdcbiAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgOiBpbmRleCA9PT0gJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICA6IGluZGV4IDwgcHJldkluZGV4XG4gICAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgICAgOiAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwZWVkVXAoeCkge1xuICAgICAgICByZXR1cm4gLjUgKiB4ICsgMzAwOyAvLyBwYXJhYm9sYSB0aHJvdWdoICg0MDAsNTAwOyA2MDAsNjAwOyAxODAwLDEyMDApXG4gICAgfVxuXG4gICAgdmFyIFNsaWRlc2hvdyA9IHtcblxuICAgICAgICBtaXhpbnM6IFtTbGlkZXJdLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlJyxcbiAgICAgICAgICAgIGNsc0FjdGl2YXRlZDogJ3VrLXRyYW5zaXRpb24tYWN0aXZlJyxcbiAgICAgICAgICAgIEFuaW1hdGlvbnM6IEFuaW1hdGlvbnMsXG4gICAgICAgICAgICBUcmFuc2l0aW9uZXI6IFRyYW5zaXRpb25lclxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGFuaW1hdGlvbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHJlZi5hbmltYXRpb247XG4gICAgICAgICAgICAgICAgdmFyIEFuaW1hdGlvbnMgPSByZWYuQW5pbWF0aW9ucztcblxuICAgICAgICAgICAgICAgIHJldHVybiBhc3NpZ24oQW5pbWF0aW9uc1thbmltYXRpb25dIHx8IEFuaW1hdGlvbnMuc2xpZGUsIHtuYW1lOiBhbmltYXRpb259KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRyYW5zaXRpb25PcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge2FuaW1hdGlvbjogdGhpcy5hbmltYXRpb259O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiB7XG5cbiAgICAgICAgICAgICdpdGVtc2hvdyBpdGVtaGlkZSBpdGVtc2hvd24gaXRlbWhpZGRlbic6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKHRhcmdldCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBiZWZvcmVpdGVtc2hvdzogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGl0ZW1zaG93bjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZhdGVkKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGl0ZW1oaWRkZW46IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSwgdGhpcy5jbHNBY3RpdmF0ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgTGlnaHRib3hQYW5lbCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDb250YWluZXIsIE1vZGFsLCBUb2dnbGFibGUsIFNsaWRlc2hvd10sXG5cbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZGVsYXlDb250cm9sczogTnVtYmVyLFxuICAgICAgICAgICAgcHJlbG9hZDogTnVtYmVyLFxuICAgICAgICAgICAgdmlkZW9BdXRvcGxheTogQm9vbGVhbixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgcHJlbG9hZDogMSxcbiAgICAgICAgICAgIHZpZGVvQXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXlDb250cm9sczogMzAwMCxcbiAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgIGNsczogJ3VrLW9wZW4nLFxuICAgICAgICAgICAgY2xzUGFnZTogJ3VrLWxpZ2h0Ym94LXBhZ2UnLFxuICAgICAgICAgICAgc2VsTGlzdDogJy51ay1saWdodGJveC1pdGVtcycsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLWxpZ2h0Ym94LWl0ZW0nLFxuICAgICAgICAgICAgc2VsQ2xvc2U6ICcudWstY2xvc2UtbGFyZ2UnLFxuICAgICAgICAgICAgc2VsQ2FwdGlvbjogJy51ay1saWdodGJveC1jYXB0aW9uJyxcbiAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogZmFsc2UsXG4gICAgICAgICAgICB2ZWxvY2l0eTogMixcbiAgICAgICAgICAgIEFuaW1hdGlvbnM6IEFuaW1hdGlvbnMkMSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcInVrLWxpZ2h0Ym94IHVrLW92ZXJmbG93LWhpZGRlblxcXCI+IDx1bCBjbGFzcz1cXFwidWstbGlnaHRib3gtaXRlbXNcXFwiPjwvdWw+IDxkaXYgY2xhc3M9XFxcInVrLWxpZ2h0Ym94LXRvb2xiYXIgdWstcG9zaXRpb24tdG9wIHVrLXRleHQtcmlnaHQgdWstdHJhbnNpdGlvbi1zbGlkZS10b3AgdWstdHJhbnNpdGlvbi1vcGFxdWVcXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJ1ay1saWdodGJveC10b29sYmFyLWljb24gdWstY2xvc2UtbGFyZ2VcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgdWstY2xvc2U+PC9idXR0b24+IDwvZGl2PiA8YSBjbGFzcz1cXFwidWstbGlnaHRib3gtYnV0dG9uIHVrLXBvc2l0aW9uLWNlbnRlci1sZWZ0IHVrLXBvc2l0aW9uLW1lZGl1bSB1ay10cmFuc2l0aW9uLWZhZGVcXFwiIGhyZWYgdWstc2xpZGVuYXYtcHJldmlvdXMgdWstbGlnaHRib3gtaXRlbT1cXFwicHJldmlvdXNcXFwiPjwvYT4gPGEgY2xhc3M9XFxcInVrLWxpZ2h0Ym94LWJ1dHRvbiB1ay1wb3NpdGlvbi1jZW50ZXItcmlnaHQgdWstcG9zaXRpb24tbWVkaXVtIHVrLXRyYW5zaXRpb24tZmFkZVxcXCIgaHJlZiB1ay1zbGlkZW5hdi1uZXh0IHVrLWxpZ2h0Ym94LWl0ZW09XFxcIm5leHRcXFwiPjwvYT4gPGRpdiBjbGFzcz1cXFwidWstbGlnaHRib3gtdG9vbGJhciB1ay1saWdodGJveC1jYXB0aW9uIHVrLXBvc2l0aW9uLWJvdHRvbSB1ay10ZXh0LWNlbnRlciB1ay10cmFuc2l0aW9uLXNsaWRlLWJvdHRvbSB1ay10cmFuc2l0aW9uLW9wYXF1ZVxcXCI+PC9kaXY+IDwvZGl2PlwiXG4gICAgICAgIH0pOyB9LFxuXG4gICAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgJGVsID0gJCh0aGlzLnRlbXBsYXRlKTtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gJCh0aGlzLnNlbExpc3QsICRlbCk7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBwZW5kKGxpc3QsICc8bGk+Jyk7IH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRtb3VudChhcHBlbmQodGhpcy5jb250YWluZXIsICRlbCkpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgY2FwdGlvbjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsQ2FwdGlvbiA9IHJlZi5zZWxDYXB0aW9uO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJy51ay1saWdodGJveC1jYXB0aW9uJywgJGVsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAocG9pbnRlck1vdmUgKyBcIiBcIiArIHBvaW50ZXJEb3duICsgXCIga2V5ZG93blwiKSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICdzaG93Q29udHJvbHMnXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxTbGlkZXM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdzaG93bicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRyb2xzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlQ29udHJvbHMoKTtcblxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNsaWRlcywgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLnN0b3AodGhpcy5zbGlkZXMpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAna2V5dXAnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiBkb2N1bWVudCxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUb2dnbGVkKHRoaXMuJGVsKSB8fCAhdGhpcy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygncHJldmlvdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCduZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3JlaXRlbXNob3cnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdnYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IEFuaW1hdGlvbnMkMVsnc2NhbGUnXTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZS50YXJnZXQsIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5zcGxpY2UoMSwgMCwgdGhpcy5pbmRleCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtc2hvdycsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBodG1sKHRoaXMuY2FwdGlvbiwgdGhpcy5nZXRJdGVtKCkuY2FwdGlvbiB8fCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IC10aGlzLnByZWxvYWQ7IGogPD0gdGhpcy5wcmVsb2FkOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZEl0ZW0odGhpcy5pbmRleCArIGopO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtc2hvd24nLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gdGhpcy4kcHJvcHMuZHJhZ2dhYmxlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1sb2FkJyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKF8sIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gaXRlbS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ID0gaXRlbS5hbHQ7IGlmICggYWx0ID09PSB2b2lkIDAgKSBhbHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RlciA9IGl0ZW0ucG9zdGVyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSBpdGVtLmF0dHJzOyBpZiAoIGF0dHJzID09PSB2b2lkIDAgKSBhdHRycyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SXRlbShpdGVtLCAnPHNwYW4gdWstc3Bpbm5lcj48L3NwYW4+Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWZyYW1lQXR0cnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3c6ICdhdXRvcGxheScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdtYXgtd2lkdGg6IDEwMCU7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1ay1yZXNwb25zaXZlJzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAndWstdmlkZW8nOiAoXCJcIiArICh0aGlzLnZpZGVvQXV0b3BsYXkpKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEltYWdlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW1hZ2UnIHx8IHNyYy5tYXRjaCgvXFwuKGpwZT9nfHBuZ3xnaWZ8c3ZnfHdlYnApKCR8XFw/KS9pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRJbWFnZShzcmMsIGF0dHJzLnNyY3NldCwgYXR0cnMuc2l6ZSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMkMS5zZXRJdGVtKGl0ZW0sIGNyZWF0ZUVsKCdpbWcnLCBhc3NpZ24oe3NyYzogc3JjLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBhbHQ6IGFsdH0sIGF0dHJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc2V0RXJyb3IoaXRlbSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVmlkZW9cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nIHx8IHNyYy5tYXRjaCgvXFwuKG1wNHx3ZWJtfG9ndikoJHxcXD8pL2kpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWRlbyA9IGNyZWF0ZUVsKCd2aWRlbycsIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyOiBwb3N0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlzaW5saW5lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWstdmlkZW8nOiAoXCJcIiArICh0aGlzLnZpZGVvQXV0b3BsYXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXR0cnMpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb24odmlkZW8sICdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyKHZpZGVvLCB7d2lkdGg6IHZpZGVvLnZpZGVvV2lkdGgsIGhlaWdodDogdmlkZW8udmlkZW9IZWlnaHR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuc2V0SXRlbShpdGVtLCB2aWRlbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uKHZpZGVvLCAnZXJyb3InLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc2V0RXJyb3IoaXRlbSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmcmFtZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpZnJhbWUnIHx8IHNyYy5tYXRjaCgvXFwuKGh0bWx8cGhwKSgkfFxcPykvaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sIGNyZWF0ZUVsKCdpZnJhbWUnLCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ3VrLWxpZ2h0Ym94LWlmcmFtZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGF0dHJzKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgobWF0Y2hlcyA9IHNyYy5tYXRjaCgvXFwvXFwvKD86Lio/eW91dHViZSgtbm9jb29raWUpP1xcLi4qP1s/Jl12PXx5b3V0dVxcLmJlXFwvKShbXFx3LV17MTF9KVsmP10/KC4qKT8vKSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sIGNyZWF0ZUVsKCdpZnJhbWUnLCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogKFwiaHR0cHM6Ly93d3cueW91dHViZVwiICsgKG1hdGNoZXNbMV0gfHwgJycpICsgXCIuY29tL2VtYmVkL1wiICsgKG1hdGNoZXNbMl0pICsgKG1hdGNoZXNbM10gPyAoXCI/XCIgKyAobWF0Y2hlc1szXSkpIDogJycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTkyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwODBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGlmcmFtZUF0dHJzLCBhdHRycykpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaW1lb1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gc3JjLm1hdGNoKC9cXC9cXC8uKj92aW1lb1xcLlthLXpdK1xcLyhcXGQrKVsmP10/KC4qKT8vKSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWpheCgoXCJodHRwczovL3ZpbWVvLmNvbS9hcGkvb2VtYmVkLmpzb24/bWF4d2lkdGg9MTkyMCZ1cmw9XCIgKyAoZW5jb2RlVVJJKHNyYykpKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmX3Jlc3BvbnNlID0gcmVmLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmX3Jlc3BvbnNlLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcmVmX3Jlc3BvbnNlLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzJDEuc2V0SXRlbShpdGVtLCBjcmVhdGVFbCgnaWZyYW1lJywgYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAoXCJodHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vXCIgKyAobWF0Y2hlc1sxXSkgKyAobWF0Y2hlc1syXSA/IChcIj9cIiArIChtYXRjaGVzWzJdKSkgOiAnJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaWZyYW1lQXR0cnMsIGF0dHJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc2V0RXJyb3IoaXRlbSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGxvYWRJdGVtOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oaW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdldFNsaWRlKGl0ZW0pLmNoaWxkRWxlbWVudENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdpdGVtbG9hZCcsIFtpdGVtXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0SXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IHRoaXMuaW5kZXg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tnZXRJbmRleChpbmRleCwgdGhpcy5zbGlkZXMpXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNldEl0ZW06IGZ1bmN0aW9uKGl0ZW0sIGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnaXRlbWxvYWRlZCcsIFt0aGlzLCBodG1sKHRoaXMuZ2V0U2xpZGUoaXRlbSksIGNvbnRlbnQpIF0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U2xpZGU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zbGlkZXNbdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNldEVycm9yOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sICc8c3BhbiB1ay1pY29uPVwiaWNvbjogYm9sdDsgcmF0aW86IDJcIj48L3NwYW4+Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaG93Q29udHJvbHM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29udHJvbHNUaW1lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc1RpbWVyID0gc2V0VGltZW91dCh0aGlzLmhpZGVDb250cm9scywgdGhpcy5kZWxheUNvbnRyb2xzKTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstYWN0aXZlJywgJ3VrLXRyYW5zaXRpb24tYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGVDb250cm9sczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsICd1ay1hY3RpdmUnLCAndWstdHJhbnNpdGlvbi1hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWwodGFnLCBhdHRycykge1xuICAgICAgICB2YXIgZWwgPSBmcmFnbWVudCgoXCI8XCIgKyB0YWcgKyBcIj5cIikpO1xuICAgICAgICBhdHRyKGVsLCBhdHRycyk7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICB2YXIgbGlnaHRib3ggPSB7XG5cbiAgICAgICAgaW5zdGFsbDogaW5zdGFsbCQyLFxuXG4gICAgICAgIHByb3BzOiB7dG9nZ2xlOiBTdHJpbmd9LFxuXG4gICAgICAgIGRhdGE6IHt0b2dnbGU6ICdhJ30sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdG9nZ2xlczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gcmVmLnRvZ2dsZTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQodG9nZ2xlLCAkZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnRvZ2dsZSkgKyBcIjpub3QoLnVrLWRpc2FibGVkKVwiKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSB1bmlxdWVCeSh0aGlzLnRvZ2dsZXMubWFwKHRvSXRlbSksICdzb3VyY2UnKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSB0b0l0ZW0oaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gcmVmLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBmaW5kSW5kZXgoaXRlbXMsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSByZWYuc291cmNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlID09PSBzcmM7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWwgPSB0aGlzLnBhbmVsIHx8IHRoaXMuJGNyZWF0ZSgnbGlnaHRib3hQYW5lbCcsIGFzc2lnbih7fSwgdGhpcy4kcHJvcHMsIHtpdGVtczogaXRlbXN9KSk7XG5cbiAgICAgICAgICAgICAgICBvbih0aGlzLnBhbmVsLiRlbCwgJ2hpZGRlbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5wYW5lbCA9IGZhbHNlOyB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsLnNob3coaW5kZXgpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsICYmIHRoaXMucGFuZWwuaGlkZSgpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluc3RhbGwkMihVSWtpdCwgTGlnaHRib3gpIHtcblxuICAgICAgICBpZiAoIVVJa2l0LmxpZ2h0Ym94UGFuZWwpIHtcbiAgICAgICAgICAgIFVJa2l0LmNvbXBvbmVudCgnbGlnaHRib3hQYW5lbCcsIExpZ2h0Ym94UGFuZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzaWduKFxuICAgICAgICAgICAgTGlnaHRib3gucHJvcHMsXG4gICAgICAgICAgICBVSWtpdC5jb21wb25lbnQoJ2xpZ2h0Ym94UGFuZWwnKS5vcHRpb25zLnByb3BzXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0l0ZW0oZWwpIHtcblxuICAgICAgICB2YXIgaXRlbSA9IHt9O1xuXG4gICAgICAgIFsnaHJlZicsICdjYXB0aW9uJywgJ3R5cGUnLCAncG9zdGVyJywgJ2FsdCcsICdhdHRycyddLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICAgIGl0ZW1bYXR0ciA9PT0gJ2hyZWYnID8gJ3NvdXJjZScgOiBhdHRyXSA9IGRhdGEoZWwsIGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLmF0dHJzID0gcGFyc2VPcHRpb25zKGl0ZW0uYXR0cnMpO1xuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIHZhciBvYmo7XG5cbiAgICB2YXIgbm90aWZpY2F0aW9uID0ge1xuXG4gICAgICAgIGZ1bmN0aW9uYWw6IHRydWUsXG5cbiAgICAgICAgYXJnczogWydtZXNzYWdlJywgJ3N0YXR1cyddLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICAgICAgc3RhdHVzOiAnJyxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgICAgICBncm91cDogbnVsbCxcbiAgICAgICAgICAgIHBvczogJ3RvcC1jZW50ZXInLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIGNsc0Nsb3NlOiAndWstbm90aWZpY2F0aW9uLWNsb3NlJyxcbiAgICAgICAgICAgIGNsc01zZzogJ3VrLW5vdGlmaWNhdGlvbi1tZXNzYWdlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGluc3RhbGw6IGluc3RhbGwkMyxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBtYXJnaW5Qcm9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmVmLnBvcztcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJtYXJnaW5cIiArIChzdGFydHNXaXRoKHBvcywgJ3RvcCcpID8gJ1RvcCcgOiAnQm90dG9tJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhcnRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iajtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoIG9iaiA9IHtvcGFjaXR5OiAwfSwgb2JqW3RoaXMubWFyZ2luUHJvcF0gPSAtdGhpcy4kZWwub2Zmc2V0SGVpZ2h0LCBvYmogKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gJCgoXCIuXCIgKyAodGhpcy5jbHNDb250YWluZXIpICsgXCItXCIgKyAodGhpcy5wb3MpKSwgdGhpcy4kY29udGFpbmVyKVxuICAgICAgICAgICAgICAgIHx8IGFwcGVuZCh0aGlzLiRjb250YWluZXIsIChcIjxkaXYgY2xhc3M9XFxcIlwiICsgKHRoaXMuY2xzQ29udGFpbmVyKSArIFwiIFwiICsgKHRoaXMuY2xzQ29udGFpbmVyKSArIFwiLVwiICsgKHRoaXMucG9zKSArIFwiXFxcIiBzdHlsZT1cXFwiZGlzcGxheTogYmxvY2tcXFwiPjwvZGl2PlwiKSk7XG5cbiAgICAgICAgICAgIHRoaXMuJG1vdW50KGFwcGVuZChjb250YWluZXIsXG4gICAgICAgICAgICAgICAgKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNNc2cpICsgKHRoaXMuc3RhdHVzID8gKFwiIFwiICsgKHRoaXMuY2xzTXNnKSArIFwiLVwiICsgKHRoaXMuc3RhdHVzKSkgOiAnJykgKyBcIlxcXCI+IDxhIGhyZWYgY2xhc3M9XFxcIlwiICsgKHRoaXMuY2xzQ2xvc2UpICsgXCJcXFwiIGRhdGEtdWstY2xvc2U+PC9hPiA8ZGl2PlwiICsgKHRoaXMubWVzc2FnZSkgKyBcIjwvZGl2PiA8L2Rpdj5cIilcbiAgICAgICAgICAgICkpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIG9iajtcblxuXG4gICAgICAgICAgICB2YXIgbWFyZ2luID0gdG9GbG9hdChjc3ModGhpcy4kZWwsIHRoaXMubWFyZ2luUHJvcCkpO1xuICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydChcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHRoaXMuc3RhcnRQcm9wcyksXG4gICAgICAgICAgICAgICAgKCBvYmogPSB7b3BhY2l0eTogMX0sIG9ialt0aGlzLm1hcmdpblByb3BdID0gbWFyZ2luLCBvYmogKVxuICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcyQxLnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnRpbWVyID0gc2V0VGltZW91dCh0aGlzJDEuY2xvc2UsIHRoaXMkMS50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogKCBvYmogPSB7XG5cbiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3Nlc3QoZS50YXJnZXQsICdhW2hyZWY9XCIjXCJdLGFbaHJlZj1cIlwiXScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sIG9ialtwb2ludGVyRW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBvYmpbcG9pbnRlckxlYXZlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgb2JqICksXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciByZW1vdmVGbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcyQxLiRlbC5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcyQxLiRlbCwgJ2Nsb3NlJywgW3RoaXMkMV0pO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUodGhpcyQxLiRlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lciAmJiAhY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVGbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQodGhpcy4kZWwsIHRoaXMuc3RhcnRQcm9wcykudGhlbihyZW1vdmVGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsJDMoVUlraXQpIHtcbiAgICAgICAgVUlraXQubm90aWZpY2F0aW9uLmNsb3NlQWxsID0gZnVuY3Rpb24gKGdyb3VwLCBpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIGFwcGx5KGRvY3VtZW50LmJvZHksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHZhciBub3RpZmljYXRpb24gPSBVSWtpdC5nZXRDb21wb25lbnQoZWwsICdub3RpZmljYXRpb24nKTtcbiAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uICYmICghZ3JvdXAgfHwgZ3JvdXAgPT09IG5vdGlmaWNhdGlvbi5ncm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmNsb3NlKGltbWVkaWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gWyd4JywgJ3knLCAnYmd4JywgJ2JneScsICdyb3RhdGUnLCAnc2NhbGUnLCAnY29sb3InLCAnYmFja2dyb3VuZENvbG9yJywgJ2JvcmRlckNvbG9yJywgJ29wYWNpdHknLCAnYmx1cicsICdodWUnLCAnZ3JheXNjYWxlJywgJ2ludmVydCcsICdzYXR1cmF0ZScsICdzZXBpYScsICdmb3BhY2l0eScsICdzdHJva2UnXTtcblxuICAgIHZhciBQYXJhbGxheCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtNZWRpYV0sXG5cbiAgICAgICAgcHJvcHM6IHByb3BzLnJlZHVjZShmdW5jdGlvbiAocHJvcHMsIHByb3ApIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BdID0gJ2xpc3QnO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9LCB7fSksXG5cbiAgICAgICAgZGF0YTogcHJvcHMucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCBwcm9wKSB7XG4gICAgICAgICAgICBkYXRhW3Byb3BdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0sIHt9KSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBwcm9wczogZnVuY3Rpb24ocHJvcGVydGllcywgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5yZWR1Y2UoZnVuY3Rpb24gKHByb3BzLCBwcm9wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHByb3BlcnRpZXNbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNDb2xvciA9IHByb3AubWF0Y2goL2NvbG9yL2kpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNDc3NQcm9wID0gaXNDb2xvciB8fCBwcm9wID09PSAnb3BhY2l0eSc7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcywgYmdQb3MsIGRpZmY7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IHByb3BlcnRpZXNbcHJvcF0uc2xpY2UoMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3NzUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKCRlbCwgcHJvcCwgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzLnVuc2hpZnQoKHByb3AgPT09ICdzY2FsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGlzQ3NzUHJvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNzcygkZWwsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCkgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IGdldFVuaXQoc3RlcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbG9yKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSAkZWwuc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSByZWYuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLm1hcChmdW5jdGlvbiAoc3RlcCkgeyByZXR1cm4gcGFyc2VDb2xvcigkZWwsIHN0ZXApOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5zdHlsZS5jb2xvciA9IGNvbG9yO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRzV2l0aChwcm9wLCAnYmcnKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IHByb3AgPT09ICdiZ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHRvUHgoc3RlcCwgYXR0ciwgdGhpcyQxLiRlbCk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoJGVsLCAoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLVwiICsgKHByb3BbMl0pKSwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmdQb3MgPSBjc3MoJGVsLCAnYmFja2dyb3VuZFBvc2l0aW9uJykuc3BsaXQoJyAnKVtwcm9wWzJdID09PSAneCcgPyAwIDogMV07IC8vIElFIDExIGNhbid0IHJlYWQgYmFja2dyb3VuZC1wb3NpdGlvbi1beHx5XVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmNvdmVycykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIHN0ZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb3duID0gc3RlcHMuaW5kZXhPZihtaW4pIDwgc3RlcHMuaW5kZXhPZihtYXgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IG1heCAtIG1pbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKGZ1bmN0aW9uIChzdGVwKSB7IHJldHVybiBzdGVwIC0gKGRvd24gPyBtaW4gOiBtYXgpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSAoZG93biA/IC1kaWZmIDogMCkgKyBcInB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBiZ1BvcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKHRvRmxvYXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0cm9rZScpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGVwcy5zb21lKGZ1bmN0aW9uIChzdGVwKSB7IHJldHVybiBzdGVwOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGdldE1heFBhdGhMZW5ndGgodGhpcyQxLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoJGVsLCAnc3Ryb2tlRGFzaGFycmF5JywgbGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXQgPT09ICclJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKGZ1bmN0aW9uIChzdGVwKSB7IHJldHVybiBzdGVwICogbGVuZ3RoIC8gMTAwOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSAnc3Ryb2tlRGFzaG9mZnNldCc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcm9wc1twcm9wXSA9IHtzdGVwczogc3RlcHMsIHVuaXQ6IHVuaXQsIHBvczogcG9zLCBiZ1BvczogYmdQb3MsIGRpZmY6IGRpZmZ9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcblxuICAgICAgICAgICAgICAgIH0sIHt9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYmdQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gWydiZ3gnLCAnYmd5J10uZmlsdGVyKGZ1bmN0aW9uIChiZykgeyByZXR1cm4gYmcgaW4gdGhpcyQxLnByb3BzOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvdmVyczogZnVuY3Rpb24oXywgJGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvdmVycygkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pbWFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBkYXRhLmFjdGl2ZSA9IHRoaXMubWF0Y2hNZWRpYTtcblxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5pbWFnZSAmJiB0aGlzLmNvdmVycyAmJiB0aGlzLmJnUHJvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSBjc3ModGhpcy4kZWwsICdiYWNrZ3JvdW5kSW1hZ2UnKS5yZXBsYWNlKC9ebm9uZXx1cmxcXChbXCInXT8oLis/KVtcIiddP1xcKSQvLCAnJDEnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gc3JjO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbWFnZSA9IGltZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbWcubmF0dXJhbFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS4kdXBkYXRlKCk7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IGRhdGEuaW1hZ2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWltYWdlIHx8ICFpbWFnZS5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkaW1FbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuJGVsLm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuJGVsLm9mZnNldEhlaWdodFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGRpbUltYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogaW1hZ2UubmF0dXJhbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGltYWdlLm5hdHVyYWxIZWlnaHRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRpbSA9IERpbWVuc2lvbnMuY292ZXIoZGltSW1hZ2UsIGRpbUVsKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYmdQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMS5wcm9wc1twcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmYgPSByZWYuZGlmZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnUG9zID0gcmVmLmJnUG9zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSByZWYuc3RlcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyID0gcHJvcCA9PT0gJ2JneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuID0gZGltW2F0dHJdIC0gZGltRWxbYXR0cl07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW4gPCBkaWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaW1FbFthdHRyXSA9IGRpbVthdHRyXSArIGRpZmYgLSBzcGFuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwYW4gPiBkaWZmKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NQZXJjZW50YWdlID0gZGltRWxbYXR0cl0gLyB0b1B4KGJnUG9zLCBhdHRyLCB0aGlzJDEuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc1BlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEucHJvcHNbcHJvcF0uc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXAgLSAoc3BhbiAtIGRpZmYpIC8gcG9zUGVyY2VudGFnZTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkaW0gPSBEaW1lbnNpb25zLmNvdmVyKGRpbUltYWdlLCBkaW1FbCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkYXRhLmRpbSA9IGRpbTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGltID0gcmVmLmRpbTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gcmVmLmFjdGl2ZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7YmFja2dyb3VuZFNpemU6ICcnLCBiYWNrZ3JvdW5kUmVwZWF0OiAnJ30pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGltICYmIGNzcyh0aGlzLiRlbCwge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogKChkaW0ud2lkdGgpICsgXCJweCBcIiArIChkaW0uaGVpZ2h0KSArIFwicHhcIiksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBlYWNoKHRoaXMuZ2V0Q3NzKDApLCBmdW5jdGlvbiAoXywgcHJvcCkgeyByZXR1cm4gY3NzKHRoaXMkMS4kZWwsIHByb3AsICcnKTsgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRDc3M6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAoY3NzLCBwcm9wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHByb3BzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSByZWYuc3RlcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1bml0ID0gcmVmLnVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSByZWYucG9zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShzdGVwcywgcGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZm9ybXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gKz0gXCIgdHJhbnNsYXRlXCIgKyAodWNmaXJzdChwcm9wKSkgKyBcIihcIiArICh0b0Zsb2F0KHZhbHVlKS50b0ZpeGVkKHVuaXQgPT09ICdweCcgPyAwIDogMikpICsgdW5pdCArIFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAnZGVnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtICs9IFwiIHJvdGF0ZShcIiArICh2YWx1ZSArIHVuaXQpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSArPSBcIiBzY2FsZShcIiArIHZhbHVlICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJnIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiZ3knOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NbKFwiYmFja2dyb3VuZC1wb3NpdGlvbi1cIiArIChwcm9wWzJdKSldID0gXCJjYWxjKFwiICsgcG9zICsgXCIgKyBcIiArIHZhbHVlICsgXCJweClcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib3JkZXJDb2xvcic6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IGdldFN0ZXAoc3RlcHMsIHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHJlZiQxWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSByZWYkMVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHJlZiQxWzJdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW3Byb3BdID0gXCJyZ2JhKFwiICsgKHN0YXJ0Lm1hcChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBwICogKGVuZFtpXSAtIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09PSAzID8gdG9GbG9hdCh2YWx1ZSkgOiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsJykpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDU1MgRmlsdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibHVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gXCIgYmx1cihcIiArICh2YWx1ZSArIHVuaXQpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdodWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdkZWcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gXCIgaHVlLXJvdGF0ZShcIiArICh2YWx1ZSArIHVuaXQpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb3BhY2l0eSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJyUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gXCIgb3BhY2l0eShcIiArICh2YWx1ZSArIHVuaXQpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdncmF5c2NhbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW52ZXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NhdHVyYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlcGlhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBcIiArIHByb3AgKyBcIihcIiArICh2YWx1ZSArIHVuaXQpICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzcztcblxuICAgICAgICAgICAgICAgIH0sIHt0cmFuc2Zvcm06ICcnLCBmaWx0ZXI6ICcnfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VDb2xvcihlbCwgY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIGNzcyhjc3MoZWwsICdjb2xvcicsIGNvbG9yKSwgJ2NvbG9yJylcbiAgICAgICAgICAgIC5zcGxpdCgvWygpLF0vZylcbiAgICAgICAgICAgIC5zbGljZSgxLCAtMSlcbiAgICAgICAgICAgIC5jb25jYXQoMSlcbiAgICAgICAgICAgIC5zbGljZSgwLCA0KVxuICAgICAgICAgICAgLm1hcCh0b0Zsb2F0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGVwKHN0ZXBzLCBwZXJjZW50KSB7XG4gICAgICAgIHZhciBjb3VudCA9IHN0ZXBzLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBpbmRleCA9IE1hdGgubWluKE1hdGguZmxvb3IoY291bnQgKiBwZXJjZW50KSwgY291bnQgLSAxKTtcbiAgICAgICAgdmFyIHN0ZXAgPSBzdGVwcy5zbGljZShpbmRleCwgaW5kZXggKyAyKTtcblxuICAgICAgICBzdGVwLnB1c2gocGVyY2VudCA9PT0gMSA/IDEgOiBwZXJjZW50ICUgKDEgLyBjb3VudCkgKiBjb3VudCk7XG5cbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWUoc3RlcHMsIHBlcmNlbnQsIGRpZ2l0cykge1xuICAgICAgICBpZiAoIGRpZ2l0cyA9PT0gdm9pZCAwICkgZGlnaXRzID0gMjtcblxuICAgICAgICB2YXIgcmVmID0gZ2V0U3RlcChzdGVwcywgcGVyY2VudCk7XG4gICAgICAgIHZhciBzdGFydCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGVuZCA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHAgPSByZWZbMl07XG4gICAgICAgIHJldHVybiAoaXNOdW1iZXIoc3RhcnQpXG4gICAgICAgICAgICA/IHN0YXJ0ICsgTWF0aC5hYnMoc3RhcnQgLSBlbmQpICogcCAqIChzdGFydCA8IGVuZCA/IDEgOiAtMSlcbiAgICAgICAgICAgIDogK2VuZFxuICAgICAgICApLnRvRml4ZWQoZGlnaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRVbml0KHN0ZXBzKSB7XG4gICAgICAgIHJldHVybiBzdGVwcy5yZWR1Y2UoZnVuY3Rpb24gKHVuaXQsIHN0ZXApIHsgcmV0dXJuIGlzU3RyaW5nKHN0ZXApICYmIHN0ZXAucmVwbGFjZSgvLXxcXGQvZywgJycpLnRyaW0oKSB8fCB1bml0OyB9LCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY292ZXJzKGVsKSB7XG4gICAgICAgIHZhciByZWYgPSBlbC5zdHlsZTtcbiAgICAgICAgdmFyIGJhY2tncm91bmRTaXplID0gcmVmLmJhY2tncm91bmRTaXplO1xuICAgICAgICB2YXIgY292ZXJzID0gY3NzKGNzcyhlbCwgJ2JhY2tncm91bmRTaXplJywgJycpLCAnYmFja2dyb3VuZFNpemUnKSA9PT0gJ2NvdmVyJztcbiAgICAgICAgZWwuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBiYWNrZ3JvdW5kU2l6ZTtcbiAgICAgICAgcmV0dXJuIGNvdmVycztcbiAgICB9XG5cbiAgICB2YXIgcGFyYWxsYXggPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbUGFyYWxsYXhdLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFN0cmluZyxcbiAgICAgICAgICAgIHZpZXdwb3J0OiBOdW1iZXIsXG4gICAgICAgICAgICBlYXNpbmc6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRhcmdldDogZmFsc2UsXG4gICAgICAgICAgICB2aWV3cG9ydDogMSxcbiAgICAgICAgICAgIGVhc2luZzogMVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRPZmZzZXRFbGVtZW50KHRhcmdldCAmJiBxdWVyeSh0YXJnZXQsICRlbCkgfHwgJGVsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihyZWYsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZi5wZXJjZW50O1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ3Njcm9sbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IGVhc2Uoc2Nyb2xsZWRPdmVyKHRoaXMudGFyZ2V0KSAvICh0aGlzLnZpZXdwb3J0IHx8IDEpLCB0aGlzLmVhc2luZyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50OiBwZXJjZW50LFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogcHJldiAhPT0gcGVyY2VudCA/IHRoaXMuZ2V0Q3NzKHBlcmNlbnQpIDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gcmVmLmFjdGl2ZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3R5bGUgJiYgY3NzKHRoaXMuJGVsLCBzdHlsZSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGVhc2UocGVyY2VudCwgZWFzaW5nKSB7XG4gICAgICAgIHJldHVybiBjbGFtcChwZXJjZW50ICogKDEgLSAoZWFzaW5nIC0gZWFzaW5nICogcGVyY2VudCkpKTtcbiAgICB9XG5cbiAgICAvLyBTVkcgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgZnJvbSBIVE1MRWxlbWVudFxuICAgIGZ1bmN0aW9uIGdldE9mZnNldEVsZW1lbnQoZWwpIHtcbiAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgICAgICA/ICdvZmZzZXRUb3AnIGluIGVsXG4gICAgICAgICAgICAgICAgPyBlbFxuICAgICAgICAgICAgICAgIDogZ2V0T2Zmc2V0RWxlbWVudChlbC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgOiBkb2N1bWVudC5ib2R5O1xuICAgIH1cblxuICAgIHZhciBTbGlkZXJSZWFjdGl2ZSA9IHtcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoIHx8IHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0VmFsaWRJbmRleCh0aGlzLmluZGV4KTtcblxuICAgICAgICAgICAgICAgIGlmICghfnRoaXMucHJldkluZGV4IHx8IHRoaXMuaW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gVHJhbnNpdGlvbmVyJDEgKHByZXYsIG5leHQsIGRpciwgcmVmKSB7XG4gICAgICAgIHZhciBjZW50ZXIgPSByZWYuY2VudGVyO1xuICAgICAgICB2YXIgZWFzaW5nID0gcmVmLmVhc2luZztcbiAgICAgICAgdmFyIGxpc3QgPSByZWYubGlzdDtcblxuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICAgIHZhciBmcm9tID0gcHJldlxuICAgICAgICAgICAgPyBnZXRMZWZ0KHByZXYsIGxpc3QsIGNlbnRlcilcbiAgICAgICAgICAgIDogZ2V0TGVmdChuZXh0LCBsaXN0LCBjZW50ZXIpICsgb2Zmc2V0KG5leHQpLndpZHRoICogZGlyO1xuICAgICAgICB2YXIgdG8gPSBuZXh0XG4gICAgICAgICAgICA/IGdldExlZnQobmV4dCwgbGlzdCwgY2VudGVyKVxuICAgICAgICAgICAgOiBmcm9tICsgb2Zmc2V0KHByZXYpLndpZHRoICogZGlyICogKGlzUnRsID8gLTEgOiAxKTtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICBkaXI6IGRpcixcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oZHVyYXRpb24sIHBlcmNlbnQsIGxpbmVhcikge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IDA7XG5cblxuICAgICAgICAgICAgICAgIHZhciB0aW1pbmcgPSBsaW5lYXIgPyAnbGluZWFyJyA6IGVhc2luZztcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAtPSBNYXRoLnJvdW5kKGR1cmF0aW9uICogY2xhbXAocGVyY2VudCwgLTEsIDEpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgcHJldiAmJiB0aGlzLnVwZGF0ZVRyYW5zbGF0ZXMoKTtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gcHJldiA/IHBlcmNlbnQgOiBjbGFtcChwZXJjZW50LCAwLCAxKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4oKSwgJ2l0ZW1pbicsIHtwZXJjZW50OiBwZXJjZW50LCBkdXJhdGlvbjogZHVyYXRpb24sIHRpbWluZzogdGltaW5nLCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgIHByZXYgJiYgdHJpZ2dlclVwZGF0ZSQxKHRoaXMuZ2V0SXRlbUluKHRydWUpLCAnaXRlbW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZHVyYXRpb246IGR1cmF0aW9uLCB0aW1pbmc6IHRpbWluZywgZGlyOiBkaXJ9KTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGEgYnVnIGluIGlPUyBTYWZhcmkgMTQuMCB3aGljaCBkb2VzIG5vdCBsZXQgeW91IHRyYW5zaXRpb24gdG8gdGhlIHNhbWUgdmFsdWUgdHdpY2VcbiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tT2Zmc2V0ID0gaW5kZXgobmV4dCkgLyAxMDAwMDtcblxuICAgICAgICAgICAgICAgIFRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgLnN0YXJ0KGxpc3QsIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgoLXRvICsgcmFuZG9tT2Zmc2V0KSAqIChpc1J0bCA/IC0xIDogMSksICdweCcpfSwgZHVyYXRpb24sIHRpbWluZylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgbm9vcCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb24uc3RvcChsaXN0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY3NzKGxpc3QsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3J3YXJkOiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCkge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvdyhkdXJhdGlvbiwgcGVyY2VudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZ2V0RGlzdGFuY2UoKSAqIGRpciAqIChpc1J0bCA/IC0xIDogMSk7XG5cbiAgICAgICAgICAgICAgICBjc3MobGlzdCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZShjbGFtcChcbiAgICAgICAgICAgICAgICAgICAgLXRvICsgKGRpc3RhbmNlIC0gZGlzdGFuY2UgKiBwZXJjZW50KSxcbiAgICAgICAgICAgICAgICAgICAgLWdldFdpZHRoKGxpc3QpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQobGlzdCkud2lkdGhcbiAgICAgICAgICAgICAgICApICogKGlzUnRsID8gLTEgOiAxKSwgJ3B4JykpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUcmFuc2xhdGVzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gY2xhbXAocGVyY2VudCwgLTEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4oKSwgJ2l0ZW10cmFuc2xhdGVpbicsIHtwZXJjZW50OiBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtdHJhbnNsYXRlb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKChjc3MobGlzdCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gKiAoaXNSdGwgPyAtMSA6IDEpICsgZnJvbSkgLyAodG8gLSBmcm9tKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRvIC0gZnJvbSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRJdGVtSW46IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICAgICAgICAgIGlmICggb3V0ID09PSB2b2lkIDAgKSBvdXQgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLmdldEFjdGl2ZXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWxsID0gc29ydEJ5KHNsaWRlcyhsaXN0KSwgJ29mZnNldExlZnQnKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGluZGV4KGFsbCwgYWN0aXZlc1tkaXIgKiAob3V0ID8gLTEgOiAxKSA+IDAgPyBhY3RpdmVzLmxlbmd0aCAtIDEgOiAwXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gfmkgJiYgYWxsW2kgKyAocHJldiAmJiAhb3V0ID8gZGlyIDogMCldO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRBY3RpdmVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gZ2V0TGVmdChwcmV2IHx8IG5leHQsIGxpc3QsIGNlbnRlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc29ydEJ5KHNsaWRlcyhsaXN0KS5maWx0ZXIoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSBnZXRFbExlZnQoc2xpZGUsIGxpc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpZGVMZWZ0ID49IGxlZnQgJiYgc2xpZGVMZWZ0ICsgb2Zmc2V0KHNsaWRlKS53aWR0aCA8PSBvZmZzZXQobGlzdCkud2lkdGggKyBsZWZ0O1xuICAgICAgICAgICAgICAgIH0pLCAnb2Zmc2V0TGVmdCcpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVUcmFuc2xhdGVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVzKCk7XG5cbiAgICAgICAgICAgICAgICBzbGlkZXMobGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUkMShzbGlkZSwgKFwiaXRlbXRyYW5zbGF0ZVwiICsgKGlzQWN0aXZlID8gJ2luJyA6ICdvdXQnKSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ6IGlzQWN0aXZlID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHNsaWRlLm9mZnNldExlZnQgPD0gbmV4dC5vZmZzZXRMZWZ0ID8gMSA6IC0xXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMZWZ0KGVsLCBsaXN0LCBjZW50ZXIpIHtcblxuICAgICAgICB2YXIgbGVmdCA9IGdldEVsTGVmdChlbCwgbGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIGNlbnRlclxuICAgICAgICAgICAgPyBsZWZ0IC0gY2VudGVyRWwoZWwsIGxpc3QpXG4gICAgICAgICAgICA6IE1hdGgubWluKGxlZnQsIGdldE1heChsaXN0KSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXgobGlzdCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgZ2V0V2lkdGgobGlzdCkgLSBvZmZzZXQobGlzdCkud2lkdGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdpZHRoKGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlcyhsaXN0KS5yZWR1Y2UoZnVuY3Rpb24gKHJpZ2h0LCBlbCkgeyByZXR1cm4gb2Zmc2V0KGVsKS53aWR0aCArIHJpZ2h0OyB9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhXaWR0aChsaXN0KSB7XG4gICAgICAgIHJldHVybiBzbGlkZXMobGlzdCkucmVkdWNlKGZ1bmN0aW9uIChyaWdodCwgZWwpIHsgcmV0dXJuIE1hdGgubWF4KHJpZ2h0LCBvZmZzZXQoZWwpLndpZHRoKTsgfSwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2VudGVyRWwoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldChsaXN0KS53aWR0aCAvIDIgLSBvZmZzZXQoZWwpLndpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFbExlZnQoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbihlbCkubGVmdCArIChpc1J0bCA/IG9mZnNldChlbCkud2lkdGggLSBvZmZzZXQobGlzdCkud2lkdGggOiAwKSkgKiAoaXNSdGwgPyAtMSA6IDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUkMShlbCwgdHlwZSwgZGF0YSkge1xuICAgICAgICB0cmlnZ2VyKGVsLCBjcmVhdGVFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRhdGEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZXMobGlzdCkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4obGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWRlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVyLCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNlbnRlcjogQm9vbGVhbixcbiAgICAgICAgICAgIHNldHM6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICAgICAgc2V0czogZmFsc2UsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLXNsaWRlci1pdGVtJyxcbiAgICAgICAgICAgIHNlbExpc3Q6ICcudWstc2xpZGVyLWl0ZW1zJyxcbiAgICAgICAgICAgIHNlbE5hdjogJy51ay1zbGlkZXItbmF2JyxcbiAgICAgICAgICAgIGNsc0NvbnRhaW5lcjogJ3VrLXNsaWRlci1jb250YWluZXInLFxuICAgICAgICAgICAgVHJhbnNpdGlvbmVyOiBUcmFuc2l0aW9uZXIkMVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGF2Z1dpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGgodGhpcy5saXN0KSAvIHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmluaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluaXRlID0gcmVmLmZpbml0ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaW5pdGUgfHwgTWF0aC5jZWlsKGdldFdpZHRoKHRoaXMubGlzdCkpIDwgb2Zmc2V0KHRoaXMubGlzdCkud2lkdGggKyBnZXRNYXhXaWR0aCh0aGlzLmxpc3QpICsgdGhpcy5jZW50ZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYXhJbmRleDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmluaXRlIHx8IHRoaXMuY2VudGVyICYmICF0aGlzLnNldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3QodGhpcy5zZXRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5zbGlkZXMsICdvcmRlcicsICcnKTtcblxuICAgICAgICAgICAgICAgIHZhciBtYXggPSBnZXRNYXgodGhpcy5saXN0KTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0RWxMZWZ0KHRoaXMubGlzdC5jaGlsZHJlbltpXSwgdGhpcy5saXN0KSA8IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGkgKyAxLCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXRzOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc2V0cyA9IHJlZi5zZXRzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvZmZzZXQodGhpcy5saXN0KS53aWR0aCAvICh0aGlzLmNlbnRlciA/IDIgOiAxKTtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdENlbnRlciA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgc2V0cyA9IHNldHMgJiYgdGhpcy5zbGlkZXMucmVkdWNlKGZ1bmN0aW9uIChzZXRzLCBzbGlkZSwgaSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQoc2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVXaWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlUmlnaHQgPSBzbGlkZUxlZnQgKyBzbGlkZVdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZVJpZ2h0ID4gbGVmdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMkMS5jZW50ZXIgJiYgaSA+IHRoaXMkMS5tYXhJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzJDEubWF4SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZXMoc2V0cywgaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzJDEuc2xpZGVzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmNlbnRlciAmJiBjbXAgJiYgc2xpZGVXaWR0aCA8IGxlZnRDZW50ZXIgLSBvZmZzZXQoY21wKS53aWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbnRlciAtPSBzbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRDZW50ZXIgPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gc2xpZGVMZWZ0ICsgd2lkdGggKyAodGhpcyQxLmNlbnRlciA/IHNsaWRlV2lkdGggLyAyIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUxlZnQgKz0gc2xpZGVXaWR0aDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0cztcblxuICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAhaXNFbXB0eShzZXRzKSAmJiBzZXRzO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uT3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB0aGlzLmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogdGhpcy5saXN0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNDb250YWluZXIsICEkKChcIi5cIiArICh0aGlzLmNsc0NvbnRhaW5lcikpLCB0aGlzLiRlbCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgdGhpcy4kZWwpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGRhdGEoZWwsIHRoaXMkMS5hdHRySXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5tYXhJbmRleCAmJiB0b2dnbGVDbGFzcyhlbCwgJ3VrLWhpZGRlbicsIGlzTnVtZXJpYyhpbmRleCkgJiYgKHRoaXMkMS5zZXRzICYmICFpbmNsdWRlcyh0aGlzJDEuc2V0cywgdG9GbG9hdChpbmRleCkpIHx8IGluZGV4ID4gdGhpcyQxLm1heEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggJiYgIXRoaXMuZHJhZ2dpbmcgJiYgIXRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGUoMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLl9nZXRUcmFuc2l0aW9uZXIodGhpcy5pbmRleCkuZ2V0QWN0aXZlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7IHJldHVybiB0b2dnbGVDbGFzcyhzbGlkZSwgdGhpcyQxLmNsc0FjdGl2ZSwgaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpKTsgfSk7XG4gICAgICAgICAgICAgICAgKCF0aGlzLnNldHMgfHwgaW5jbHVkZXModGhpcy5zZXRzLCB0b0Zsb2F0KHRoaXMuaW5kZXgpKSkgJiYgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKHNsaWRlLCB0aGlzJDEuY2xzQWN0aXZhdGVkLCBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSkpOyB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgYmVmb3JlaXRlbXNob3c6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2luZyAmJiB0aGlzLnNldHMgJiYgdGhpcy5zdGFjay5sZW5ndGggPCAyICYmICFpbmNsdWRlcyh0aGlzLnNldHMsIHRoaXMuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IE1hdGguYWJzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4XG4gICAgICAgICAgICAgICAgICAgIC0gdGhpcy5wcmV2SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5kaXIgPiAwICYmIHRoaXMuaW5kZXggPCB0aGlzLnByZXZJbmRleCB8fCB0aGlzLmRpciA8IDAgJiYgdGhpcy5pbmRleCA+IHRoaXMucHJldkluZGV4ID8gKHRoaXMubWF4SW5kZXggKyAxKSAqIHRoaXMuZGlyIDogMClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nICYmIGRpZmYgPiAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2suc3BsaWNlKDEsIDAsIHRoaXMuZGlyID4gMCA/ICduZXh0JyA6ICdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHNwZWVkVXAodGhpcy5hdmdXaWR0aCAvIHRoaXMudmVsb2NpdHkpXG4gICAgICAgICAgICAgICAgICAgICogKG9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyIDwgMCB8fCAhdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnNsaWRlc1t0aGlzLmluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICkud2lkdGggLyB0aGlzLmF2Z1dpZHRoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpdGVtc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgfnRoaXMucHJldkluZGV4ICYmIGFkZENsYXNzKHRoaXMuX2dldFRyYW5zaXRpb25lcigpLmdldEl0ZW1JbigpLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlb3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5pdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuc2xpZGVzLCAnb3JkZXInLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRpciA+IDAgJiYgdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdID8gdGhpcy5wcmV2SW5kZXggOiB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUsIGkpIHsgcmV0dXJuIGNzcyhzbGlkZSwgJ29yZGVyJywgdGhpcyQxLmRpciA+IDAgJiYgaSA8IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcyQxLmRpciA8IDAgJiYgaSA+PSB0aGlzJDEuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICApOyB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5zbGlkZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IG9mZnNldCh0aGlzLmxpc3QpLndpZHRoIC8gMiAtIG9mZnNldChuZXh0KS53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIGogPSAwO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0SW5kZXgoLS1qICsgaW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbc2xpZGVJbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHNsaWRlLCAnb3JkZXInLCBzbGlkZUluZGV4ID4gaW5kZXggPyAtMiA6IC0xKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggLT0gb2Zmc2V0KHNsaWRlKS53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFZhbGlkSW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2SW5kZXggPT09IHZvaWQgMCApIHByZXZJbmRleCA9IHRoaXMucHJldkluZGV4O1xuXG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoaW5kZXgsIHByZXZJbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2V0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXY7XG5cbiAgICAgICAgICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVzKHRoaXMuc2V0cywgaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoaW5kZXggIT09IHByZXYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2xpZGVyUGFyYWxsYXggPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbUGFyYWxsYXhdLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbEl0ZW06ICchbGknXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsSXRlbSA9IHJlZi5zZWxJdGVtO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KHNlbEl0ZW0sICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyguNSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtaW4gaXRlbW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcmVmX2RldGFpbC5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IHJlZl9kZXRhaWwudGltaW5nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gcmVmX2RldGFpbC5kaXI7XG5cblxuICAgICAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoaXNJbih0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkaXIgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgICAgICAgICksIGR1cmF0aW9uLCB0aW1pbmcpLmNhdGNoKG5vb3ApO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFuc2l0aW9uY2FuY2VsZWQgdHJhbnNpdGlvbmVuZCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtdHJhbnNsYXRlaW4gaXRlbXRyYW5zbGF0ZW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpciA9IHJlZl9kZXRhaWwuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyhnZXRDdXJyZW50KHR5cGUsIGRpciwgcGVyY2VudCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzSW4odHlwZSkge1xuICAgICAgICByZXR1cm4gZW5kc1dpdGgodHlwZSwgJ2luJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpIHtcblxuICAgICAgICBwZXJjZW50IC89IDI7XG5cbiAgICAgICAgcmV0dXJuICFpc0luKHR5cGUpXG4gICAgICAgICAgICA/IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IHBlcmNlbnRcbiAgICAgICAgICAgICAgICA6IDEgLSBwZXJjZW50XG4gICAgICAgICAgICA6IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IDEgLSBwZXJjZW50XG4gICAgICAgICAgICAgICAgOiBwZXJjZW50O1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zJDIgPSBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgICAgICBmYWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBzY2FsZToge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSksIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwZXJjZW50OiBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24ocGVyY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAxIC0gcGVyY2VudCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSAqIHBlcmNlbnQpLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVsbDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogMH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA8IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKDMwICogcGVyY2VudCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC1wZXJjZW50ICogMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVzaDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogLTF9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTMwKSwgekluZGV4OiAtMX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKHBlcmNlbnQgKiAxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqIHBlcmNlbnQpLCB6SW5kZXg6IC0xfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgdmFyIHNsaWRlc2hvdyA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVzaG93LCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHJhdGlvOiBTdHJpbmcsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IE51bWJlcixcbiAgICAgICAgICAgIG1heEhlaWdodDogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcmF0aW86ICcxNjo5JyxcbiAgICAgICAgICAgIG1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsTGlzdDogJy51ay1zbGlkZXNob3ctaXRlbXMnLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zbGlkZXNob3ctaXRlbScsXG4gICAgICAgICAgICBzZWxOYXY6ICcudWstc2xpZGVzaG93LW5hdicsXG4gICAgICAgICAgICBBbmltYXRpb25zOiBBbmltYXRpb25zJDJcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5yYXRpby5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmWzFdO1xuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5saXN0Lm9mZnNldFdpZHRoIC8gd2lkdGggfHwgMDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCh0aGlzLm1pbkhlaWdodCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtoZWlnaHQ6IGhlaWdodCAtIGJveE1vZGVsQWRqdXN0KHRoaXMubGlzdCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIGhlaWdodCA+IDAgJiYgY3NzKHRoaXMubGlzdCwgJ21pbkhlaWdodCcsIGhlaWdodCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHNvcnRhYmxlID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBBbmltYXRlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZ3JvdXA6IFN0cmluZyxcbiAgICAgICAgICAgIHRocmVzaG9sZDogTnVtYmVyLFxuICAgICAgICAgICAgY2xzSXRlbTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzUGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWc6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWdTdGF0ZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmFzZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNFbXB0eTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiBTdHJpbmcsXG4gICAgICAgICAgICBoYW5kbGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogNSxcbiAgICAgICAgICAgIGNsc0l0ZW06ICd1ay1zb3J0YWJsZS1pdGVtJyxcbiAgICAgICAgICAgIGNsc1BsYWNlaG9sZGVyOiAndWstc29ydGFibGUtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgY2xzRHJhZzogJ3VrLXNvcnRhYmxlLWRyYWcnLFxuICAgICAgICAgICAgY2xzRHJhZ1N0YXRlOiAndWstZHJhZycsXG4gICAgICAgICAgICBjbHNCYXNlOiAndWstc29ydGFibGUnLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiAndWstc29ydGFibGUtbm9kcmFnJyxcbiAgICAgICAgICAgIGNsc0VtcHR5OiAndWstc29ydGFibGUtZW1wdHknLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiAnJyxcbiAgICAgICAgICAgIGhhbmRsZTogZmFsc2UsXG4gICAgICAgICAgICBwb3M6IHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgWydpbml0JywgJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gdGhpcyQxW2tleV07XG4gICAgICAgICAgICAgICAgdGhpcyQxW2tleV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24odGhpcyQxLnBvcywgZ2V0RXZlbnRQb3MoZSkpO1xuICAgICAgICAgICAgICAgICAgICBmbihlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiB7XG5cbiAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBoYW5kbGVyOiAnaW5pdCdcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRlbC50Qm9kaWVzIHx8IFt0aGlzLiRlbF0pWzBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0VtcHR5OiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNFbXB0eSh0aGlzLml0ZW1zKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmNsc0VtcHR5LCBlbXB0eSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHJlZi5oYW5kbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZSA/ICQkKGhhbmRsZSwgZWwpIDogdGhpcy5pdGVtcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGhhbmRsZXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHByZXYsIHt0b3VjaEFjdGlvbjogJycsIHVzZXJTZWxlY3Q6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhoYW5kbGVzLCB7dG91Y2hBY3Rpb246IGhhc1RvdWNoID8gJ25vbmUnIDogJycsIHVzZXJTZWxlY3Q6ICdub25lJ30pOyAvLyB0b3VjaEFjdGlvbiBzZXQgdG8gJ25vbmUnIGNhdXNlcyBhIHBlcmZvcm1hbmNlIGRyb3AgaW4gQ2hyb21lIDgwXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcgfHwgIXBhcmVudCh0aGlzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2xhbXAgdG8gdmlld3BvcnRcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIHggPSByZWYueDtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IHJlZi55O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHRoaXMub3JpZ2luO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRUb3AgPSByZWYkMS5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYkMS5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMiA9IHRoaXMuZHJhZztcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gcmVmJDIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IHJlZiQyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciByZWYkMyA9IG9mZnNldCh3aW5kb3cpO1xuICAgICAgICAgICAgICAgIHZhciByaWdodCA9IHJlZiQzLnJpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYkMy5ib3R0b207XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5kcmFnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogY2xhbXAoeSAtIG9mZnNldFRvcCwgMCwgYm90dG9tIC0gb2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogY2xhbXAoeCAtIG9mZnNldExlZnQsIDAsIHJpZ2h0IC0gb2Zmc2V0V2lkdGgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmdldFNvcnRhYmxlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpcy5nZXRTb3J0YWJsZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgbW92ZSA9IHNvcnRhYmxlICE9PSBwcmV2aW91cztcblxuICAgICAgICAgICAgICAgIGlmICghc29ydGFibGUgfHwgd2l0aGluKHRhcmdldCwgdGhpcy5wbGFjZWhvbGRlcikgfHwgbW92ZSAmJiAoIXNvcnRhYmxlLmdyb3VwIHx8IHNvcnRhYmxlLmdyb3VwICE9PSBwcmV2aW91cy5ncm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHNvcnRhYmxlLnRhcmdldCA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0IHx8IHNvcnRhYmxlLml0ZW1zLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKHRhcmdldCwgZWxlbWVudCk7IH0pWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMucmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc29ydGFibGUuaW5zZXJ0KHRoaXMucGxhY2Vob2xkZXIsIHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVzKHRoaXMudG91Y2hlZCwgc29ydGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZC5wdXNoKHNvcnRhYmxlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydtb3ZlJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IGUuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiB3aXRoaW4odGFyZ2V0LCBlbCk7IH0pO1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHJlZlswXTtcblxuICAgICAgICAgICAgICAgIGlmICghcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgfHwgZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICAgICAgICAgICAgICB8fCBidXR0b24gPiAwXG4gICAgICAgICAgICAgICAgICAgIHx8IGlzSW5wdXQodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICB8fCB3aXRoaW4odGFyZ2V0LCAoXCIuXCIgKyAodGhpcy5jbHNOb0RyYWcpKSlcbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5oYW5kbGUgJiYgIXdpdGhpbih0YXJnZXQsIHRoaXMuaGFuZGxlKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaGVkID0gW3RoaXNdO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbiA9IGFzc2lnbih7dGFyZ2V0OiB0YXJnZXQsIGluZGV4OiBpbmRleChwbGFjZWhvbGRlcil9LCB0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb24oZG9jdW1lbnQsIHBvaW50ZXJVcCwgdGhpcy5lbmQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IGFwcGVuZERyYWcodGhpcy4kY29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wbGFjZWhvbGRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IHJlZi5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgICAgIGFzc2lnbih0aGlzLm9yaWdpbiwge29mZnNldExlZnQ6IHRoaXMucG9zLnggLSBsZWZ0LCBvZmZzZXRUb3A6IHRoaXMucG9zLnkgLSB0b3B9KTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuZHJhZywgdGhpcy5jbHNEcmFnLCB0aGlzLmNsc0N1c3RvbSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5wbGFjZWhvbGRlciwgdGhpcy5jbHNQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNJdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdGFydCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgICAgICB0cmFja1Njcm9sbCh0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtb3ZlOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ21vdmUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMucG9zLnggLSB0aGlzLm9yaWdpbi54KSA+IHRoaXMudGhyZXNob2xkIHx8IE1hdGguYWJzKHRoaXMucG9zLnkgLSB0aGlzLm9yaWdpbi55KSA+IHRoaXMudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb2ZmKGRvY3VtZW50LCBwb2ludGVyVXAsIHRoaXMuZW5kKTtcbiAgICAgICAgICAgICAgICBvZmYod2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHVudHJhY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzb3J0YWJsZSA9IHRoaXMuZ2V0U29ydGFibGUodGhpcy5wbGFjZWhvbGRlcik7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gc29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3JpZ2luLmluZGV4ICE9PSBpbmRleCh0aGlzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ21vdmVkJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoc29ydGFibGUuJGVsLCAnYWRkZWQnLCBbc29ydGFibGUsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3JlbW92ZWQnLCBbdGhpcywgdGhpcy5wbGFjZWhvbGRlcl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdG9wJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcblxuICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLmRyYWcpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IHRoaXMudG91Y2hlZC5tYXAoZnVuY3Rpb24gKHNvcnRhYmxlKSB7IHJldHVybiAoKHNvcnRhYmxlLmNsc1BsYWNlaG9sZGVyKSArIFwiIFwiICsgKHNvcnRhYmxlLmNsc0l0ZW0pKTsgfSkuam9pbignICcpO1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZC5mb3JFYWNoKGZ1bmN0aW9uIChzb3J0YWJsZSkgeyByZXR1cm4gcmVtb3ZlQ2xhc3Moc29ydGFibGUuaXRlbXMsIGNsYXNzZXMpOyB9KTtcblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5jbHNEcmFnU3RhdGUpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLml0ZW1zLCB0aGlzLmNsc0l0ZW0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2l0aGluKGVsZW1lbnQsIHRoaXMkMS50YXJnZXQpIHx8IGlzUHJlZGVjZXNzb3IoZWxlbWVudCwgdGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSh0YXJnZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlcih0YXJnZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQodGhpcyQxLnRhcmdldCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlKGluc2VydCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICAgIGlmICghd2l0aGluKGVsZW1lbnQsIHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoZWxlbWVudCk7IH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFNvcnRhYmxlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgKHRoaXMuJGdldENvbXBvbmVudChlbGVtZW50LCAnc29ydGFibGUnKSB8fCB0aGlzLmdldFNvcnRhYmxlKGVsZW1lbnQucGFyZW50Tm9kZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc1ByZWRlY2Vzc29yKGVsZW1lbnQsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlID09PSB0YXJnZXQucGFyZW50Tm9kZSAmJiBpbmRleChlbGVtZW50KSA+IGluZGV4KHRhcmdldCk7XG4gICAgfVxuXG4gICAgdmFyIHRyYWNrVGltZXI7XG4gICAgZnVuY3Rpb24gdHJhY2tTY3JvbGwocG9zKSB7XG5cbiAgICAgICAgdmFyIGxhc3QgPSBEYXRlLm5vdygpO1xuICAgICAgICB0cmFja1RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgeCA9IHBvcy54O1xuICAgICAgICAgICAgdmFyIHkgPSBwb3MueTtcbiAgICAgICAgICAgIHkgKz0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICB2YXIgZGlzdCA9IChEYXRlLm5vdygpIC0gbGFzdCkgKiAuMztcbiAgICAgICAgICAgIGxhc3QgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgICAgICBzY3JvbGxQYXJlbnRzKGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgcG9zLnkpKS5zb21lKGZ1bmN0aW9uIChzY3JvbGxFbCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbCA9IHNjcm9sbEVsLnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IG9mZnNldChnZXRWaWV3cG9ydChzY3JvbGxFbCkpO1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYuYm90dG9tO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRvcCA8IHkgJiYgdG9wICsgMzAgPiB5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbCAtPSBkaXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm90dG9tID4geSAmJiBib3R0b20gLSAzMCA8IHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsICs9IGRpc3Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzY3JvbGwgPiAwICYmIHNjcm9sbCA8IHNjcm9sbEhlaWdodCAtIGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3Aoc2Nyb2xsRWwsIHNjcm9sbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSwgMTUpO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cmFja1Njcm9sbCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0cmFja1RpbWVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmREcmFnKGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBhcHBlbmQoY29udGFpbmVyLCBlbGVtZW50Lm91dGVySFRNTC5yZXBsYWNlKC8oXjwpKD86bGl8dHIpfCg/OmxpfHRyKShcXC8+JCkvZywgJyQxZGl2JDInKSk7XG5cbiAgICAgICAgY2xvbmUuc3R5bGUuc2V0UHJvcGVydHkoJ21hcmdpbicsICcwJywgJ2ltcG9ydGFudCcpO1xuXG4gICAgICAgIGNzcyhjbG9uZSwgYXNzaWduKHtcbiAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgIH0sIGNzcyhlbGVtZW50LCBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdCb3R0b20nXSkpKTtcblxuICAgICAgICBoZWlnaHQoY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQsIGhlaWdodChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSk7XG5cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIHZhciBvYmokMTtcblxuICAgIHZhciBhY3RpdmVzID0gW107XG5cbiAgICB2YXIgdG9vbHRpcCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDb250YWluZXIsIFRvZ2dsYWJsZSwgUG9zaXRpb25dLFxuXG4gICAgICAgIGFyZ3M6ICd0aXRsZScsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRlbGF5OiBOdW1iZXIsXG4gICAgICAgICAgICB0aXRsZTogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcG9zOiAndG9wJyxcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBbJ3VrLWFuaW1hdGlvbi1zY2FsZS11cCddLFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbHNQb3M6ICd1ay10b29sdGlwJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZUNvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5faGFzVGl0bGUgPSBoYXNBdHRyKHRoaXMuJGVsLCAndGl0bGUnKTtcbiAgICAgICAgICAgIGF0dHIodGhpcy4kZWwsIHt0aXRsZTogJycsICdhcmlhLWV4cGFuZGVkJzogZmFsc2V9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICBhdHRyKHRoaXMuJGVsLCB7dGl0bGU6IHRoaXMuX2hhc1RpdGxlID8gdGhpcy50aXRsZSA6IG51bGwsICdhcmlhLWV4cGFuZGVkJzogbnVsbH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkgfHwgIXRoaXMudGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aXZlKSB7IHJldHVybiBhY3RpdmUuaGlkZSgpOyB9KTtcbiAgICAgICAgICAgICAgICBhY3RpdmVzLnB1c2godGhpcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl91bmJpbmQgPSBvbihkb2N1bWVudCwgcG9pbnRlclVwLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gIXdpdGhpbihlLnRhcmdldCwgdGhpcyQxLiRlbCkgJiYgdGhpcyQxLmhpZGUoKTsgfSk7XG5cbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zaG93VGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dCh0aGlzLl9zaG93LCB0aGlzLmRlbGF5KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSB8fCBtYXRjaGVzKHRoaXMuJGVsLCAnaW5wdXQ6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudG9vbHRpcCwgZmFsc2UsIGZhbHNlKS50aGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVzLnNwbGljZShhY3RpdmVzLmluZGV4T2YodGhpcyQxKSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMkMS5zaG93VGltZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS50b29sdGlwID0gcmVtb3ZlKHRoaXMkMS50b29sdGlwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLl91bmJpbmQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9zaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwID0gYXBwZW5kKHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICAoXCI8ZGl2IGNsYXNzPVxcXCJcIiArICh0aGlzLmNsc1BvcykgKyBcIlxcXCI+IDxkaXYgY2xhc3M9XFxcIlwiICsgKHRoaXMuY2xzUG9zKSArIFwiLWlubmVyXFxcIj5cIiArICh0aGlzLnRpdGxlKSArIFwiPC9kaXY+IDwvZGl2PlwiKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvbih0aGlzLnRvb2x0aXAsICd0b2dnbGVkJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGVkID0gdGhpcyQxLmlzVG9nZ2xlZCh0aGlzJDEudG9vbHRpcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXR0cih0aGlzJDEuJGVsLCAnYXJpYS1leHBhbmRlZCcsIHRvZ2dsZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9uQXQodGhpcyQxLnRvb2x0aXAsIHRoaXMkMS4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5vcmlnaW4gPSB0aGlzJDEuZ2V0QXhpcygpID09PSAneSdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChmbGlwUG9zaXRpb24odGhpcyQxLmRpcikpICsgXCItXCIgKyAodGhpcyQxLmFsaWduKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKCh0aGlzJDEuYWxpZ24pICsgXCItXCIgKyAoZmxpcFBvc2l0aW9uKHRoaXMkMS5kaXIpKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy50b29sdGlwLCB0cnVlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyhhY3RpdmVzLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogKCBvYmokMSA9IHtcblxuICAgICAgICAgICAgZm9jdXM6ICdzaG93JyxcbiAgICAgICAgICAgIGJsdXI6ICdoaWRlJ1xuXG4gICAgICAgIH0sIG9iaiQxWyhwb2ludGVyRW50ZXIgKyBcIiBcIiArIHBvaW50ZXJMZWF2ZSldID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUudHlwZSA9PT0gcG9pbnRlckVudGVyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH0sIG9iaiQxW3BvaW50ZXJEb3duXSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZSgpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnNob3coKTtcbiAgICAgICAgICAgIH0sIG9iaiQxIClcblxuICAgIH07XG5cbiAgICB2YXIgdXBsb2FkID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhbGxvdzogU3RyaW5nLFxuICAgICAgICAgICAgY2xzRHJhZ292ZXI6IFN0cmluZyxcbiAgICAgICAgICAgIGNvbmN1cnJlbnQ6IE51bWJlcixcbiAgICAgICAgICAgIG1heFNpemU6IE51bWJlcixcbiAgICAgICAgICAgIG1ldGhvZDogU3RyaW5nLFxuICAgICAgICAgICAgbWltZTogU3RyaW5nLFxuICAgICAgICAgICAgbXNnSW52YWxpZE1pbWU6IFN0cmluZyxcbiAgICAgICAgICAgIG1zZ0ludmFsaWROYW1lOiBTdHJpbmcsXG4gICAgICAgICAgICBtc2dJbnZhbGlkU2l6ZTogU3RyaW5nLFxuICAgICAgICAgICAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgICAgICBwYXJhbXM6IE9iamVjdCxcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHVybDogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYWxsb3c6IGZhbHNlLFxuICAgICAgICAgICAgY2xzRHJhZ292ZXI6ICd1ay1kcmFnb3ZlcicsXG4gICAgICAgICAgICBjb25jdXJyZW50OiAxLFxuICAgICAgICAgICAgbWF4U2l6ZTogMCxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgbWltZTogZmFsc2UsXG4gICAgICAgICAgICBtc2dJbnZhbGlkTWltZTogJ0ludmFsaWQgRmlsZSBUeXBlOiAlcycsXG4gICAgICAgICAgICBtc2dJbnZhbGlkTmFtZTogJ0ludmFsaWQgRmlsZSBOYW1lOiAlcycsXG4gICAgICAgICAgICBtc2dJbnZhbGlkU2l6ZTogJ0ludmFsaWQgRmlsZSBTaXplOiAlcyBLaWxvYnl0ZXMgTWF4JyxcbiAgICAgICAgICAgIG11bHRpcGxlOiBmYWxzZSxcbiAgICAgICAgICAgIG5hbWU6ICdmaWxlc1tdJyxcbiAgICAgICAgICAgIHBhcmFtczoge30sXG4gICAgICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICBhYm9ydDogbm9vcCxcbiAgICAgICAgICAgIGJlZm9yZUFsbDogbm9vcCxcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IG5vb3AsXG4gICAgICAgICAgICBjb21wbGV0ZTogbm9vcCxcbiAgICAgICAgICAgIGNvbXBsZXRlQWxsOiBub29wLFxuICAgICAgICAgICAgZXJyb3I6IG5vb3AsXG4gICAgICAgICAgICBmYWlsOiBub29wLFxuICAgICAgICAgICAgbG9hZDogbm9vcCxcbiAgICAgICAgICAgIGxvYWRFbmQ6IG5vb3AsXG4gICAgICAgICAgICBsb2FkU3RhcnQ6IG5vb3AsXG4gICAgICAgICAgICBwcm9ncmVzczogbm9vcFxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czoge1xuXG4gICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcyhlLnRhcmdldCwgJ2lucHV0W3R5cGU9XCJmaWxlXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5maWxlcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZChlLnRhcmdldC5maWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS50YXJnZXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRyb3A6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzdG9wKGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZmVyID0gZS5kYXRhVHJhbnNmZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZmVyIHx8ICF0cmFuc2Zlci5maWxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJhZ292ZXIpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWQodHJhbnNmZXIuZmlsZXMpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJhZ2VudGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRyYWdvdmVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcmFnb3Zlcik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcmFnbGVhdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzdG9wKGUpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0RyYWdvdmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdXBsb2FkOiBmdW5jdGlvbihmaWxlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwbG9hZCcsIFtmaWxlc10pO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heFNpemUgJiYgdGhpcy5tYXhTaXplICogMTAwMCA8IGZpbGVzW2ldLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWRTaXplLnJlcGxhY2UoJyVzJywgdGhpcy5tYXhTaXplKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbGxvdyAmJiAhbWF0Y2gkMSh0aGlzLmFsbG93LCBmaWxlc1tpXS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKHRoaXMubXNnSW52YWxpZE5hbWUucmVwbGFjZSgnJXMnLCB0aGlzLmFsbG93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5taW1lICYmICFtYXRjaCQxKHRoaXMubWltZSwgZmlsZXNbaV0udHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWRNaW1lLnJlcGxhY2UoJyVzJywgdGhpcy5taW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IFtmaWxlc1swXV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVBbGwodGhpcywgZmlsZXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNodW5rcyA9IGNodW5rKGZpbGVzLCB0aGlzLmNvbmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHZhciB1cGxvYWQgPSBmdW5jdGlvbiAoZmlsZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIGRhdGEuYXBwZW5kKHRoaXMkMS5uYW1lLCBmaWxlKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMkMS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXBwZW5kKGtleSwgdGhpcyQxLnBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFqYXgodGhpcyQxLnVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogdGhpcyQxLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogdGhpcyQxLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoZW52KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gZW52LnhocjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIudXBsb2FkICYmIG9uKHhoci51cGxvYWQsICdwcm9ncmVzcycsIHRoaXMkMS5wcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydsb2FkU3RhcnQnLCAnbG9hZCcsICdsb2FkRW5kJywgJ2Fib3J0J10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gb24oeGhyLCB0eXBlLnRvTG93ZXJDYXNlKCksIHRoaXMkMVt0eXBlXSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLmJlZm9yZVNlbmQoZW52KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHhocikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLmNvbXBsZXRlKHhocik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWQoY2h1bmtzLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5jb21wbGV0ZUFsbCh4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzJDEuZXJyb3IoZSk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB1cGxvYWQoY2h1bmtzLnNoaWZ0KCkpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hdGNoJDEocGF0dGVybiwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aC5tYXRjaChuZXcgUmVnRXhwKChcIl5cIiArIChwYXR0ZXJuLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKS5yZXBsYWNlKC9cXCpcXCovZywgJyhcXFxcL1teXFxcXC9dKykqJykucmVwbGFjZSgvXFwqL2csICdbXlxcXFwvXSsnKS5yZXBsYWNlKC8oKD8hXFxcXCkpXFw/L2csICckMS4nKSkgKyBcIiRcIiksICdpJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNodW5rKGZpbGVzLCBzaXplKSB7XG4gICAgICAgIHZhciBjaHVua3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkgKz0gc2l6ZSkge1xuICAgICAgICAgICAgdmFyIGNodW5rID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIGNodW5rLnB1c2goZmlsZXNbaSArIGpdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2h1bmtzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3AoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudHMkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgICBDb3VudGRvd246IGNvdW50ZG93bixcbiAgICAgICAgRmlsdGVyOiBmaWx0ZXIkMSxcbiAgICAgICAgTGlnaHRib3g6IGxpZ2h0Ym94LFxuICAgICAgICBMaWdodGJveFBhbmVsOiBMaWdodGJveFBhbmVsLFxuICAgICAgICBOb3RpZmljYXRpb246IG5vdGlmaWNhdGlvbixcbiAgICAgICAgUGFyYWxsYXg6IHBhcmFsbGF4LFxuICAgICAgICBTbGlkZXI6IHNsaWRlcixcbiAgICAgICAgU2xpZGVyUGFyYWxsYXg6IHNsaWRlclBhcmFsbGF4LFxuICAgICAgICBTbGlkZXNob3c6IHNsaWRlc2hvdyxcbiAgICAgICAgU2xpZGVzaG93UGFyYWxsYXg6IHNsaWRlclBhcmFsbGF4LFxuICAgICAgICBTb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgIFRvb2x0aXA6IHRvb2x0aXAsXG4gICAgICAgIFVwbG9hZDogdXBsb2FkXG4gICAgfSk7XG5cbiAgICBlYWNoKGNvbXBvbmVudHMkMSwgZnVuY3Rpb24gKGNvbXBvbmVudCwgbmFtZSkgeyByZXR1cm4gVUlraXQuY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCk7IH1cbiAgICApO1xuXG4gICAgcmV0dXJuIFVJa2l0O1xuXG59KSkpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsIm9ialByb3RvdHlwZSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaGFzT3duIiwib2JqIiwia2V5IiwiY2FsbCIsImh5cGhlbmF0ZUNhY2hlIiwiaHlwaGVuYXRlUmUiLCJoeXBoZW5hdGUiLCJzdHIiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJjYW1lbGl6ZVJlIiwiY2FtZWxpemUiLCJ0b1VwcGVyIiwiXyIsImMiLCJ0b1VwcGVyQ2FzZSIsInVjZmlyc3QiLCJsZW5ndGgiLCJjaGFyQXQiLCJzbGljZSIsInN0clByb3RvdHlwZSIsIlN0cmluZyIsInN0YXJ0c1dpdGhGbiIsInN0YXJ0c1dpdGgiLCJzZWFyY2giLCJ0aGlzIiwibGFzdEluZGV4T2YiLCJlbmRzV2l0aEZuIiwiZW5kc1dpdGgiLCJzdWJzdHIiLCJhcnJQcm90b3R5cGUiLCJBcnJheSIsImluY2x1ZGVzRm4iLCJpIiwiaW5kZXhPZiIsImluY2x1ZGVzU3RyIiwiaW5jbHVkZXMiLCJpbmNsdWRlc0FycmF5IiwiaXNTdHJpbmciLCJmaW5kSW5kZXhGbiIsImZpbmRJbmRleCIsInByZWRpY2F0ZSIsImFyZ3VtZW50cyQxIiwiYXJndW1lbnRzIiwiYXJyYXkiLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0IiwidG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiaXNXaW5kb3ciLCJ3aW5kb3ciLCJpc0RvY3VtZW50Iiwibm9kZVR5cGUiLCJpc0pRdWVyeSIsImpxdWVyeSIsImlzTm9kZSIsImlzRWxlbWVudCIsImlzTm9kZUNvbGxlY3Rpb24iLCJtYXRjaCIsImlzQm9vbGVhbiIsInZhbHVlIiwiaXNOdW1iZXIiLCJpc051bWVyaWMiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0VtcHR5Iiwia2V5cyIsImlzVW5kZWZpbmVkIiwidG9Cb29sZWFuIiwidG9OdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJ0b0Zsb2F0IiwidG9Ob2RlIiwiZWxlbWVudCIsInRvTm9kZXMiLCJtYXAiLCJmaWx0ZXIiLCJCb29sZWFuIiwidG9BcnJheSIsInRvV2luZG93Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwidG9MaXN0Iiwic3BsaXQiLCJ0cmltIiwidG9NcyIsInRpbWUiLCJpc0VxdWFsIiwib3RoZXIiLCJlYWNoIiwidmFsIiwic3dhcCIsImEiLCJiIiwiUmVnRXhwIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJncyIsImxlbiIsInNvdXJjZSIsImxhc3QiLCJjYiIsInNvcnRCeSIsInByb3AiLCJzb3J0IiwicmVmIiwicmVmJDEiLCJwcm9wQSIsInByb3BCIiwidW5pcXVlQnkiLCJzZWVuIiwiU2V0IiwiY2hlY2siLCJoYXMiLCJhZGQiLCJjbGFtcCIsIm1pbiIsIm1heCIsIk1hdGgiLCJub29wIiwiaW50ZXJzZWN0UmVjdCIsInIxIiwicjIiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJwb2ludEluUmVjdCIsInBvaW50IiwicmVjdCIsIngiLCJ5IiwiRGltZW5zaW9ucyIsInJhdGlvIiwiZGltZW5zaW9ucyIsImFQcm9wIiwicm91bmQiLCJjb250YWluIiwibWF4RGltZW5zaW9ucyIsInRoaXMkMSIsImNvdmVyIiwiYXR0ciIsIm5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJmb3JFYWNoIiwicmVtb3ZlQXR0ciIsInNldEF0dHJpYnV0ZSIsImhhc0F0dHIiLCJzb21lIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGF0YSIsImF0dHJpYnV0ZSIsImF0dHJzIiwiaW5Ccm93c2VyIiwiaXNJRSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc1J0bCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzVG91Y2hFdmVudHMiLCJoYXNQb2ludGVyRXZlbnRzIiwiUG9pbnRlckV2ZW50IiwiaGFzVG91Y2giLCJEb2N1bWVudFRvdWNoIiwibWF4VG91Y2hQb2ludHMiLCJwb2ludGVyRG93biIsInBvaW50ZXJNb3ZlIiwicG9pbnRlclVwIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwicG9pbnRlckNhbmNlbCIsInF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZmluZCIsImdldENvbnRleHQiLCJxdWVyeUFsbCIsIm5vZGVzIiwiZmluZEFsbCIsImlzQ29udGV4dFNlbGVjdG9yIiwiX3F1ZXJ5IiwicXVlcnlGbiIsInJlbW92ZXMiLCJjb250ZXh0U2FuaXRpemVSZSIsInNlbGVjdG9yUmUiLCJzcGxpdFNlbGVjdG9yIiwiY3R4Iiwic2VsZWN0b3JzIiwiY2xvc2VzdCIsInBhcmVudCIsImpvaW4iLCJzZWxlY3RvcnMkMSIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibWF0Y2hlcyIsImlkIiwiRGF0ZSIsIm5vdyIsInB1c2giLCJlc2NhcGUiLCJlIiwicmVtb3ZlIiwiY29udGV4dFNlbGVjdG9yUmUiLCJlbFByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXNGbiIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiY2xvc2VzdEZuIiwiYW5jZXN0b3IiLCJwYXJlbnROb2RlIiwiZXNjYXBlRm4iLCJDU1MiLCJjc3MiLCJ2b2lkRWxlbWVudHMiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1lbnVpdGVtIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJpc1ZvaWRFbGVtZW50IiwidGFnTmFtZSIsImlzVmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q2xpZW50UmVjdHMiLCJzZWxJbnB1dCIsImlzSW5wdXQiLCJ3aXRoaW4iLCJjb250YWlucyIsInBhcmVudHMiLCJlbGVtZW50cyIsImNoaWxkcmVuIiwib24iLCJnZXRBcmdzIiwidGFyZ2V0cyIsInR5cGUiLCJsaXN0ZW5lciIsInVzZUNhcHR1cmUiLCJ0b0V2ZW50VGFyZ2V0cyIsImRldGFpbCIsInNlbGYiLCJzZWxmRmlsdGVyIiwiZGVsZWdhdGUiLCJ1c2VDYXB0dXJlRmlsdGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiY29uZGl0aW9uIiwicmVzdWx0IiwidHJpZ2dlciIsImV2ZW50IiwicmVkdWNlIiwibm90Q2FuY2VsZWQiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImluaXRDdXN0b21FdmVudCIsInNwbGljZSIsImRlbGVnYXRlcyIsImN1cnJlbnQiLCJyZXZlcnNlIiwiYXBwbHkiLCJjb25jYXQiLCJjdXJyZW50VGFyZ2V0Iiwib3B0aW9ucyIsImNhcHR1cmUiLCJpc0V2ZW50VGFyZ2V0IiwidG9FdmVudFRhcmdldCIsImlzVG91Y2giLCJwb2ludGVyVHlwZSIsInRvdWNoZXMiLCJnZXRFdmVudFBvcyIsImNoYW5nZWRUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJQcm9taXNlIiwiUHJvbWlzZUZuIiwiRGVmZXJyZWQiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImFzeW5jIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dCIsImV4ZWN1dG9yIiwic3RhdGUiLCJ1bmRlZmluZWQiLCJkZWZlcnJlZCIsInIiLCJhbGwiLCJpdGVyYWJsZSIsImNvdW50IiwicmVzb2x2ZXIiLCJ0aGVuIiwicmFjZSIsInAiLCJhamF4IiwidXJsIiwiZW52IiwibWV0aG9kIiwiaGVhZGVycyIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYmVmb3JlU2VuZCIsInJlc3BvbnNlVHlwZSIsImhlYWRlciIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic3RhdHVzIiwicmVzcG9uc2UiLCJjb3B5WGhyIiwiSlNPTiIsInBhcnNlIiwiRXJyb3IiLCJzdGF0dXNUZXh0Iiwic2VuZCIsImdldEltYWdlIiwic3JjIiwic3Jjc2V0Iiwic2l6ZXMiLCJJbWFnZSIsIm9uZXJyb3IiLCJvbmxvYWQiLCJyZWFkeSIsImZuIiwicmVhZHlTdGF0ZSIsInVuYmluZCIsImluZGV4IiwiZ2V0SW5kZXgiLCJmaW5pdGUiLCJlbXB0eSIsIiQiLCJpbm5lckhUTUwiLCJodG1sIiwiYXBwZW5kIiwiaGFzQ2hpbGROb2RlcyIsImluc2VydE5vZGVzIiwiYXBwZW5kQ2hpbGQiLCJiZWZvcmUiLCJpbnNlcnRCZWZvcmUiLCJhZnRlciIsIm5leHRTaWJsaW5nIiwiZnJhZ21lbnQiLCJyZW1vdmVDaGlsZCIsIndyYXBBbGwiLCJzdHJ1Y3R1cmUiLCJmaXJzdENoaWxkIiwid3JhcElubmVyIiwiY2hpbGROb2RlcyIsInVud3JhcCIsIlR5cGVFcnJvciIsImNhbGxlZCIsIm5vdGlmeSIsInJlYXNvbiIsInNoaWZ0Iiwib25SZXNvbHZlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsImZyYWdtZW50UmUiLCJzaW5nbGVUYWdSZSIsImV4ZWMiLCJjcmVhdGVFbGVtZW50IiwiY29udGFpbmVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwidGV4dENvbnRlbnQiLCJub2RlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiaXNIdG1sIiwiJCQiLCJhZGRDbGFzcyIsImFwcGx5JDEiLCJyZW1vdmVDbGFzcyIsInJlbW92ZUNsYXNzZXMiLCJjbHMiLCJyZXBsYWNlQ2xhc3MiLCJoYXNDbGFzcyIsImNsYXNzTGlzdCIsInRvZ2dsZUNsYXNzIiwiZm9yY2UiLCJnZXRBcmdzJDEiLCJwb3AiLCJzdXBwb3J0cyIsIkZvcmNlIiwidG9nZ2xlIiwiTXVsdGlwbGUiLCJhcmciLCJnZXQiLCJfbXVsdGlwbGUiLCJfZm9yY2UiLCJjc3NOdW1iZXIiLCJwcm9wZXJ0eSIsInByb3BOYW1lIiwiZ2V0U3R5bGUiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVzIiwiZ2V0U3R5bGVzIiwicHJvcHMiLCJwc2V1ZG9FbHQiLCJnZXRDb21wdXRlZFN0eWxlIiwidmFycyIsImdldENzc1ZhciIsImRvY0VsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1Byb3BzIiwicmV0IiwicHJlZml4ZWROYW1lIiwiY3NzUHJlZml4ZXMiLCJ2ZW5kb3JQcm9wTmFtZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsInRpbWluZyIsInRpbWVyIiwiY2xlYXJUaW1lb3V0IiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiVHJhbnNpdGlvbiIsInN0YXJ0Iiwic3RvcCIsImNhbmNlbCIsImluUHJvZ3Jlc3MiLCJhbmltYXRlIiwiYW5pbWF0aW9uIiwib3JpZ2luIiwib3V0IiwiYW5pbWF0aW9uUHJlZml4IiwiQW5pbWF0aW9uIiwiaW4iLCJkaXJzIiwid2lkdGgiLCJoZWlnaHQiLCJwb3NpdGlvbkF0IiwiZWxBdHRhY2giLCJ0YXJnZXRBdHRhY2giLCJlbE9mZnNldCIsInRhcmdldE9mZnNldCIsImZsaXAiLCJib3VuZGFyeSIsImdldFBvcyIsImZsaXBwZWQiLCJkaW0iLCJnZXREaW1lbnNpb25zIiwidGFyZ2V0RGltIiwicG9zaXRpb24iLCJtb3ZlVG8iLCJnZXRPZmZzZXRzIiwiYm91bmRhcmllcyIsInVuc2hpZnQiLCJkaXIiLCJhbGlnbiIsImFsaWduRmxpcCIsImVsZW1PZmZzZXQiLCJjZW50ZXJPZmZzZXQiLCJjZW50ZXJUYXJnZXRPZmZzZXQiLCJuZXdWYWwiLCJ0b0ZpeGVkIiwiZWwiLCJvZmZzZXQiLCJjb29yZGluYXRlcyIsImN1cnJlbnRPZmZzZXQiLCJwb3MiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwic2V0UHJvcGVydHkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRSZWN0Iiwib2Zmc2V0UGFyZW50IiwiZWxlbWVudE9mZnNldCIsInBhcmVudE9mZnNldCIsIm9mZnNldFBvc2l0aW9uIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIndpbiIsImRpbWVuc2lvbiIsImRvYyIsImJveE1vZGVsQWRqdXN0Iiwic2l6aW5nIiwiYXR0YWNoIiwiZmFjdG9yIiwib2Zmc2V0cyIsImZsaXBQb3NpdGlvbiIsInRvUHgiLCJwZXJjZW50IiwiZmFzdGRvbSIsInJlYWRzIiwid3JpdGVzIiwicmVhZCIsInRhc2siLCJzY2hlZHVsZUZsdXNoIiwid3JpdGUiLCJjbGVhciIsInJlbW92ZSQxIiwiZmx1c2giLCJyZWN1cnNpb24iLCJydW5UYXNrcyIsInNjaGVkdWxlZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRhc2tzIiwiaXRlbSIsIk1vdXNlVHJhY2tlciIsInBvc2l0aW9ucyIsImluaXQiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1vdmVzVG8iLCJwcmV2UG9zaXRpb24iLCJwYXRoIiwiZGlhZ29uYWwiLCJpbnRlcnNlY3Rpb24iLCJyZWZfMCIsIngxIiwieTEiLCJyZWZfMSIsIngyIiwieTIiLCJyZWYkMV8wIiwieDMiLCJ5MyIsInJlZiQxXzEiLCJ4NCIsInk0IiwiZGVub21pbmF0b3IiLCJ1YSIsImludGVyc2VjdCIsInN0cmF0cyIsIm1lcmdlRm5EYXRhIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImNvbXB1dGVkIiwiY29uY2F0U3RyYXQiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJjaGlsZCIsImV4dGVuZHMiLCJtaXhpbnMiLCJsIiwibWVyZ2VLZXkiLCJrZXkkMSIsInBhcnNlT3B0aW9ucyIsIm9wdGlvbiIsInBsYXkiLCJpc0lGcmFtZSIsImZ1bmMiLCJpc0hUTUw1IiwicGF1c2UiLCJtdXRlIiwibXV0ZWQiLCJpc1lvdXR1YmUiLCJpc1ZpbWVvIiwiY21kIiwicG9sbGVyIiwieW91dHViZSIsInZpbWVvIiwiY291bnRlciIsInBvc3QiLCJwbGF5ZXJfaWQiLCJlbmFibGVBcGkiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJzdHJpbmdpZnkiLCJldmVudHMiLCJjcmVhdGVkIiwiYmVmb3JlQ29ubmVjdCIsImNvbm5lY3RlZCIsImJlZm9yZURpc2Nvbm5lY3QiLCJkaXNjb25uZWN0ZWQiLCJkZXN0cm95IiwidXBkYXRlIiwibWV0aG9kcyIsImlzSW5WaWV3Iiwib3ZlcmZsb3dQYXJlbnRzIiwiZXZlcnkiLCJjbGllbnQiLCJnZXRWaWV3cG9ydCIsInNjcm9sbFRvcCIsImdldFNjcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsIm9mZnNldEJ5IiwibG9vcCIsImRpc3QiLCJzY3JvbGxFbGVtZW50Iiwic2Nyb2xsIiwiY2VpbCIsImFicyIsInBvdyIsInN0ZXAiLCJrIiwiY29zIiwiUEkiLCJzY3JvbGxlZE92ZXIiLCJoZWlnaHRPZmZzZXQiLCJzY3JvbGxQYXJlbnRzIiwic2Nyb2xsSGVpZ2h0Iiwidmlld3BvcnRIZWlnaHQiLCJ2aWV3cG9ydFRvcCIsInZpZXdwb3J0RGlzdCIsIm92ZXJmbG93UmUiLCJzY3JvbGxFbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3MiLCJjYWxsYmFjayIsInJvb3RNYXJnaW4iLCJwZW5kaW5nIiwicmVjb3JkcyIsInRha2VSZWNvcmRzIiwicGFzc2l2ZSIsImVudHJ5IiwiaW5WaWV3IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImdldENvbXBvbmVudE5hbWUiLCJVSWtpdCIsIl9pbml0IiwidXRpbCIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInByZXBlbmQiLCJwcmVmaXgiLCJ2ZXJzaW9uIiwiREFUQSIsIl9jb25uZWN0ZWQiLCJfY2FsbFVwZGF0ZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZCIsIm1peGluIiwiY29tcG9uZW50IiwiZXh0ZW5kIiwiU3ViIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImJvZHkiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsImdsb2JhbEFQSSIsIl9jYWxsSG9vayIsImhvb2siLCJoYW5kbGVycyIsIiRvcHRpb25zIiwiaGFuZGxlciIsIl9jYWxsQ29ubmVjdGVkIiwiX2RhdGEiLCJfY29tcHV0ZWRzIiwiX2ZyYW1lcyIsIl9pbml0UHJvcHMiLCJfaW5pdEV2ZW50cyIsIl9pbml0T2JzZXJ2ZXIiLCJfY2FsbERpc2Nvbm5lY3RlZCIsIl9vYnNlcnZlciIsIl91bmJpbmRFdmVudHMiLCJfY2FsbFdhdGNoZXMiLCJ1cGRhdGVzIiwiX3dhdGNoIiwiaW5pdGl0YWwiLCJoYXNQcmV2Iiwid2F0Y2giLCJpbW1lZGlhdGUiLCJob29rc0FQSSIsInVpZCIsImdldFByb3BzIiwib3B0cyIsImRhdGEkMSIsImNvZXJjZSIsInByb3AkMSIsInJlZ2lzdGVyQ29tcHV0ZWQiLCJlbnVtZXJhYmxlIiwiJHByb3BzIiwiJGVsIiwicmVnaXN0ZXJFdmVudCIsIl9ldmVudHMiLCJiaW5kIiwibm90SW4iLCJhcnIiLCJub3JtYWxpemVEYXRhIiwiX3VpZCIsIl9pbml0RGF0YSIsIl9pbml0TWV0aG9kcyIsIl9pbml0Q29tcHV0ZWRzIiwiJG1vdW50IiwiJG5hbWUiLCJleGNsdWRlIiwiTXV0YXRpb25PYnNlcnZlciIsImF0dHJpYnV0ZU5hbWUiLCIkcmVzZXQiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwic3RhdGVBUEkiLCJjb21wb25lbnRzIiwiYXJnc0FycmF5IiwiZnVuY3Rpb25hbCIsImluc3RhbmNlIiwiZ2V0Q29tcG9uZW50IiwiJGRlc3Ryb3kiLCJvcHQiLCJpbnN0YWxsIiwiX2luaXRpYWxpemVkIiwiZ2V0Q29tcG9uZW50cyIsImNvbm5lY3QiLCJuYW1lJDEiLCJjb21wb25lbnRBUEkiLCIkY3JlYXRlIiwicmVtb3ZlRWwiLCIkZW1pdCIsIiR1cGRhdGUiLCIkZ2V0Q29tcG9uZW50IiwibmFtZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiJGNvbnRhaW5lciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImluc3RhbmNlQVBJIiwiQ2xhc3MiLCJUb2dnbGFibGUiLCJpbml0UHJvcHMiLCJvdmVyZmxvdyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiaGlkZVByb3BzIiwiaGFzQW5pbWF0aW9uIiwiaGFzVHJhbnNpdGlvbiIsInRvZ2dsZUVsZW1lbnQiLCJzaG93IiwiX3RvZ2dsZUVsZW1lbnQiLCJpc1RvZ2dsZWQiLCJ1cGRhdGVBcmlhIiwiY21wIiwidG9nZ2xlSGVpZ2h0IiwiX3RvZ2dsZSIsInRvZ2dsZWQiLCJjaGFuZ2VkIiwiaGlkZGVuIiwiZm9jdXMiLCJibHVyIiwiaW5uZXIiLCJsYXN0RWxlbWVudENoaWxkIiwiY3VycmVudEhlaWdodCIsImVuZEhlaWdodCIsIkFjY29yZGlvbiIsImFjdGl2ZSIsImNvbGxhcHNpYmxlIiwibXVsdGlwbGUiLCJjb250ZW50IiwiY2xzT3BlbiIsIml0ZW1zIiwiaGlkZSIsInByZXZlbnREZWZhdWx0IiwiYWN0aXZlSXRlbXMiLCJfd3JhcHBlciIsImFsZXJ0IiwiY2xvc2UiLCJzZWxDbG9zZSIsIm9wYWNpdHkiLCJWaWRlbyIsImF1dG9tdXRlIiwiYXV0b3BsYXkiLCJwcmVsb2FkIiwidmlzaWJsZSIsImdldFBvc2l0aW9uZWRQYXJlbnQiLCJuYXR1cmFsV2lkdGgiLCJ2aWRlb1dpZHRoIiwiY2xpZW50V2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwidmlkZW9IZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJQb3NpdGlvbiIsImNsc1BvcyIsIm9mZnNldCQxIiwiYXhpcyIsImdldEF4aXMiLCJkcm9wIiwibW9kZSIsImJvdW5kYXJ5QWxpZ24iLCJkZWxheVNob3ciLCJkZWxheUhpZGUiLCJjbHNEcm9wIiwidHJhY2tlciIsImlzQWN0aXZlIiwiZGVmYXVsdFByZXZlbnRlZCIsImhhc2giLCJjbGVhclRpbWVycyIsInJlbGF0ZWRUYXJnZXQiLCJuZXdUYXJnZXQiLCJrZXlDb2RlIiwiZGVsYXkiLCJpc0RlbGF5aW5nIiwic2hvd1RpbWVyIiwiaGlkZVRpbWVyIiwiYWxpZ25UbyIsImZvcm1DdXN0b20iLCJmaWxlcyIsInNlbGVjdGVkIiwiZ2lmIiwiaW52aWV3IiwiTWFyZ2luIiwibWFyZ2luIiwiZmlyc3RDb2x1bW4iLCJyb3dzIiwiZ2V0Um93cyIsImNvbHVtbnMiLCJnZXRDb2x1bW5zIiwicm93Iiwic29ydEJ5JDEiLCJjb2x1bW4iLCJzdGFydFByb3AiLCJlbmRQcm9wIiwic29ydGVkIiwiZ2V0T2Zmc2V0IiwiaiIsInN0YXJ0RGltIiwiZ3JpZCIsIm1hc29ucnkiLCJwYXJhbGxheCIsImNsc1N0YWNrIiwidHJhbnNpdGlvbkluUHJvZ3Jlc3MiLCJ0cmFuc2xhdGVzIiwiY29sdW1uSGVpZ2h0cyIsInN1bSIsImdldENvbHVtbkhlaWdodHMiLCJnZXRNYXJnaW5Ub3AiLCJlbEhlaWdodCIsInJvd0hlaWdodHMiLCJnZXRUcmFuc2xhdGVzIiwicGFkZGluZyIsIm5ld1BhZGRpbmciLCJoZ3QiLCJoZWlnaHQkMSIsInNjcm9sbGVkIiwiRmxleEJ1ZyIsInNlbE1pbkhlaWdodCIsImZvcmNlSGVpZ2h0Iiwib3JkZXIiLCJoZWlnaHRNYXRjaCIsImhlaWdodHMiLCJnZXRIZWlnaHRzIiwiaGFzTWluSGVpZ2h0IiwibWluSGVpZ2h0IiwiaGFzU2hydW5rIiwiaGVpZ2h0Vmlld3BvcnQiLCJleHBhbmQiLCJvZmZzZXRCb3R0b20iLCJib3giLCJkYXRhc2V0IiwiaGVpZ2h0RXhwYW5kIiwiU1ZHIiwiaWNvbiIsImNsYXNzIiwic3Ryb2tlQW5pbWF0aW9uIiwiZm9jdXNhYmxlIiwiaW5jbHVkZSIsInN2ZyIsImdldFN2ZyIsImFwcGx5QXR0cmlidXRlcyIsInN2Z0VsIiwicm9vdCIsImVxdWFscyIsImluc2VydFNWRyIsImdldE1heFBhdGhMZW5ndGgiLCJzdmdzIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3ltYm9scyIsInN5bWJvbFJlIiwibGFzdEluZGV4IiwicGFyc2VTeW1ib2xzIiwicGFyc2VTVkciLCJ2aWV3Qm94Iiwic3Ryb2tlIiwiZ2V0VG90YWxMZW5ndGgiLCJpY29ucyIsInNwaW5uZXIiLCJ0b3RvcCIsIm1hcmtlciIsIkljb24iLCJhZGRlZCIsInBhcnNlZCIsImlzSWNvbiIsImFwcGx5UnRsIiwiY2xvbmVOb2RlIiwiZ2V0SWNvbiIsIkljb25Db21wb25lbnQiLCJTbGlkZW5hdiIsIlNlYXJjaCIsIkNsb3NlIiwiU3Bpbm5lciIsImRhdGFTcmMiLCJkYXRhU3Jjc2V0IiwiY2FjaGVLZXkiLCJkYXRhV2lkdGgiLCJkYXRhSGVpZ2h0IiwiZGF0YVNpemVzIiwiaXNJbWciLCJzdG9yYWdlIiwic2V0U3JjQXR0cnMiLCJzaXplc1RvUGl4ZWwiLCJnZXRQbGFjZWhvbGRlckltYWdlIiwib2JzZXJ2ZXIiLCJsb2FkIiwiaW1hZ2UiLCJjdXJyZW50U3JjIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJnU2l6ZSIsInNyY1NpemUiLCJkZXNjcmlwdG9ycyIsInNyY1NldFJlIiwic2l6ZSIsImVudHJpZXMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJzaXplc1JlIiwibWF0Y2hNZWRpYSIsInN1YnN0cmluZyIsInNpemVSZSIsImFkZGl0aW9uUmUiLCJzZXNzaW9uU3RvcmFnZSIsIk1lZGlhIiwibWVkaWEiLCJ0b01lZGlhIiwibGVhZGVyIiwiZmlsbCIsImNsc1dyYXBwZXIiLCJjbHNIaWRlIiwiYXR0ckZpbGwiLCJ3cmFwcGVyIiwiZmxvb3IiLCJDb250YWluZXIiLCJhY3RpdmUkMSIsIk1vZGFsIiwic2VsUGFuZWwiLCJlc2NDbG9zZSIsImJnQ2xvc2UiLCJzdGFjayIsIm92ZXJsYXkiLCJwYW5lbCIsInRyYW5zaXRpb25FbGVtZW50IiwibW9kYWwiLCJjbHNQYWdlIiwiYW5pbWF0ZSQxIiwiX3JlamVjdCIsIm9wZW5EaWFsb2ciLCJ0bXBsIiwiaGlkZUZuIiwic3VibWl0Rm4iLCJsYWJlbHMiLCJkaWFsb2ciLCJyZXNvbHZlZCIsIm1lc3NhZ2UiLCJvayIsImNvbmZpcm0iLCJwcm9tcHQiLCJuYXYiLCJuYXZiYXIiLCJkcm9wZG93biIsImRyb3BiYXIiLCJkcm9wYmFyTW9kZSIsImRyb3BiYXJBbmNob3IiLCJfZHJvcGJhciIsImRyb3Bkb3ducyIsImdldERyb3Bkb3duIiwiZ2V0QWN0aXZlIiwidHJhbnNpdGlvblRvIiwibmV3SGVpZ2h0Iiwib2xkSGVpZ2h0IiwiY2xpcCIsIm9mZmNhbnZhcyIsImNsc0NvbnRhaW5lciIsImNsc0ZsaXAiLCJjbHNDb250YWluZXJBbmltYXRpb24iLCJjbHNTaWRlYmFyQW5pbWF0aW9uIiwiY2xzTW9kZSIsImNsc092ZXJsYXkiLCJ0YXJnZXRUb3VjaGVzIiwiZ2V0Vmlld3BvcnQkMSIsInZpZXdwb3J0IiwiaGVhZCIsIm92ZXJmbG93QXV0byIsInNlbENvbnRhaW5lciIsInNlbENvbnRlbnQiLCJyZXNwb25zaXZlIiwic2Nyb2xsVG8iLCJjbGljayIsInNjcm9sbHNweSIsInJlcGVhdCIsImluVmlld0NsYXNzIiwicXVldWVkIiwic2Nyb2xsc3B5TmF2IiwibGlua3MiLCJzdGlja3kiLCJjbHNBY3RpdmUiLCJjbHNJbmFjdGl2ZSIsImNsc0ZpeGVkIiwiY2xzQmVsb3ciLCJzZWxUYXJnZXQiLCJ3aWR0aEVsZW1lbnQiLCJzaG93T25VcCIsInBsYWNlaG9sZGVyIiwiaXNGaXhlZCIsImxvY2F0aW9uIiwiZWxUb3AiLCJpbmFjdGl2ZSIsInRvcE9mZnNldCIsImJvdHRvbU9mZnNldCIsInBhcnNlUHJvcCIsIm1hcmdpbnMiLCJpbml0VGltZXN0YW1wIiwibGFzdERpciIsImxhc3RTY3JvbGwiLCJpbml0U2Nyb2xsIiwicHJvcE9mZnNldCIsIlN3aXRjaGVyIiwic3dpcGluZyIsImF0dHJJdGVtIiwiY29ubmVjdHMiLCJsaXN0IiwidG9nZ2xlcyIsInRhYiIsImhyZWYiLCJBbGVydCIsIkNvdmVyIiwiRHJvcCIsIkRyb3Bkb3duIiwiRm9ybUN1c3RvbSIsIkdpZiIsIkdyaWQiLCJIZWlnaHRNYXRjaCIsIkhlaWdodFZpZXdwb3J0IiwiSW1nIiwiTGVhZGVyIiwiTmF2IiwiTmF2YmFyIiwiT2ZmY2FudmFzIiwiT3ZlcmZsb3dBdXRvIiwiUmVzcG9uc2l2ZSIsIlNjcm9sbCIsIlNjcm9sbHNweSIsIlNjcm9sbHNweU5hdiIsIlN0aWNreSIsIlN2ZyIsIlRhYiIsIlRvZ2dsZSIsIlNsaWRlbmF2TmV4dCIsIlNsaWRlbmF2UHJldmlvdXMiLCJTZWFyY2hJY29uIiwiTWFya2VyIiwiTmF2YmFyVG9nZ2xlSWNvbiIsIk92ZXJsYXlJY29uIiwiUGFnaW5hdGlvbk5leHQiLCJQYWdpbmF0aW9uUHJldmlvdXMiLCJUb3RvcCIsInN0YXJ0ZWQiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJpJDEiLCJhcHBseUNoaWxkTGlzdCIsImFwcGx5QXR0cmlidXRlIiwiYXBwbHlNdXRhdGlvbiIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjaGFyYWN0ZXJEYXRhIiwiYm9vdCIsImNvdW50ZG93biIsImRhdGUiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInVuaXRzIiwidW5pdCIsInRvdGFsIiwidGltZXNwYW4iLCJkaWdpdHMiLCJkaWdpdCIsIkFuaW1hdGUiLCJhY3Rpb24iLCJzaGVldCIsImluc2VydFJ1bGUiLCJjaGlsZHJlbiQxIiwicHJvcHNGcm9tIiwib2xkU2Nyb2xsWSIsInJlc2V0IiwicHJvcHNUbyIsImdldFBvc2l0aW9uV2l0aE1hcmdpbiIsImZyb20iLCJkaXNwbGF5IiwiekluZGV4IiwicG9pbnRlckV2ZW50cyIsImZpbHRlciQxIiwic2VsQWN0aXZlIiwidXBkYXRlU3RhdGUiLCJhY3RpdmVzIiwib2xkIiwibGlzdEEiLCJsaXN0QiIsInNldFN0YXRlIiwibWVyZ2VTdGF0ZSIsImdldFN0YXRlIiwic3RhdGVGaWx0ZXIiLCJyZWZfc29ydCIsInN0YXRlU29ydCIsInN0YXRlT3JkZXIiLCJnZXRGaWx0ZXIiLCJncm91cCIsIm1hdGNoRmlsdGVyIiwiYXBwbHlTdGF0ZSIsImdldFNlbGVjdG9yIiwibG9jYWxlQ29tcGFyZSIsIm51bWVyaWMiLCJzb3J0SXRlbXMiLCJmaWx0ZXJCeSIsIkFuaW1hdGlvbnMiLCJzbGlkZSIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZSIsInRyYW5zbGF0ZWQiLCJzY2FsZTNkIiwiQW5pbWF0aW9ucyQxIiwiZmFkZSIsInNjYWxlIiwidHJpZ2dlclVwZGF0ZSIsIlNsaWRlckF1dG9wbGF5IiwiYXV0b3BsYXlJbnRlcnZhbCIsInBhdXNlT25Ib3ZlciIsInN0YXJ0QXV0b3BsYXkiLCJzdG9wQXV0b3BsYXkiLCJzbGlkZXMiLCJkcmFnZ2FibGUiLCJTbGlkZXJEcmFnIiwidGhyZXNob2xkIiwicHJldlBvcyIsInNlbFNsaWRlcyIsImJ1dHRvbiIsImRyYWciLCJfdHJhbnNpdGlvbmVyIiwiZ2V0RGlzdGFuY2UiLCJkcmFnZ2luZyIsInByZXZJbmRleCIsIm1vdmUiLCJlbmQiLCJkaXN0YW5jZSIsImRpcyIsIm5leHRJbmRleCIsIl9nZXREaXN0YW5jZSIsIml0ZW1TaG93biIsImVkZ2UiLCJfdHJhbnNsYXRlIiwiX3Nob3ciLCJkaXJDaGFuZ2UiLCJ1c2VyU2VsZWN0IiwiU2xpZGVyIiwic2VsTmF2Iiwic2VsTmF2SXRlbSIsIm5hdkl0ZW1zIiwibWF4SW5kZXgiLCJ1cGRhdGVOYXYiLCJnZXRWYWxpZEluZGV4IiwiY2xzQWN0aXZhdGVkIiwiZWFzaW5nIiwidmVsb2NpdHkiLCJUcmFuc2l0aW9uZXIiLCJ0cmFuc2l0aW9uT3B0aW9ucyIsInNwZWVkVXAiLCJzZWxMaXN0IiwiaXRlbXNob3duIiwicXVldWVJbmRleCIsImZvcndhcmQiLCJnZXREaXJlY3Rpb24iLCJfZ2V0VHJhbnNpdGlvbmVyIiwidHJhbnNpdGlvbmVyIiwiU2xpZGVzaG93IiwibGluZWFyIiwiYmVmb3JlaXRlbXNob3ciLCJpdGVtaGlkZGVuIiwiTGlnaHRib3hQYW5lbCIsImRlbGF5Q29udHJvbHMiLCJ2aWRlb0F1dG9wbGF5IiwidGVtcGxhdGUiLCJzZWxDYXB0aW9uIiwiY2FwdGlvbiIsInNob3dDb250cm9scyIsImhpZGVDb250cm9scyIsImdldEl0ZW0iLCJsb2FkSXRlbSIsImFsdCIsInBvc3RlciIsInNldEl0ZW0iLCJpZnJhbWVBdHRycyIsImZyYW1lYm9yZGVyIiwiYWxsb3ciLCJhbGxvd2Z1bGxzY3JlZW4iLCJjcmVhdGVFbCIsInNldEVycm9yIiwidmlkZW8iLCJjb250cm9scyIsInBsYXlzaW5saW5lIiwiZW5jb2RlVVJJIiwid2l0aENyZWRlbnRpYWxzIiwicmVmX3Jlc3BvbnNlIiwiZ2V0U2xpZGUiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNvbnRyb2xzVGltZXIiLCJ0YWciLCJsaWdodGJveCIsIkxpZ2h0Ym94IiwibGlnaHRib3hQYW5lbCIsInRvSXRlbSIsIm5vdGlmaWNhdGlvbiIsInRpbWVvdXQiLCJjbHNDbG9zZSIsImNsc01zZyIsImNsb3NlQWxsIiwibWFyZ2luUHJvcCIsInN0YXJ0UHJvcHMiLCJyZW1vdmVGbiIsIlBhcmFsbGF4IiwicHJvcGVydGllcyIsImJnUG9zIiwiZGlmZiIsImlzQ29sb3IiLCJpc0Nzc1Byb3AiLCJzdGVwcyIsImdldFVuaXQiLCJjb2xvciIsInBhcnNlQ29sb3IiLCJjb3ZlcnMiLCJkb3duIiwiYmdQcm9wcyIsImJnIiwiYmFja2dyb3VuZFNpemUiLCJfaW1hZ2UiLCJkaW1FbCIsImRpbUltYWdlIiwic3BhbiIsInBvc1BlcmNlbnRhZ2UiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiZ2V0Q3NzIiwiZ2V0U3RlcCIsImdldFZhbHVlIiwicGFyc2VJbnQiLCJnZXRPZmZzZXRFbGVtZW50IiwiZWFzZSIsIlNsaWRlclJlYWN0aXZlIiwiZ2V0TGVmdCIsImNlbnRlciIsImdldEVsTGVmdCIsImNlbnRlckVsIiwiZ2V0TWF4IiwiZ2V0V2lkdGgiLCJ0cmlnZ2VyVXBkYXRlJDEiLCJzbGlkZXIiLCJzZXRzIiwidG8iLCJ1cGRhdGVUcmFuc2xhdGVzIiwiZ2V0SXRlbUluIiwicmFuZG9tT2Zmc2V0IiwiZ2V0QWN0aXZlcyIsInNsaWRlTGVmdCIsImF2Z1dpZHRoIiwibGVmdENlbnRlciIsInNsaWRlV2lkdGgiLCJyZW9yZGVyIiwiaXRlbXNob3ciLCJzbGlkZUluZGV4Iiwic2xpZGVyUGFyYWxsYXgiLCJzZWxJdGVtIiwicmVmX2RldGFpbCIsImdldEN1cnJlbnQiLCJpc0luIiwidHJhY2tUaW1lciIsIm9iaiQxIiwiQW5pbWF0aW9ucyQyIiwicHVsbCIsInNsaWRlc2hvdyIsIm1heEhlaWdodCIsInNvcnRhYmxlIiwiY2xzSXRlbSIsImNsc1BsYWNlaG9sZGVyIiwiY2xzRHJhZyIsImNsc0RyYWdTdGF0ZSIsImNsc0Jhc2UiLCJjbHNOb0RyYWciLCJjbHNFbXB0eSIsImNsc0N1c3RvbSIsImhhbmRsZSIsInRCb2RpZXMiLCJoYW5kbGVzIiwidG91Y2hBY3Rpb24iLCJyZWYkMiIsInJlZiQzIiwiZWxlbWVudEZyb21Qb2ludCIsImdldFNvcnRhYmxlIiwicHJldmlvdXMiLCJpbnNlcnQiLCJ0b3VjaGVkIiwiY2xvbmUiLCJvdXRlckhUTUwiLCJib3hTaXppbmciLCJ0cmFja1Njcm9sbCIsImNsYXNzZXMiLCJpc1ByZWRlY2Vzc29yIiwidG9vbHRpcCIsInRpdGxlIiwiX2hhc1RpdGxlIiwiX3VuYmluZCIsInVwbG9hZCIsImNsc0RyYWdvdmVyIiwiY29uY3VycmVudCIsIm1heFNpemUiLCJtaW1lIiwibXNnSW52YWxpZE1pbWUiLCJtc2dJbnZhbGlkTmFtZSIsIm1zZ0ludmFsaWRTaXplIiwicGFyYW1zIiwiYWJvcnQiLCJiZWZvcmVBbGwiLCJjb21wbGV0ZSIsImNvbXBsZXRlQWxsIiwiZXJyb3IiLCJmYWlsIiwibG9hZEVuZCIsImxvYWRTdGFydCIsInByb2dyZXNzIiwiY2hhbmdlIiwidHJhbnNmZXIiLCJkYXRhVHJhbnNmZXIiLCJkcmFnZW50ZXIiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsIm1hdGNoJDEiLCJjaHVua3MiLCJjaHVuayIsIkZvcm1EYXRhIiwiZmlsZSIsInBhdHRlcm4iLCJzdG9wUHJvcGFnYXRpb24iLCJDb3VudGRvd24iLCJGaWx0ZXIiLCJOb3RpZmljYXRpb24iLCJTbGlkZXJQYXJhbGxheCIsIlNsaWRlc2hvd1BhcmFsbGF4IiwiU29ydGFibGUiLCJUb29sdGlwIiwiVXBsb2FkIiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7QUFHbUVBLFVBRzFELGVBRURDLEVBQWVDLE9BQU9DLFVBQ3RCQyxFQUFpQkgsRUFBYUcsd0JBRXpCQyxFQUFPQyxFQUFLQyxVQUNWSCxFQUFlSSxLQUFLRixFQUFLQyxPQUdoQ0UsRUFBaUIsR0FDakJDLEVBQWMsNkJBRVRDLEVBQVVDLFVB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
